"use strict";function cov_1csyqvtbq(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts";var hash="32a9616f96ae88df582fb64ffdb9e08330ac208f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:25},end:{line:4,column:56}},"3":{start:{line:5,column:15},end:{line:5,column:44}},"4":{start:{line:6,column:16},end:{line:6,column:46}},"5":{start:{line:7,column:30},end:{line:7,column:74}},"6":{start:{line:10,column:8},end:{line:10,column:28}},"7":{start:{line:11,column:8},end:{line:11,column:58}},"8":{start:{line:14,column:25},end:{line:14,column:51}},"9":{start:{line:15,column:24},end:{line:15,column:65}},"10":{start:{line:16,column:8},end:{line:16,column:93}},"11":{start:{line:19,column:26},end:{line:19,column:52}},"12":{start:{line:20,column:59},end:{line:20,column:64}},"13":{start:{line:21,column:8},end:{line:25,column:10}},"14":{start:{line:28,column:0},end:{line:28,column:33}},"15":{start:{line:29,column:0},end:{line:29,column:101}},"16":{start:{line:30,column:0},end:{line:30,column:43}},"17":{start:{line:31,column:0},end:{line:35,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:30},end:{line:12,column:5}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:16},end:{line:17,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:31},end:{line:26,column:5}},line:18}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts"],names:[],mappings:";;AAIA,uCAAwC;AAExC,yDAAqD;AACrD,6CAAiD;AACjD,+CAA6E;AAC7E,2EAAsE;AAOtE,MAAqB,cAAe,SAAQ,8BAAa;IAUvD,YAAY,IAAc,EAAE,MAAe;QACzC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,uBAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,OAAO,MAAM,uCAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAEO,UAAU,CAAC,cAAiC;QAClD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAEzD,OAAO;YACL,QAAQ;YACR,mBAAmB;YACnB,OAAO;SACR,CAAC;IACJ,CAAC;;AA9BH,iCA+BC;AA9Be,0BAAW,GAAG,uEAAuE,CAAC;AAEtF,mBAAI,GAAG,CAAC,kBAAW,CAAC,CAAC;AACrB,oBAAK,GAAG;IACpB,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,mBAAmB,EAAE,2BAAmB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5D,OAAO,EAAE,eAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;CACrC,CAAC",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable filenames/match-exported */\nimport { IConfig } from \"@oclif/config\";\nimport * as Parser from \"@oclif/parser\";\nimport { readJsonSync } from \"fs-extra\";\n\nimport { TBBaseCommand } from \"../../command-config\";\nimport { resultsFile } from \"../../helpers/args\";\nimport { fidelity, isCIEnv, regressionThreshold } from \"../../helpers/flags\";\nimport { logCompareResults } from \"../../helpers/log-compare-results\";\n\nexport interface CompareAnalyzeFlags {\n  fidelity: number;\n  regressionThreshold: number;\n  isCIEnv: boolean;\n}\nexport default class CompareAnalyze extends TBBaseCommand {\n  public static description = `Generates stdout report from the \"tracerbench compare\" command output`;\n\n  public static args = [resultsFile];\n  public static flags = {\n    fidelity: fidelity({ required: true }),\n    regressionThreshold: regressionThreshold({ required: true }),\n    isCIEnv: isCIEnv({ required: true }),\n  };\n  public typedFlags: CompareAnalyzeFlags;\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    this.typedFlags = this.parseFlags(CompareAnalyze);\n  }\n\n  public async run(): Promise<string> {\n    const { args } = this.parse(CompareAnalyze);\n    const results = readJsonSync(args.resultsFile);\n    return await logCompareResults(results, this.typedFlags, this);\n  }\n\n  private parseFlags(CompareAnalyze: Parser.Input<any>): CompareAnalyzeFlags {\n    const { flags } = this.parse(CompareAnalyze);\n    const { fidelity, regressionThreshold, isCIEnv } = flags;\n\n    return {\n      fidelity,\n      regressionThreshold,\n      isCIEnv,\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"32a9616f96ae88df582fb64ffdb9e08330ac208f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1csyqvtbq=function(){return actualCoverage;};return actualCoverage;}cov_1csyqvtbq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fs_extra_1=(cov_1csyqvtbq().s[1]++,require("fs-extra"));const command_config_1=(cov_1csyqvtbq().s[2]++,require("../../command-config"));const args_1=(cov_1csyqvtbq().s[3]++,require("../../helpers/args"));const flags_1=(cov_1csyqvtbq().s[4]++,require("../../helpers/flags"));const log_compare_results_1=(cov_1csyqvtbq().s[5]++,require("../../helpers/log-compare-results"));class CompareAnalyze extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_1csyqvtbq().f[0]++;cov_1csyqvtbq().s[6]++;super(argv,config);cov_1csyqvtbq().s[7]++;this.typedFlags=this.parseFlags(CompareAnalyze);}async run(){cov_1csyqvtbq().f[1]++;const{args}=(cov_1csyqvtbq().s[8]++,this.parse(CompareAnalyze));const results=(cov_1csyqvtbq().s[9]++,fs_extra_1.readJsonSync(args.resultsFile));cov_1csyqvtbq().s[10]++;return await log_compare_results_1.logCompareResults(results,this.typedFlags,this);}parseFlags(CompareAnalyze){cov_1csyqvtbq().f[2]++;const{flags}=(cov_1csyqvtbq().s[11]++,this.parse(CompareAnalyze));const{fidelity,regressionThreshold,isCIEnv}=(cov_1csyqvtbq().s[12]++,flags);cov_1csyqvtbq().s[13]++;return{fidelity,regressionThreshold,isCIEnv};}}cov_1csyqvtbq().s[14]++;exports.default=CompareAnalyze;cov_1csyqvtbq().s[15]++;CompareAnalyze.description=`Generates stdout report from the "tracerbench compare" command output`;cov_1csyqvtbq().s[16]++;CompareAnalyze.args=[args_1.resultsFile];cov_1csyqvtbq().s[17]++;CompareAnalyze.flags={fidelity:flags_1.fidelity({required:true}),regressionThreshold:flags_1.regressionThreshold({required:true}),isCIEnv:flags_1.isCIEnv({required:true})};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLHVDQUF3QztBQUV4Qyx5REFBcUQ7QUFDckQsNkNBQWlEO0FBQ2pELCtDQUE2RTtBQUM3RSwyRUFBc0U7QUFPdEUsTUFBcUIsY0FBZSxTQUFRLDhCQUFhO0lBVXZELFlBQVksSUFBYyxFQUFFLE1BQWU7UUFDekMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHO1FBQ2QsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUMsTUFBTSxPQUFPLEdBQUcsdUJBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsT0FBTyxNQUFNLHVDQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTyxVQUFVLENBQUMsY0FBaUM7UUFDbEQsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFFekQsT0FBTztZQUNMLFFBQVE7WUFDUixtQkFBbUI7WUFDbkIsT0FBTztTQUNSLENBQUM7SUFDSixDQUFDOztBQTlCSCxpQ0ErQkM7QUE5QmUsMEJBQVcsR0FBRyx1RUFBdUUsQ0FBQztBQUV0RixtQkFBSSxHQUFHLENBQUMsa0JBQVcsQ0FBQyxDQUFDO0FBQ3JCLG9CQUFLLEdBQUc7SUFDcEIsUUFBUSxFQUFFLGdCQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDdEMsbUJBQW1CLEVBQUUsMkJBQW1CLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDNUQsT0FBTyxFQUFFLGVBQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUNyQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgZmlsZW5hbWVzL21hdGNoLWV4cG9ydGVkICovXG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSBcIkBvY2xpZi9jb25maWdcIjtcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tIFwiQG9jbGlmL3BhcnNlclwiO1xuaW1wb3J0IHsgcmVhZEpzb25TeW5jIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5cbmltcG9ydCB7IFRCQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vY29tbWFuZC1jb25maWdcIjtcbmltcG9ydCB7IHJlc3VsdHNGaWxlIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvYXJnc1wiO1xuaW1wb3J0IHsgZmlkZWxpdHksIGlzQ0lFbnYsIHJlZ3Jlc3Npb25UaHJlc2hvbGQgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9mbGFnc1wiO1xuaW1wb3J0IHsgbG9nQ29tcGFyZVJlc3VsdHMgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9sb2ctY29tcGFyZS1yZXN1bHRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gIGZpZGVsaXR5OiBudW1iZXI7XG4gIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IG51bWJlcjtcbiAgaXNDSUVudjogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmVBbmFseXplIGV4dGVuZHMgVEJCYXNlQ29tbWFuZCB7XG4gIHB1YmxpYyBzdGF0aWMgZGVzY3JpcHRpb24gPSBgR2VuZXJhdGVzIHN0ZG91dCByZXBvcnQgZnJvbSB0aGUgXCJ0cmFjZXJiZW5jaCBjb21wYXJlXCIgY29tbWFuZCBvdXRwdXRgO1xuXG4gIHB1YmxpYyBzdGF0aWMgYXJncyA9IFtyZXN1bHRzRmlsZV07XG4gIHB1YmxpYyBzdGF0aWMgZmxhZ3MgPSB7XG4gICAgZmlkZWxpdHk6IGZpZGVsaXR5KHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgcmVncmVzc2lvblRocmVzaG9sZDogcmVncmVzc2lvblRocmVzaG9sZCh7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICAgIGlzQ0lFbnY6IGlzQ0lFbnYoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgfTtcbiAgcHVibGljIHR5cGVkRmxhZ3M6IENvbXBhcmVBbmFseXplRmxhZ3M7XG4gIGNvbnN0cnVjdG9yKGFyZ3Y6IHN0cmluZ1tdLCBjb25maWc6IElDb25maWcpIHtcbiAgICBzdXBlcihhcmd2LCBjb25maWcpO1xuICAgIHRoaXMudHlwZWRGbGFncyA9IHRoaXMucGFyc2VGbGFncyhDb21wYXJlQW5hbHl6ZSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgeyBhcmdzIH0gPSB0aGlzLnBhcnNlKENvbXBhcmVBbmFseXplKTtcbiAgICBjb25zdCByZXN1bHRzID0gcmVhZEpzb25TeW5jKGFyZ3MucmVzdWx0c0ZpbGUpO1xuICAgIHJldHVybiBhd2FpdCBsb2dDb21wYXJlUmVzdWx0cyhyZXN1bHRzLCB0aGlzLnR5cGVkRmxhZ3MsIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZUZsYWdzKENvbXBhcmVBbmFseXplOiBQYXJzZXIuSW5wdXQ8YW55Pik6IENvbXBhcmVBbmFseXplRmxhZ3Mge1xuICAgIGNvbnN0IHsgZmxhZ3MgfSA9IHRoaXMucGFyc2UoQ29tcGFyZUFuYWx5emUpO1xuICAgIGNvbnN0IHsgZmlkZWxpdHksIHJlZ3Jlc3Npb25UaHJlc2hvbGQsIGlzQ0lFbnYgfSA9IGZsYWdzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZGVsaXR5LFxuICAgICAgcmVncmVzc2lvblRocmVzaG9sZCxcbiAgICAgIGlzQ0lFbnYsXG4gICAgfTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9jb21tYW5kcy9jb21wYXJlL2FuYWx5emUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InlvS0FJQSxLQUFBLENBQUEsVUFBQSx5QkFBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsQ0FFQSxLQUFBLENBQUEsZ0JBQUEseUJBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLHlCQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsQ0FDQSxLQUFBLENBQUEsT0FBQSx5QkFBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLHFCQUFBLHlCQUFBLE9BQUEsQ0FBQSxtQ0FBQSxDQUFBLENBQUEsQ0FPQSxLQUFxQixDQUFBLGNBQXJCLFNBQTRDLGdCQUFBLENBQUEsYUFBNUMsQ0FBeUQsQ0FVdkQsV0FBQSxDQUFZLElBQVosQ0FBNEIsTUFBNUIsQ0FBMkMsK0NBQ3pDLE1BQU0sSUFBTixDQUFZLE1BQVosRUFEeUMsdUJBRXpDLEtBQUssVUFBTCxDQUFrQixLQUFLLFVBQUwsQ0FBZ0IsY0FBaEIsQ0FBbEIsQ0FDRCxDQUVNLEtBQU0sQ0FBQSxHQUFOLEVBQVMsd0JBQ2QsS0FBTSxDQUFFLElBQUYsMEJBQVcsS0FBSyxLQUFMLENBQVcsY0FBWCxDQUFYLENBQU4sQ0FDQSxLQUFNLENBQUEsT0FBTyx5QkFBRyxVQUFBLENBQUEsWUFBQSxDQUFhLElBQUksQ0FBQyxXQUFsQixDQUFILENBQWIsQ0FGYyx3QkFHZCxNQUFPLE1BQU0sQ0FBQSxxQkFBQSxDQUFBLGlCQUFBLENBQWtCLE9BQWxCLENBQTJCLEtBQUssVUFBaEMsQ0FBNEMsSUFBNUMsQ0FBYixDQUNELENBRU8sVUFBVSxDQUFDLGNBQUQsQ0FBa0Msd0JBQ2xELEtBQU0sQ0FBRSxLQUFGLDJCQUFZLEtBQUssS0FBTCxDQUFXLGNBQVgsQ0FBWixDQUFOLENBQ0EsS0FBTSxDQUFFLFFBQUYsQ0FBWSxtQkFBWixDQUFpQyxPQUFqQywyQkFBNkMsS0FBN0MsQ0FBTixDQUZrRCx3QkFJbEQsTUFBTyxDQUNMLFFBREssQ0FFTCxtQkFGSyxDQUdMLE9BSEssQ0FBUCxDQUtELENBOUJzRCxDLHdCQUF6RCxPQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQyx3QkFDZ0IsY0FBQSxDQUFBLFdBQUEsQ0FBYyx1RUFBZCxDLHdCQUVBLGNBQUEsQ0FBQSxJQUFBLENBQU8sQ0FBQyxNQUFBLENBQUEsV0FBRCxDQUFQLEMsd0JBQ0EsY0FBQSxDQUFBLEtBQUEsQ0FBUSxDQUNwQixRQUFRLENBQUUsT0FBQSxDQUFBLFFBQUEsQ0FBUyxDQUFFLFFBQVEsQ0FBRSxJQUFaLENBQVQsQ0FEVSxDQUVwQixtQkFBbUIsQ0FBRSxPQUFBLENBQUEsbUJBQUEsQ0FBb0IsQ0FBRSxRQUFRLENBQUUsSUFBWixDQUFwQixDQUZELENBR3BCLE9BQU8sQ0FBRSxPQUFBLENBQUEsT0FBQSxDQUFRLENBQUUsUUFBUSxDQUFFLElBQVosQ0FBUixDQUhXLENBQVIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIGZpbGVuYW1lcy9tYXRjaC1leHBvcnRlZCAqL1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gXCJAb2NsaWYvY29uZmlnXCI7XG5pbXBvcnQgKiBhcyBQYXJzZXIgZnJvbSBcIkBvY2xpZi9wYXJzZXJcIjtcbmltcG9ydCB7IHJlYWRKc29uU3luYyB9IGZyb20gXCJmcy1leHRyYVwiO1xuXG5pbXBvcnQgeyBUQkJhc2VDb21tYW5kIH0gZnJvbSBcIi4uLy4uL2NvbW1hbmQtY29uZmlnXCI7XG5pbXBvcnQgeyByZXN1bHRzRmlsZSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2FyZ3NcIjtcbmltcG9ydCB7IGZpZGVsaXR5LCBpc0NJRW52LCByZWdyZXNzaW9uVGhyZXNob2xkIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvZmxhZ3NcIjtcbmltcG9ydCB7IGxvZ0NvbXBhcmVSZXN1bHRzIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvbG9nLWNvbXBhcmUtcmVzdWx0c1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhcmVBbmFseXplRmxhZ3Mge1xuICBmaWRlbGl0eTogbnVtYmVyO1xuICByZWdyZXNzaW9uVGhyZXNob2xkOiBudW1iZXI7XG4gIGlzQ0lFbnY6IGJvb2xlYW47XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJlQW5hbHl6ZSBleHRlbmRzIFRCQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgc3RhdGljIGRlc2NyaXB0aW9uID0gYEdlbmVyYXRlcyBzdGRvdXQgcmVwb3J0IGZyb20gdGhlIFwidHJhY2VyYmVuY2ggY29tcGFyZVwiIGNvbW1hbmQgb3V0cHV0YDtcblxuICBwdWJsaWMgc3RhdGljIGFyZ3MgPSBbcmVzdWx0c0ZpbGVdO1xuICBwdWJsaWMgc3RhdGljIGZsYWdzID0ge1xuICAgIGZpZGVsaXR5OiBmaWRlbGl0eSh7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IHJlZ3Jlc3Npb25UaHJlc2hvbGQoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBpc0NJRW52OiBpc0NJRW52KHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gIH07XG4gIHB1YmxpYyB0eXBlZEZsYWdzOiBDb21wYXJlQW5hbHl6ZUZsYWdzO1xuICBjb25zdHJ1Y3Rvcihhcmd2OiBzdHJpbmdbXSwgY29uZmlnOiBJQ29uZmlnKSB7XG4gICAgc3VwZXIoYXJndiwgY29uZmlnKTtcbiAgICB0aGlzLnR5cGVkRmxhZ3MgPSB0aGlzLnBhcnNlRmxhZ3MoQ29tcGFyZUFuYWx5emUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHsgYXJncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlQW5hbHl6ZSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IHJlYWRKc29uU3luYyhhcmdzLnJlc3VsdHNGaWxlKTtcbiAgICByZXR1cm4gYXdhaXQgbG9nQ29tcGFyZVJlc3VsdHMocmVzdWx0cywgdGhpcy50eXBlZEZsYWdzLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VGbGFncyhDb21wYXJlQW5hbHl6ZTogUGFyc2VyLklucHV0PGFueT4pOiBDb21wYXJlQW5hbHl6ZUZsYWdzIHtcbiAgICBjb25zdCB7IGZsYWdzIH0gPSB0aGlzLnBhcnNlKENvbXBhcmVBbmFseXplKTtcbiAgICBjb25zdCB7IGZpZGVsaXR5LCByZWdyZXNzaW9uVGhyZXNob2xkLCBpc0NJRW52IH0gPSBmbGFncztcblxuICAgIHJldHVybiB7XG4gICAgICBmaWRlbGl0eSxcbiAgICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQsXG4gICAgICBpc0NJRW52LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==