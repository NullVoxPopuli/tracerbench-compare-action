"use strict";function cov_1skb92i4ln(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts";var hash="cc484b94f74cf5e5d081201cfda177c9687c6e3c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:14},end:{line:6,column:30}},"4":{start:{line:7,column:15},end:{line:7,column:30}},"5":{start:{line:8,column:25},end:{line:8,column:53}},"6":{start:{line:9,column:15},end:{line:9,column:41}},"7":{start:{line:10,column:16},end:{line:10,column:43}},"8":{start:{line:11,column:16},end:{line:11,column:43}},"9":{start:{line:14,column:8},end:{line:14,column:28}},"10":{start:{line:15,column:8},end:{line:15,column:24}},"11":{start:{line:18,column:32},end:{line:18,column:51}},"12":{start:{line:19,column:81},end:{line:19,column:86}},"13":{start:{line:20,column:28},end:{line:20,column:32}},"14":{start:{line:21,column:24},end:{line:28,column:9}},"15":{start:{line:29,column:27},end:{line:32,column:9}},"16":{start:{line:33,column:22},end:{line:105,column:10}},"17":{start:{line:38,column:20},end:{line:40,column:34}},"18":{start:{line:48,column:20},end:{line:55,column:21}},"19":{start:{line:49,column:24},end:{line:51,column:25}},"20":{start:{line:50,column:28},end:{line:50,column:66}},"21":{start:{line:54,column:24},end:{line:54,column:42}},"22":{start:{line:62,column:20},end:{line:62,column:85}},"23":{start:{line:63,column:20},end:{line:63,column:83}},"24":{start:{line:64,column:20},end:{line:64,column:102}},"25":{start:{line:66,column:20},end:{line:66,column:68}},"26":{start:{line:68,column:24},end:{line:74,column:25}},"27":{start:{line:69,column:40},end:{line:69,column:78}},"28":{start:{line:70,column:28},end:{line:70,column:39}},"29":{start:{line:73,column:28},end:{line:73,column:141}},"30":{start:{line:81,column:45},end:{line:81,column:48}},"31":{start:{line:82,column:20},end:{line:89,column:21}},"32":{start:{line:84,column:48},end:{line:84,column:113}},"33":{start:{line:85,column:24},end:{line:85,column:54}},"34":{start:{line:88,column:24},end:{line:88,column:47}},"35":{start:{line:95,column:44},end:{line:95,column:47}},"36":{start:{line:97,column:20},end:{line:102,column:21}},"37":{start:{line:98,column:24},end:{line:98,column:73}},"38":{start:{line:101,column:24},end:{line:101,column:47}},"39":{start:{line:106,column:8},end:{line:118,column:11}},"40":{start:{line:109,column:12},end:{line:109,column:35}},"41":{start:{line:113,column:12},end:{line:113,column:33}},"42":{start:{line:115,column:12},end:{line:115,column:34}},"43":{start:{line:117,column:12},end:{line:117,column:65}},"44":{start:{line:121,column:30},end:{line:121,column:31}},"45":{start:{line:122,column:27},end:{line:122,column:29}},"46":{start:{line:123,column:8},end:{line:135,column:11}},"47":{start:{line:124,column:31},end:{line:124,column:62}},"48":{start:{line:125,column:31},end:{line:125,column:50}},"49":{start:{line:127,column:24},end:{line:127,column:43}},"50":{start:{line:128,column:33},end:{line:128,column:49}},"51":{start:{line:129,column:12},end:{line:129,column:44}},"52":{start:{line:130,column:12},end:{line:134,column:15}},"53":{start:{line:136,column:8},end:{line:136,column:84}},"54":{start:{line:138,column:8},end:{line:144,column:11}},"55":{start:{line:140,column:12},end:{line:140,column:43}},"56":{start:{line:143,column:12},end:{line:143,column:42}},"57":{start:{line:147,column:31},end:{line:147,column:32}},"58":{start:{line:148,column:28},end:{line:148,column:30}},"59":{start:{line:149,column:8},end:{line:161,column:11}},"60":{start:{line:150,column:31},end:{line:150,column:69}},"61":{start:{line:151,column:31},end:{line:151,column:60}},"62":{start:{line:153,column:24},end:{line:153,column:53}},"63":{start:{line:154,column:33},end:{line:154,column:49}},"64":{start:{line:155,column:12},end:{line:155,column:45}},"65":{start:{line:156,column:12},end:{line:160,column:15}},"66":{start:{line:162,column:8},end:{line:162,column:86}},"67":{start:{line:164,column:8},end:{line:170,column:11}},"68":{start:{line:166,column:12},end:{line:166,column:43}},"69":{start:{line:169,column:12},end:{line:169,column:42}},"70":{start:{line:175,column:24},end:{line:175,column:26}},"71":{start:{line:176,column:27},end:{line:176,column:31}},"72":{start:{line:178,column:27},end:{line:178,column:29}},"73":{start:{line:179,column:8},end:{line:181,column:9}},"74":{start:{line:180,column:12},end:{line:180,column:110}},"75":{start:{line:182,column:8},end:{line:187,column:9}},"76":{start:{line:183,column:12},end:{line:183,column:84}},"77":{start:{line:186,column:12},end:{line:186,column:26}},"78":{start:{line:188,column:8},end:{line:193,column:9}},"79":{start:{line:189,column:12},end:{line:189,column:63}},"80":{start:{line:192,column:12},end:{line:192,column:26}},"81":{start:{line:194,column:8},end:{line:199,column:9}},"82":{start:{line:195,column:12},end:{line:195,column:56}},"83":{start:{line:198,column:12},end:{line:198,column:24}},"84":{start:{line:200,column:8},end:{line:202,column:9}},"85":{start:{line:201,column:12},end:{line:201,column:140}},"86":{start:{line:203,column:8},end:{line:218,column:11}},"87":{start:{line:204,column:31},end:{line:204,column:83}},"88":{start:{line:207,column:12},end:{line:217,column:13}},"89":{start:{line:208,column:16},end:{line:208,column:37}},"90":{start:{line:209,column:16},end:{line:209,column:72}},"91":{start:{line:211,column:17},end:{line:217,column:13}},"92":{start:{line:213,column:16},end:{line:215,column:17}},"93":{start:{line:214,column:20},end:{line:214,column:27}},"94":{start:{line:216,column:16},end:{line:216,column:72}},"95":{start:{line:219,column:8},end:{line:219,column:42}},"96":{start:{line:222,column:8},end:{line:228,column:10}},"97":{start:{line:231,column:30},end:{line:231,column:72}},"98":{start:{line:232,column:8},end:{line:232,column:83}},"99":{start:{line:233,column:8},end:{line:239,column:11}},"100":{start:{line:234,column:12},end:{line:238,column:16}},"101":{start:{line:242,column:0},end:{line:242,column:26}},"102":{start:{line:244,column:0},end:{line:244,column:28}},"103":{start:{line:245,column:0},end:{line:245,column:76}},"104":{start:{line:246,column:0},end:{line:246,column:32}},"105":{start:{line:247,column:0},end:{line:253,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:18},end:{line:16,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:16},end:{line:119,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:22},end:{line:36,column:23}},loc:{start:{line:36,column:37},end:{line:41,column:17}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:22},end:{line:45,column:23}},loc:{start:{line:45,column:28},end:{line:56,column:17}},line:45},"4":{name:"(anonymous_4)",decl:{start:{line:60,column:22},end:{line:60,column:23}},loc:{start:{line:60,column:37},end:{line:76,column:17}},line:60},"5":{name:"getURLFromHAR",decl:{start:{line:67,column:29},end:{line:67,column:42}},loc:{start:{line:67,column:48},end:{line:75,column:21}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:22},end:{line:80,column:23}},loc:{start:{line:80,column:37},end:{line:90,column:17}},line:80},"7":{name:"(anonymous_7)",decl:{start:{line:94,column:22},end:{line:94,column:23}},loc:{start:{line:94,column:37},end:{line:103,column:17}},line:94},"8":{name:"(anonymous_8)",decl:{start:{line:108,column:19},end:{line:108,column:20}},loc:{start:{line:108,column:30},end:{line:110,column:9}},line:108},"9":{name:"(anonymous_9)",decl:{start:{line:111,column:18},end:{line:111,column:19}},loc:{start:{line:111,column:33},end:{line:118,column:9}},line:111},"10":{name:"(anonymous_10)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:20},end:{line:145,column:5}},line:120},"11":{name:"(anonymous_11)",decl:{start:{line:124,column:20},end:{line:124,column:21}},loc:{start:{line:124,column:31},end:{line:124,column:62}},line:124},"12":{name:"(anonymous_12)",decl:{start:{line:125,column:20},end:{line:125,column:21}},loc:{start:{line:125,column:31},end:{line:125,column:50}},line:125},"13":{name:"(anonymous_13)",decl:{start:{line:126,column:21},end:{line:126,column:22}},loc:{start:{line:126,column:32},end:{line:135,column:9}},line:126},"14":{name:"(anonymous_14)",decl:{start:{line:139,column:18},end:{line:139,column:19}},loc:{start:{line:139,column:28},end:{line:141,column:9}},line:139},"15":{name:"(anonymous_15)",decl:{start:{line:142,column:21},end:{line:142,column:22}},loc:{start:{line:142,column:30},end:{line:144,column:9}},line:142},"16":{name:"(anonymous_16)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:21},end:{line:171,column:5}},line:146},"17":{name:"(anonymous_17)",decl:{start:{line:150,column:20},end:{line:150,column:21}},loc:{start:{line:150,column:31},end:{line:150,column:69}},line:150},"18":{name:"(anonymous_18)",decl:{start:{line:151,column:20},end:{line:151,column:21}},loc:{start:{line:151,column:31},end:{line:151,column:60}},line:151},"19":{name:"(anonymous_19)",decl:{start:{line:152,column:21},end:{line:152,column:22}},loc:{start:{line:152,column:32},end:{line:161,column:9}},line:152},"20":{name:"(anonymous_20)",decl:{start:{line:165,column:18},end:{line:165,column:19}},loc:{start:{line:165,column:28},end:{line:167,column:9}},line:165},"21":{name:"(anonymous_21)",decl:{start:{line:168,column:21},end:{line:168,column:22}},loc:{start:{line:168,column:30},end:{line:170,column:9}},line:168},"22":{name:"(anonymous_22)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:44},end:{line:220,column:5}},line:173},"23":{name:"(anonymous_23)",decl:{start:{line:204,column:20},end:{line:204,column:21}},loc:{start:{line:204,column:31},end:{line:204,column:83}},line:204},"24":{name:"(anonymous_24)",decl:{start:{line:206,column:21},end:{line:206,column:22}},loc:{start:{line:206,column:32},end:{line:218,column:9}},line:206},"25":{name:"(anonymous_25)",decl:{start:{line:221,column:4},end:{line:221,column:5}},loc:{start:{line:221,column:38},end:{line:229,column:5}},line:221},"26":{name:"(anonymous_26)",decl:{start:{line:230,column:4},end:{line:230,column:5}},loc:{start:{line:230,column:33},end:{line:240,column:5}},line:230},"27":{name:"(anonymous_27)",decl:{start:{line:233,column:27},end:{line:233,column:28}},loc:{start:{line:233,column:36},end:{line:239,column:9}},line:233}},branchMap:{"0":{loc:{start:{line:30,column:21},end:{line:30,column:47}},type:"cond-expr",locations:[{start:{line:30,column:31},end:{line:30,column:38}},{start:{line:30,column:41},end:{line:30,column:47}}],line:30},"1":{loc:{start:{line:31,column:17},end:{line:31,column:54}},type:"cond-expr",locations:[{start:{line:31,column:35},end:{line:31,column:50}},{start:{line:31,column:53},end:{line:31,column:54}}],line:31},"2":{loc:{start:{line:38,column:34},end:{line:40,column:33}},type:"cond-expr",locations:[{start:{line:39,column:26},end:{line:39,column:80}},{start:{line:40,column:26},end:{line:40,column:33}}],line:38},"3":{loc:{start:{line:49,column:24},end:{line:51,column:25}},type:"if",locations:[{start:{line:49,column:24},end:{line:51,column:25}},{start:{line:49,column:24},end:{line:51,column:25}}],line:49},"4":{loc:{start:{line:66,column:30},end:{line:66,column:67}},type:"cond-expr",locations:[{start:{line:66,column:43},end:{line:66,column:46}},{start:{line:66,column:49},end:{line:66,column:67}}],line:66},"5":{loc:{start:{line:179,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:179,column:8},end:{line:181,column:9}},{start:{line:179,column:8},end:{line:181,column:9}}],line:179},"6":{loc:{start:{line:194,column:8},end:{line:199,column:9}},type:"if",locations:[{start:{line:194,column:8},end:{line:199,column:9}},{start:{line:194,column:8},end:{line:199,column:9}}],line:194},"7":{loc:{start:{line:200,column:8},end:{line:202,column:9}},type:"if",locations:[{start:{line:200,column:8},end:{line:202,column:9}},{start:{line:200,column:8},end:{line:202,column:9}}],line:200},"8":{loc:{start:{line:204,column:31},end:{line:204,column:83}},type:"binary-expr",locations:[{start:{line:204,column:31},end:{line:204,column:52}},{start:{line:204,column:56},end:{line:204,column:83}}],line:204},"9":{loc:{start:{line:207,column:12},end:{line:217,column:13}},type:"if",locations:[{start:{line:207,column:12},end:{line:217,column:13}},{start:{line:207,column:12},end:{line:217,column:13}}],line:207},"10":{loc:{start:{line:211,column:17},end:{line:217,column:13}},type:"if",locations:[{start:{line:211,column:17},end:{line:217,column:13}},{start:{line:211,column:17},end:{line:217,column:13}}],line:211},"11":{loc:{start:{line:211,column:21},end:{line:212,column:48}},type:"binary-expr",locations:[{start:{line:211,column:21},end:{line:211,column:54}},{start:{line:212,column:16},end:{line:212,column:48}}],line:211},"12":{loc:{start:{line:213,column:16},end:{line:215,column:17}},type:"if",locations:[{start:{line:213,column:16},end:{line:215,column:17}},{start:{line:213,column:16},end:{line:215,column:17}}],line:213}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IConditions, liveTrace } from \"@tracerbench/core\";\nimport { Archive } from \"@tracerbench/har\";\nimport { TraceEvent } from \"@tracerbench/trace-event\";\nimport Protocol from \"devtools-protocol\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  convertToSentCase,\n  findFrame,\n  formatToDuration,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  logBar,\n  logBarOptions,\n  logHeading,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\ninterface ProfileContext {\n  cookies: Protocol.Network.CookieParam[];\n  harJSON: Archive;\n  traceJSONPath: string;\n  traceEvents: TraceEvent[];\n  url: string;\n}\n\ntype markerLogMeta = {\n  name: string;\n  sentanceCaseName: string;\n  duration: number;\n  startTime: number;\n  bar: string;\n};\n\nexport default class Profile extends TBBaseCommand {\n  // include backwards compat to trace cmd\n  static aliases = [\"trace\"];\n  public trace: TraceEvent[] = [];\n  public static description = `Parses a CPU profile with asset and marker timings.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n  };\n\n  public async run(): Promise<void> {\n    const { flags, args } = this.parse(Profile);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      url,\n    } = flags;\n    const { harpath } = args;\n    const cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const conditions: IConditions = {\n      network: network ? network : \"none\",\n      cpu: cpuThrottleRate ? cpuThrottleRate : 1,\n    };\n\n    const tasks = new listr([\n      {\n        title: \"Reading cookies json\",\n        task: async (ctx: ProfileContext) => {\n          // read cookies json file from path and set to context\n          ctx.cookies = cookiespath.length\n            ? await readJson(resolve(cookiespath))\n            : cookies;\n        },\n      },\n      {\n        title: \"Preparing results folder\",\n        task: () => {\n          // if the folder for the tracerbench results file\n          // does not exist then create it\n          try {\n            if (!existsSync(tbResultsFolder)) {\n              mkdirSync(tbResultsFolder);\n            }\n          } catch (error) {\n            this.error(error);\n          }\n        },\n      },\n      {\n        title: \"Validating & Cloning HAR file\",\n        task: async (ctx: ProfileContext) => {\n          // validate har and clone it to trace.json which will be mutated\n          ctx.harJSON = await readJson(resolve(harpath));\n          ctx.traceJSONPath = join(tbResultsFolder, \"trace.json\");\n          writeFileSync(\n            ctx.traceJSONPath,\n            JSON.stringify(ctx.harJSON, null, 2)\n          );\n          // if no url get url from har otherwise set with cmd url\n          ctx.url = url.length ? url : getURLFromHAR(ctx);\n\n          function getURLFromHAR(ctx: ProfileContext): string {\n            try {\n              const url = ctx.harJSON.log.entries[0].request.url;\n              return url;\n            } catch (error) {\n              throw new Error(\n                `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n              );\n            }\n          }\n        },\n      },\n      {\n        title: \"Recording the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { cookies, url } = ctx;\n          try {\n            // run the liveTrace\n            const { traceEvents } = await liveTrace(\n              url,\n              tbResultsFolder,\n              cookies,\n              conditions\n            );\n            ctx.traceEvents = traceEvents as TraceEvent[];\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n      {\n        title: \"Setting trace events\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents } = ctx;\n          // mutates this.trace\n          try {\n            this.trace = setTraceEvents(traceEvents);\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n    ]);\n\n    await tasks\n      .run()\n      .catch((error) => {\n        this.error(`${error}`);\n      })\n      .then(async (ctx) => {\n        // log js-eval-time\n        this.logJSEvalTime();\n        // log css-parse\n        this.logCSSEvalTime();\n        // log user timings\n        await this.markerTimings(ctx.traceJSONPath, ctx.url);\n      });\n  }\n\n  private logJSEvalTime(): void {\n    let totalJSDuration = 0;\n    const jsEvalLogs: logBarOptions[] = [];\n    this.trace\n      .filter((event: TraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = event.dur / 1000;\n        totalJSDuration += durationInMs;\n        jsEvalLogs.push({\n          totalDuration: totalJSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);\n\n    // log js-eval-time\n    jsEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  private logCSSEvalTime(): void {\n    let totalCSSDuration = 0;\n    const cssEvalLogs: logBarOptions[] = [];\n\n    this.trace\n      .filter((event: TraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        cssEvalLogs.push({\n          totalDuration: totalCSSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);\n\n    // log css-parse-time\n    cssEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(\n    traceJSONPath: string,\n    url: string\n  ): Promise<void> {\n    let frame: string;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let customTrace: TraceEvent[];\n    const markerLogs: markerLogMeta[] = [];\n\n    if (!url) {\n      this.error(\n        `Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n      );\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(traceJSONPath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      customTrace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (url.startsWith(\"http\")) {\n      frame = findFrame(customTrace, url);\n    } else {\n      frame = url;\n    }\n\n    if (!frame) {\n      this.error(\n        `Could not extract frame from trace. Explicitly opt-out of usertimings via \"--usertimings\" boolean flag and rerun.`\n      );\n    }\n\n    customTrace\n      .filter((event: TraceEvent) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: TraceEvent) => {\n        if (isFrameNavigationStart(frame, event, url)) {\n          startTime = event.ts;\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        } else if (\n          isFrameMark(frame, event) &&\n          event.name !== \"navigationStart\"\n        ) {\n          if (startTime === -1) {\n            return;\n          }\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        }\n      });\n\n    this.logMarkerTimings(markerLogs);\n  }\n\n  private buildMarkerLogs(event: TraceEvent, startTime: number): markerLogMeta {\n    return {\n      name: event.name,\n      sentanceCaseName: convertToSentCase(event.name),\n      duration: formatToDuration(event.ts, startTime),\n      startTime,\n      bar: \"\",\n    };\n  }\n\n  private logMarkerTimings(markerLogs: markerLogMeta[]): void {\n    const totalDuration = markerLogs[markerLogs.length - 1].duration;\n\n    logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);\n    markerLogs.forEach((log) => {\n      this.log(\n        logBar({\n          totalDuration,\n          duration: log.duration,\n          title: log.sentanceCaseName,\n        })\n      );\n    });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cc484b94f74cf5e5d081201cfda177c9687c6e3c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1skb92i4ln=function(){return actualCoverage;};return actualCoverage;}cov_1skb92i4ln().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/no-explicit-any */const core_1=(cov_1skb92i4ln().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1skb92i4ln().s[2]++,require("fs-extra"));const listr=(cov_1skb92i4ln().s[3]++,require("listr"));const path_1=(cov_1skb92i4ln().s[4]++,require("path"));const command_config_1=(cov_1skb92i4ln().s[5]++,require("../command-config"));const args_1=(cov_1skb92i4ln().s[6]++,require("../helpers/args"));const flags_1=(cov_1skb92i4ln().s[7]++,require("../helpers/flags"));const utils_1=(cov_1skb92i4ln().s[8]++,require("../helpers/utils"));class Profile extends(command_config_1.TBBaseCommand){constructor(){cov_1skb92i4ln().f[0]++;cov_1skb92i4ln().s[9]++;super(...arguments);cov_1skb92i4ln().s[10]++;this.trace=[];}async run(){cov_1skb92i4ln().f[1]++;const{flags,args}=(cov_1skb92i4ln().s[11]++,this.parse(Profile));const{cpuThrottleRate,cookiespath,tbResultsFolder,network,url}=(cov_1skb92i4ln().s[12]++,flags);const{harpath}=(cov_1skb92i4ln().s[13]++,args);const cookies=(cov_1skb92i4ln().s[14]++,[{name:"",value:"",domain:"",path:""}]);const conditions=(cov_1skb92i4ln().s[15]++,{network:network?(cov_1skb92i4ln().b[0][0]++,network):(cov_1skb92i4ln().b[0][1]++,"none"),cpu:cpuThrottleRate?(cov_1skb92i4ln().b[1][0]++,cpuThrottleRate):(cov_1skb92i4ln().b[1][1]++,1)});const tasks=(cov_1skb92i4ln().s[16]++,new listr([{title:"Reading cookies json",task:async ctx=>{cov_1skb92i4ln().f[2]++;cov_1skb92i4ln().s[17]++;// read cookies json file from path and set to context
ctx.cookies=cookiespath.length?(cov_1skb92i4ln().b[2][0]++,await fs_extra_1.readJson(path_1.resolve(cookiespath))):(cov_1skb92i4ln().b[2][1]++,cookies);}},{title:"Preparing results folder",task:()=>{cov_1skb92i4ln().f[3]++;cov_1skb92i4ln().s[18]++;// if the folder for the tracerbench results file
// does not exist then create it
try{cov_1skb92i4ln().s[19]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1skb92i4ln().b[3][0]++;cov_1skb92i4ln().s[20]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1skb92i4ln().b[3][1]++;}}catch(error){cov_1skb92i4ln().s[21]++;this.error(error);}}},{title:"Validating & Cloning HAR file",task:async ctx=>{cov_1skb92i4ln().f[4]++;cov_1skb92i4ln().s[22]++;// validate har and clone it to trace.json which will be mutated
ctx.harJSON=await fs_extra_1.readJson(path_1.resolve(harpath));cov_1skb92i4ln().s[23]++;ctx.traceJSONPath=path_1.join(tbResultsFolder,"trace.json");cov_1skb92i4ln().s[24]++;fs_extra_1.writeFileSync(ctx.traceJSONPath,JSON.stringify(ctx.harJSON,null,2));// if no url get url from har otherwise set with cmd url
cov_1skb92i4ln().s[25]++;ctx.url=url.length?(cov_1skb92i4ln().b[4][0]++,url):(cov_1skb92i4ln().b[4][1]++,getURLFromHAR(ctx));function getURLFromHAR(ctx){cov_1skb92i4ln().f[5]++;cov_1skb92i4ln().s[26]++;try{const url=(cov_1skb92i4ln().s[27]++,ctx.harJSON.log.entries[0].request.url);cov_1skb92i4ln().s[28]++;return url;}catch(error){cov_1skb92i4ln().s[29]++;throw new Error(`${error}. Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}}}},{title:"Recording the live trace",task:async ctx=>{cov_1skb92i4ln().f[6]++;const{cookies,url}=(cov_1skb92i4ln().s[30]++,ctx);cov_1skb92i4ln().s[31]++;try{// run the liveTrace
const{traceEvents}=(cov_1skb92i4ln().s[32]++,await core_1.liveTrace(url,tbResultsFolder,cookies,conditions));cov_1skb92i4ln().s[33]++;ctx.traceEvents=traceEvents;}catch(error){cov_1skb92i4ln().s[34]++;this.error(`${error}`);}}},{title:"Setting trace events",task:async ctx=>{cov_1skb92i4ln().f[7]++;const{traceEvents}=(cov_1skb92i4ln().s[35]++,ctx);// mutates this.trace
cov_1skb92i4ln().s[36]++;try{cov_1skb92i4ln().s[37]++;this.trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1skb92i4ln().s[38]++;this.error(`${error}`);}}}]));cov_1skb92i4ln().s[39]++;await tasks.run().catch(error=>{cov_1skb92i4ln().f[8]++;cov_1skb92i4ln().s[40]++;this.error(`${error}`);}).then(async ctx=>{cov_1skb92i4ln().f[9]++;cov_1skb92i4ln().s[41]++;// log js-eval-time
this.logJSEvalTime();// log css-parse
cov_1skb92i4ln().s[42]++;this.logCSSEvalTime();// log user timings
cov_1skb92i4ln().s[43]++;await this.markerTimings(ctx.traceJSONPath,ctx.url);});}logJSEvalTime(){cov_1skb92i4ln().f[10]++;let totalJSDuration=(cov_1skb92i4ln().s[44]++,0);const jsEvalLogs=(cov_1skb92i4ln().s[45]++,[]);cov_1skb92i4ln().s[46]++;this.trace.filter(event=>{cov_1skb92i4ln().f[11]++;cov_1skb92i4ln().s[47]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1skb92i4ln().f[12]++;cov_1skb92i4ln().s[48]++;return event.args.data.url;}).forEach(event=>{cov_1skb92i4ln().f[13]++;const url=(cov_1skb92i4ln().s[49]++,event.args.data.url);const durationInMs=(cov_1skb92i4ln().s[50]++,event.dur/1000);cov_1skb92i4ln().s[51]++;totalJSDuration+=durationInMs;cov_1skb92i4ln().s[52]++;jsEvalLogs.push({totalDuration:totalJSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[53]++;utils_1.logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);// log js-eval-time
cov_1skb92i4ln().s[54]++;jsEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[14]++;cov_1skb92i4ln().s[55]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[15]++;cov_1skb92i4ln().s[56]++;this.log(utils_1.logBar(log));});}logCSSEvalTime(){cov_1skb92i4ln().f[16]++;let totalCSSDuration=(cov_1skb92i4ln().s[57]++,0);const cssEvalLogs=(cov_1skb92i4ln().s[58]++,[]);cov_1skb92i4ln().s[59]++;this.trace.filter(event=>{cov_1skb92i4ln().f[17]++;cov_1skb92i4ln().s[60]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1skb92i4ln().f[18]++;cov_1skb92i4ln().s[61]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1skb92i4ln().f[19]++;const url=(cov_1skb92i4ln().s[62]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1skb92i4ln().s[63]++,event.dur/1000);cov_1skb92i4ln().s[64]++;totalCSSDuration+=durationInMs;cov_1skb92i4ln().s[65]++;cssEvalLogs.push({totalDuration:totalCSSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[66]++;utils_1.logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);// log css-parse-time
cov_1skb92i4ln().s[67]++;cssEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[20]++;cov_1skb92i4ln().s[68]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[21]++;cov_1skb92i4ln().s[69]++;this.log(utils_1.logBar(log));});}// tracerbench marker-timings cmd moved here
async markerTimings(traceJSONPath,url){cov_1skb92i4ln().f[22]++;let frame;let startTime=(cov_1skb92i4ln().s[70]++,-1);let rawTraceData=(cov_1skb92i4ln().s[71]++,null);let customTrace;const markerLogs=(cov_1skb92i4ln().s[72]++,[]);cov_1skb92i4ln().s[73]++;if(!url){cov_1skb92i4ln().b[5][0]++;cov_1skb92i4ln().s[74]++;this.error(`Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}else{cov_1skb92i4ln().b[5][1]++;}cov_1skb92i4ln().s[75]++;try{cov_1skb92i4ln().s[76]++;rawTraceData=await fs_extra_1.readJson(path_1.resolve(traceJSONPath));}catch(e){cov_1skb92i4ln().s[77]++;this.error(e);}cov_1skb92i4ln().s[78]++;try{cov_1skb92i4ln().s[79]++;customTrace=utils_1.setTraceEvents(rawTraceData);}catch(e){cov_1skb92i4ln().s[80]++;this.error(e);}cov_1skb92i4ln().s[81]++;if(url.startsWith("http")){cov_1skb92i4ln().b[6][0]++;cov_1skb92i4ln().s[82]++;frame=utils_1.findFrame(customTrace,url);}else{cov_1skb92i4ln().b[6][1]++;cov_1skb92i4ln().s[83]++;frame=url;}cov_1skb92i4ln().s[84]++;if(!frame){cov_1skb92i4ln().b[7][0]++;cov_1skb92i4ln().s[85]++;this.error(`Could not extract frame from trace. Explicitly opt-out of usertimings via "--usertimings" boolean flag and rerun.`);}else{cov_1skb92i4ln().b[7][1]++;}cov_1skb92i4ln().s[86]++;customTrace.filter(event=>{cov_1skb92i4ln().f[23]++;cov_1skb92i4ln().s[87]++;return(cov_1skb92i4ln().b[8][0]++,utils_1.isMark(event))||(cov_1skb92i4ln().b[8][1]++,utils_1.isCommitLoad(event));}).sort(utils_1.byTime).forEach(event=>{cov_1skb92i4ln().f[24]++;cov_1skb92i4ln().s[88]++;if(utils_1.isFrameNavigationStart(frame,event,url)){cov_1skb92i4ln().b[9][0]++;cov_1skb92i4ln().s[89]++;startTime=event.ts;cov_1skb92i4ln().s[90]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[9][1]++;cov_1skb92i4ln().s[91]++;if((cov_1skb92i4ln().b[11][0]++,utils_1.isFrameMark(frame,event))&&(cov_1skb92i4ln().b[11][1]++,event.name!=="navigationStart")){cov_1skb92i4ln().b[10][0]++;cov_1skb92i4ln().s[92]++;if(startTime===-1){cov_1skb92i4ln().b[12][0]++;cov_1skb92i4ln().s[93]++;return;}else{cov_1skb92i4ln().b[12][1]++;}cov_1skb92i4ln().s[94]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[10][1]++;}}});cov_1skb92i4ln().s[95]++;this.logMarkerTimings(markerLogs);}buildMarkerLogs(event,startTime){cov_1skb92i4ln().f[25]++;cov_1skb92i4ln().s[96]++;return{name:event.name,sentanceCaseName:utils_1.convertToSentCase(event.name),duration:utils_1.formatToDuration(event.ts,startTime),startTime,bar:""};}logMarkerTimings(markerLogs){cov_1skb92i4ln().f[26]++;const totalDuration=(cov_1skb92i4ln().s[97]++,markerLogs[markerLogs.length-1].duration);cov_1skb92i4ln().s[98]++;utils_1.logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);cov_1skb92i4ln().s[99]++;markerLogs.forEach(log=>{cov_1skb92i4ln().f[27]++;cov_1skb92i4ln().s[100]++;this.log(utils_1.logBar({totalDuration,duration:log.duration,title:log.sentanceCaseName}));});}}cov_1skb92i4ln().s[101]++;exports.default=Profile;// include backwards compat to trace cmd
cov_1skb92i4ln().s[102]++;Profile.aliases=["trace"];cov_1skb92i4ln().s[103]++;Profile.description=`Parses a CPU profile with asset and marker timings.`;cov_1skb92i4ln().s[104]++;Profile.args=[args_1.harpath];cov_1skb92i4ln().s[105]++;Profile.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true})};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL3Byb2ZpbGUudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9jb21tYW5kcy9wcm9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdURBQXVEO0FBQ3ZELDRDQUEyRDtBQUkzRCx1Q0FBMEU7QUFDMUUsK0JBQStCO0FBQy9CLCtCQUFxQztBQUVyQyxzREFBa0Q7QUFDbEQsMENBQTBDO0FBQzFDLDRDQU0wQjtBQUMxQiw0Q0FhMEI7QUFrQjFCLE1BQXFCLE9BQVEsU0FBUSw4QkFBYTtJQUFsRDs7UUFHUyxVQUFLLEdBQWlCLEVBQUUsQ0FBQztJQW1SbEMsQ0FBQztJQXhRUSxLQUFLLENBQUMsR0FBRztRQUNkLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxNQUFNLEVBQ0osZUFBZSxFQUNmLFdBQVcsRUFDWCxlQUFlLEVBQ2YsT0FBTyxFQUNQLEdBQUcsR0FDSixHQUFHLEtBQUssQ0FBQztRQUNWLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDekIsTUFBTSxPQUFPLEdBQUc7WUFDZDtnQkFDRSxJQUFJLEVBQUUsRUFBRTtnQkFDUixLQUFLLEVBQUUsRUFBRTtnQkFDVCxNQUFNLEVBQUUsRUFBRTtnQkFDVixJQUFJLEVBQUUsRUFBRTthQUNUO1NBQ0YsQ0FBQztRQUNGLE1BQU0sVUFBVSxHQUFnQjtZQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDbkMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNDLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxJ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QUM1QixXQUFXLEVBQUUsbUJBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUM3QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgSUNvbmRpdGlvbnMsIGxpdmVUcmFjZSB9IGZyb20gXCJAdHJhY2VyYmVuY2gvY29yZVwiO1xuaW1wb3J0IHsgQXJjaGl2ZSB9IGZyb20gXCJAdHJhY2VyYmVuY2gvaGFyXCI7XG5pbXBvcnQgeyBUcmFjZUV2ZW50IH0gZnJvbSBcIkB0cmFjZXJiZW5jaC90cmFjZS1ldmVudFwiO1xuaW1wb3J0IFByb3RvY29sIGZyb20gXCJkZXZ0b29scy1wcm90b2NvbFwiO1xuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJTeW5jLCByZWFkSnNvbiwgd3JpdGVGaWxlU3luYyB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0ICogYXMgbGlzdHIgZnJvbSBcImxpc3RyXCI7XG5pbXBvcnQgeyBqb2luLCByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcblxuaW1wb3J0IHsgVEJCYXNlQ29tbWFuZCB9IGZyb20gXCIuLi9jb21tYW5kLWNvbmZpZ1wiO1xuaW1wb3J0IHsgaGFycGF0aCB9IGZyb20gXCIuLi9oZWxwZXJzL2FyZ3NcIjtcbmltcG9ydCB7XG4gIGNvb2tpZXNwYXRoLFxuICBjcHVUaHJvdHRsZVJhdGUsXG4gIG5ldHdvcmssXG4gIHRiUmVzdWx0c0ZvbGRlcixcbiAgdXJsLFxufSBmcm9tIFwiLi4vaGVscGVycy9mbGFnc1wiO1xuaW1wb3J0IHtcbiAgYnlUaW1lLFxuICBjb252ZXJ0VG9TZW50Q2FzZSxcbiAgZmluZEZyYW1lLFxuICBmb3JtYXRUb0R1cmF0aW9uLFxuICBpc0NvbW1pdExvYWQsXG4gIGlzRnJhbWVNYXJrLFxuICBpc0ZyYW1lTmF2aWdhdGlvblN0YXJ0LFxuICBpc01hcmssXG4gIGxvZ0JhcixcbiAgbG9nQmFyT3B0aW9ucyxcbiAgbG9nSGVhZGluZyxcbiAgc2V0VHJhY2VFdmVudHMsXG59IGZyb20gXCIuLi9oZWxwZXJzL3V0aWxzXCI7XG5cbmludGVyZmFjZSBQcm9maWxlQ29udGV4dCB7XG4gIGNvb2tpZXM6IFByb3RvY29sLk5ldHdvcmsuQ29va2llUGFyYW1bXTtcbiAgaGFySlNPTjogQXJjaGl2ZTtcbiAgdHJhY2VKU09OUGF0aDogc3RyaW5nO1xuICB0cmFjZUV2ZW50czogVHJhY2VFdmVudFtdO1xuICB1cmw6IHN0cmluZztcbn1cblxudHlwZSBtYXJrZXJMb2dNZXRhID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNlbnRhbmNlQ2FzZU5hbWU6IHN0cmluZztcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgc3RhcnRUaW1lOiBudW1iZXI7XG4gIGJhcjogc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZmlsZSBleHRlbmRzIFRCQmFzZUNvbW1hbmQge1xuICAvLyBpbmNsdWRlIGJhY2t3YXJkcyBjb21wYXQgdG8gdHJhY2UgY21kXG4gIHN0YXRpYyBhbGlhc2VzID0gW1widHJhY2VcIl07XG4gIHB1YmxpYyB0cmFjZTogVHJhY2VFdmVudFtdID0gW107XG4gIHB1YmxpYyBzdGF0aWMgZGVzY3JpcHRpb24gPSBgUGFyc2VzIGEgQ1BVIHByb2ZpbGUgd2l0aCBhc3NldCBhbmQgbWFya2VyIHRpbWluZ3MuYDtcbiAgcHVibGljIHN0YXRpYyBhcmdzID0gW2hhcnBhdGhdO1xuICBwdWJsaWMgc3RhdGljIGZsYWdzID0ge1xuICAgIGNwdVRocm90dGxlUmF0ZTogY3B1VGhyb3R0bGVSYXRlKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgdGJSZXN1bHRzRm9sZGVyOiB0YlJlc3VsdHNGb2xkZXIoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBuZXR3b3JrOiBuZXR3b3JrKCksXG4gICAgdXJsOiB1cmwoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBjb29raWVzcGF0aDogY29va2llc3BhdGgoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgfTtcblxuICBwdWJsaWMgYXN5bmMgcnVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgZmxhZ3MsIGFyZ3MgfSA9IHRoaXMucGFyc2UoUHJvZmlsZSk7XG4gICAgY29uc3Qge1xuICAgICAgY3B1VGhyb3R0bGVSYXRlLFxuICAgICAgY29va2llc3BhdGgsXG4gICAgICB0YlJlc3VsdHNGb2xkZXIsXG4gICAgICBuZXR3b3JrLFxuICAgICAgdXJsLFxuICAgIH0gPSBmbGFncztcbiAgICBjb25zdCB7IGhhcnBhdGggfSA9IGFyZ3M7XG4gICAgY29uc3QgY29va2llcyA9IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgIGRvbWFpbjogXCJcIixcbiAgICAgICAgcGF0aDogXCJcIixcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb25zdCBjb25kaXRpb25zOiBJQ29uZGl0aW9ucyA9IHtcbiAgICAgIG5ldHdvcms6IG5ldHdvcmsgPyBuZXR3b3JrIDogXCJub25lXCIsXG4gICAgICBjcHU6IGNwdVRocm90dGxlUmF0ZSA/IGNwdVRocm90dGxlUmF0ZSA6IDEsXG4gICAgfTtcblxuICAgIGNvbnN0IHRhc2tzID0gbmV3IGxpc3RyKFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiUmVhZGluZyBjb29raWVzIGpzb25cIixcbiAgICAgICAgdGFzazogYXN5bmMgKGN0eDogUHJvZmlsZUNvbnRleHQpID0+IHtcbiAgICAgICAgICAvLyByZWFkIGNvb2tpZXMganNvbiBmaWxlIGZyb20gcGF0aCBhbmQgc2V0IHRvIGNvbnRleHRcbiAgICAgICAgICBjdHguY29va2llcyA9IGNvb2tpZXNwYXRoLmxlbmd0aFxuICAgICAgICAgICAgPyBhd2FpdCByZWFkSnNvbihyZXNvbHZlKGNvb2tpZXNwYXRoKSlcbiAgICAgICAgICAgIDogY29va2llcztcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIlByZXBhcmluZyByZXN1bHRzIGZvbGRlclwiLFxuICAgICAgICB0YXNrOiAoKSA9PiB7XG4gICAgICAgICAgLy8gaWYgdGhlIGZvbGRlciBmb3IgdGhlIHRyYWNlcmJlbmNoIHJlc3VsdHMgZmlsZVxuICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0IHRoZW4gY3JlYXRlIGl0XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghZXhpc3RzU3luYyh0YlJlc3VsdHNGb2xkZXIpKSB7XG4gICAgICAgICAgICAgIG1rZGlyU3luYyh0YlJlc3VsdHNGb2xkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0aXRsZTogXCJWYWxpZGF0aW5nICYgQ2xvbmluZyBIQVIgZmlsZVwiLFxuICAgICAgICB0YXNrOiBhc3luYyAoY3R4OiBQcm9maWxlQ29udGV4dCkgPT4ge1xuICAgICAgICAgIC8vIHZhbGlkYXRlIGhhciBhbmQgY2xvbmUgaXQgdG8gdHJhY2UuanNvbiB3aGljaCB3aWxsIGJlIG11dGF0ZWRcbiAgICAgICAgICBjdHguaGFySlNPTiA9IGF3YWl0IHJlYWRKc29uKHJlc29sdmUoaGFycGF0aCkpO1xuICAgICAgICAgIGN0eC50cmFjZUpTT05QYXRoID0gam9pbih0YlJlc3VsdHNGb2xkZXIsIFwidHJhY2UuanNvblwiKTtcbiAgICAgICAgICB3cml0ZUZpbGVTeW5jKFxuICAgICAgICAgICAgY3R4LnRyYWNlSlNPTlBhdGgsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjdHguaGFySlNPTiwgbnVsbCwgMilcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIGlmIG5vIHVybCBnZXQgdXJsIGZyb20gaGFyIG90aGVyd2lzZSBzZXQgd2l0aCBjbWQgdXJsXG4gICAgICAgICAgY3R4LnVybCA9IHVybC5sZW5ndGggPyB1cmwgOiBnZXRVUkxGcm9tSEFSKGN0eCk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBnZXRVUkxGcm9tSEFSKGN0eDogUHJvZmlsZUNvbnRleHQpOiBzdHJpbmcge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgdXJsID0gY3R4LmhhckpTT04ubG9nLmVudHJpZXNbMF0ucmVxdWVzdC51cmw7XG4gICAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYCR7ZXJyb3J9LiBDb3VsZCBub3QgZXh0cmFjdCB0aGUgVVJMIGZyb20gdGhlIEhBUi4gRXhwbGljaXRseSBwYXNzIHZpYSBcIi0tdXJsXCIgZmxhZyBhbmQgcmVydW4uYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIlJlY29yZGluZyB0aGUgbGl2ZSB0cmFjZVwiLFxuICAgICAgICB0YXNrOiBhc3luYyAoY3R4OiBQcm9maWxlQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY29va2llcywgdXJsIH0gPSBjdHg7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgbGl2ZVRyYWNlXG4gICAgICAgICAgICBjb25zdCB7IHRyYWNlRXZlbnRzIH0gPSBhd2FpdCBsaXZlVHJhY2UoXG4gICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgdGJSZXN1bHRzRm9sZGVyLFxuICAgICAgICAgICAgICBjb29raWVzLFxuICAgICAgICAgICAgICBjb25kaXRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3R4LnRyYWNlRXZlbnRzID0gdHJhY2VFdmVudHMgYXMgVHJhY2VFdmVudFtdO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGAke2Vycm9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIlNldHRpbmcgdHJhY2UgZXZlbnRzXCIsXG4gICAgICAgIHRhc2s6IGFzeW5jIChjdHg6IFByb2ZpbGVDb250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyB0cmFjZUV2ZW50cyB9ID0gY3R4O1xuICAgICAgICAgIC8vIG11dGF0ZXMgdGhpcy50cmFjZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNlID0gc2V0VHJhY2VFdmVudHModHJhY2VFdmVudHMpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGAke2Vycm9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSk7XG5cbiAgICBhd2FpdCB0YXNrc1xuICAgICAgLnJ1bigpXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IoYCR7ZXJyb3J9YCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAvLyBsb2cganMtZXZhbC10aW1lXG4gICAgICAgIHRoaXMubG9nSlNFdmFsVGltZSgpO1xuICAgICAgICAvLyBsb2cgY3NzLXBhcnNlXG4gICAgICAgIHRoaXMubG9nQ1NTRXZhbFRpbWUoKTtcbiAgICAgICAgLy8gbG9nIHVzZXIgdGltaW5nc1xuICAgICAgICBhd2FpdCB0aGlzLm1hcmtlclRpbWluZ3MoY3R4LnRyYWNlSlNPTlBhdGgsIGN0eC51cmwpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGxvZ0pTRXZhbFRpbWUoKTogdm9pZCB7XG4gICAgbGV0IHRvdGFsSlNEdXJhdGlvbiA9IDA7XG4gICAgY29uc3QganNFdmFsTG9nczogbG9nQmFyT3B0aW9uc1tdID0gW107XG4gICAgdGhpcy50cmFjZVxuICAgICAgLmZpbHRlcigoZXZlbnQ6IFRyYWNlRXZlbnQpID0+IGV2ZW50Lm5hbWUgPT09IFwiRXZhbHVhdGVTY3JpcHRcIilcbiAgICAgIC5maWx0ZXIoKGV2ZW50OiBhbnkpID0+IGV2ZW50LmFyZ3MuZGF0YS51cmwpXG4gICAgICAuZm9yRWFjaCgoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBldmVudC5hcmdzLmRhdGEudXJsO1xuICAgICAgICBjb25zdCBkdXJhdGlvbkluTXMgPSBldmVudC5kdXIgLyAxMDAwO1xuICAgICAgICB0b3RhbEpTRHVyYXRpb24gKz0gZHVyYXRpb25Jbk1zO1xuICAgICAgICBqc0V2YWxMb2dzLnB1c2goe1xuICAgICAgICAgIHRvdGFsRHVyYXRpb246IHRvdGFsSlNEdXJhdGlvbixcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25Jbk1zLFxuICAgICAgICAgIHRpdGxlOiB1cmwsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICBsb2dIZWFkaW5nKGBKUyBFdmFsdWF0aW9uIDo6IFRvdGFsIER1cmF0aW9uICR7dG90YWxKU0R1cmF0aW9ufSBtc2ApO1xuXG4gICAgLy8gbG9nIGpzLWV2YWwtdGltZVxuICAgIGpzRXZhbExvZ3NcbiAgICAgIC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIHJldHVybiBhLmR1cmF0aW9uIC0gYi5kdXJhdGlvbjtcbiAgICAgIH0pXG4gICAgICAuZm9yRWFjaCgobG9nKSA9PiB7XG4gICAgICAgIHRoaXMubG9nKGxvZ0Jhcihsb2cpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2dDU1NFdmFsVGltZSgpOiB2b2lkIHtcbiAgICBsZXQgdG90YWxDU1NEdXJhdGlvbiA9IDA7XG4gICAgY29uc3QgY3NzRXZhbExvZ3M6IGxvZ0Jhck9wdGlvbnNbXSA9IFtdO1xuXG4gICAgdGhpcy50cmFjZVxuICAgICAgLmZpbHRlcigoZXZlbnQ6IFRyYWNlRXZlbnQpID0+IGV2ZW50Lm5hbWUgPT09IFwiUGFyc2VBdXRob3JTdHlsZVNoZWV0XCIpXG4gICAgICAuZmlsdGVyKChldmVudDogYW55KSA9PiBldmVudC5hcmdzLmRhdGEuc3R5bGVTaGVldFVybClcbiAgICAgIC5mb3JFYWNoKChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGV2ZW50LmFyZ3MuZGF0YS5zdHlsZVNoZWV0VXJsO1xuICAgICAgICBjb25zdCBkdXJhdGlvbkluTXMgPSBldmVudC5kdXIgLyAxMDAwO1xuICAgICAgICB0b3RhbENTU0R1cmF0aW9uICs9IGR1cmF0aW9uSW5NcztcbiAgICAgICAgY3NzRXZhbExvZ3MucHVzaCh7XG4gICAgICAgICAgdG90YWxEdXJhdGlvbjogdG90YWxDU1NEdXJhdGlvbixcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25Jbk1zLFxuICAgICAgICAgIHRpdGxlOiB1cmwsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICBsb2dIZWFkaW5nKGBDU1MgRXZhbHVhdGlvbiA6OiBUb3RhbCBEdXJhdGlvbiAke3RvdGFsQ1NTRHVyYXRpb259IG1zYCk7XG5cbiAgICAvLyBsb2cgY3NzLXBhcnNlLXRpbWVcbiAgICBjc3NFdmFsTG9nc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGEuZHVyYXRpb24gLSBiLmR1cmF0aW9uO1xuICAgICAgfSlcbiAgICAgIC5mb3JFYWNoKChsb2cpID0+IHtcbiAgICAgICAgdGhpcy5sb2cobG9nQmFyKGxvZykpO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyB0cmFjZXJiZW5jaCBtYXJrZXItdGltaW5ncyBjbWQgbW92ZWQgaGVyZVxuICBwcml2YXRlIGFzeW5jIG1hcmtlclRpbWluZ3MoXG4gICAgdHJhY2VKU09OUGF0aDogc3RyaW5nLFxuICAgIHVybDogc3RyaW5nXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBmcmFtZTogc3RyaW5nO1xuICAgIGxldCBzdGFydFRpbWUgPSAtMTtcbiAgICBsZXQgcmF3VHJhY2VEYXRhOiBhbnkgPSBudWxsO1xuICAgIGxldCBjdXN0b21UcmFjZTogVHJhY2VFdmVudFtdO1xuICAgIGNvbnN0IG1hcmtlckxvZ3M6IG1hcmtlckxvZ01ldGFbXSA9IFtdO1xuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRoaXMuZXJyb3IoXG4gICAgICAgIGBDb3VsZCBub3QgZXh0cmFjdCB0aGUgVVJMIGZyb20gdGhlIEhBUi4gRXhwbGljaXRseSBwYXNzIHZpYSBcIi0tdXJsXCIgZmxhZyBhbmQgcmVydW4uYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmF3VHJhY2VEYXRhID0gYXdhaXQgcmVhZEpzb24ocmVzb2x2ZSh0cmFjZUpTT05QYXRoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY3VzdG9tVHJhY2UgPSBzZXRUcmFjZUV2ZW50cyhyYXdUcmFjZURhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuZXJyb3IoZSk7XG4gICAgfVxuXG4gICAgaWYgKHVybC5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgZnJhbWUgPSBmaW5kRnJhbWUoY3VzdG9tVHJhY2UsIHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYW1lID0gdXJsO1xuICAgIH1cblxuICAgIGlmICghZnJhbWUpIHtcbiAgICAgIHRoaXMuZXJyb3IoXG4gICAgICAgIGBDb3VsZCBub3QgZXh0cmFjdCBmcmFtZSBmcm9tIHRyYWNlLiBFeHBsaWNpdGx5IG9wdC1vdXQgb2YgdXNlcnRpbWluZ3MgdmlhIFwiLS11c2VydGltaW5nc1wiIGJvb2xlYW4gZmxhZyBhbmQgcmVydW4uYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjdXN0b21UcmFjZVxuICAgICAgLmZpbHRlcigoZXZlbnQ6IFRyYWNlRXZlbnQpID0+IGlzTWFyayhldmVudCkgfHwgaXNDb21taXRMb2FkKGV2ZW50KSlcbiAgICAgIC5zb3J0KGJ5VGltZSlcbiAgICAgIC5mb3JFYWNoKChldmVudDogVHJhY2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAoaXNGcmFtZU5hdmlnYXRpb25TdGFydChmcmFtZSwgZXZlbnQsIHVybCkpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSBldmVudC50cztcbiAgICAgICAgICBtYXJrZXJMb2dzLnB1c2godGhpcy5idWlsZE1hcmtlckxvZ3MoZXZlbnQsIHN0YXJ0VGltZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGlzRnJhbWVNYXJrKGZyYW1lLCBldmVudCkgJiZcbiAgICAgICAgICBldmVudC5uYW1lICE9PSBcIm5hdmlnYXRpb25TdGFydFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChzdGFydFRpbWUgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcmtlckxvZ3MucHVzaCh0aGlzLmJ1aWxkTWFya2VyTG9ncyhldmVudCwgc3RhcnRUaW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgdGhpcy5sb2dNYXJrZXJUaW1pbmdzKG1hcmtlckxvZ3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZE1hcmtlckxvZ3MoZXZlbnQ6IFRyYWNlRXZlbnQsIHN0YXJ0VGltZTogbnVtYmVyKTogbWFya2VyTG9nTWV0YSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGV2ZW50Lm5hbWUsXG4gICAgICBzZW50YW5jZUNhc2VOYW1lOiBjb252ZXJ0VG9TZW50Q2FzZShldmVudC5uYW1lKSxcbiAgICAgIGR1cmF0aW9uOiBmb3JtYXRUb0R1cmF0aW9uKGV2ZW50LnRzLCBzdGFydFRpbWUpLFxuICAgICAgc3RhcnRUaW1lLFxuICAgICAgYmFyOiBcIlwiLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGxvZ01hcmtlclRpbWluZ3MobWFya2VyTG9nczogbWFya2VyTG9nTWV0YVtdKTogdm9pZCB7XG4gICAgY29uc3QgdG90YWxEdXJhdGlvbiA9IG1hcmtlckxvZ3NbbWFya2VyTG9ncy5sZW5ndGggLSAxXS5kdXJhdGlvbjtcblxuICAgIGxvZ0hlYWRpbmcoYE1hcmtlciBUaW1pbmdzIDo6IFRvdGFsIER1cmF0aW9uICR7dG90YWxEdXJhdGlvbn0gbXNgKTtcbiAgICBtYXJrZXJMb2dzLmZvckVhY2goKGxvZykgPT4ge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIGxvZ0Jhcih7XG4gICAgICAgICAgdG90YWxEdXJhdGlvbixcbiAgICAgICAgICBkdXJhdGlvbjogbG9nLmR1cmF0aW9uLFxuICAgICAgICAgIHRpdGxlOiBsb2cuc2VudGFuY2VDYXNlTmFtZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,