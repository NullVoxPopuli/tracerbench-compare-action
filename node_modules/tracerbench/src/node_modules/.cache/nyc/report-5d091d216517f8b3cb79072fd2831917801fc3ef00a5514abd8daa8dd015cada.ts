"use strict";/* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable filenames/match-exported */function cov_12pf4rr1tp(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts";var hash="308335ea589d45bd8e20430a8c640504f077fadd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts",statementMap:{"0":{start:{line:4,column:0},end:{line:4,column:62}},"1":{start:{line:5,column:19},end:{line:5,column:38}},"2":{start:{line:6,column:15},end:{line:6,column:30}},"3":{start:{line:7,column:25},end:{line:7,column:56}},"4":{start:{line:8,column:33},end:{line:8,column:80}},"5":{start:{line:9,column:16},end:{line:9,column:46}},"6":{start:{line:10,column:23},end:{line:10,column:60}},"7":{start:{line:11,column:16},end:{line:11,column:46}},"8":{start:{line:12,column:27},end:{line:12,column:37}},"9":{start:{line:15,column:8},end:{line:15,column:28}},"10":{start:{line:16,column:26},end:{line:16,column:51}},"11":{start:{line:17,column:8},end:{line:17,column:33}},"12":{start:{line:21,column:26},end:{line:21,column:51}},"13":{start:{line:22,column:8},end:{line:22,column:96}},"14":{start:{line:23,column:8},end:{line:23,column:33}},"15":{start:{line:24,column:8},end:{line:24,column:32}},"16":{start:{line:31,column:32},end:{line:31,column:64}},"17":{start:{line:32,column:30},end:{line:32,column:74}},"18":{start:{line:33,column:24},end:{line:33,column:26}},"19":{start:{line:35,column:8},end:{line:37,column:9}},"20":{start:{line:36,column:12},end:{line:36,column:118}},"21":{start:{line:38,column:8},end:{line:43,column:9}},"22":{start:{line:39,column:12},end:{line:39,column:83}},"23":{start:{line:42,column:12},end:{line:42,column:129}},"24":{start:{line:44,column:28},end:{line:46,column:10}},"25":{start:{line:45,column:12},end:{line:45,column:45}},"26":{start:{line:47,column:31},end:{line:49,column:10}},"27":{start:{line:48,column:12},end:{line:48,column:48}},"28":{start:{line:50,column:8},end:{line:54,column:9}},"29":{start:{line:51,column:12},end:{line:53,column:15}},"30":{start:{line:55,column:31},end:{line:55,column:76}},"31":{start:{line:56,column:29},end:{line:56,column:137}},"32":{start:{line:57,column:8},end:{line:59,column:9}},"33":{start:{line:58,column:12},end:{line:58,column:71}},"34":{start:{line:60,column:31},end:{line:60,column:86}},"35":{start:{line:61,column:30},end:{line:61,column:60}},"36":{start:{line:62,column:8},end:{line:62,column:62}},"37":{start:{line:63,column:30},end:{line:63,column:101}},"38":{start:{line:64,column:8},end:{line:64,column:79}},"39":{start:{line:65,column:8},end:{line:70,column:9}},"40":{start:{line:66,column:12},end:{line:66,column:122}},"41":{start:{line:67,column:12},end:{line:67,column:139}},"42":{start:{line:68,column:12},end:{line:68,column:100}},"43":{start:{line:69,column:12},end:{line:69,column:103}},"44":{start:{line:73,column:36},end:{line:73,column:53}},"45":{start:{line:76,column:8},end:{line:78,column:9}},"46":{start:{line:77,column:12},end:{line:77,column:50}},"47":{start:{line:81,column:20},end:{line:81,column:21}},"48":{start:{line:82,column:24},end:{line:82,column:28}},"49":{start:{line:83,column:8},end:{line:90,column:9}},"50":{start:{line:84,column:34},end:{line:84,column:98}},"51":{start:{line:85,column:33},end:{line:85,column:96}},"52":{start:{line:86,column:12},end:{line:88,column:13}},"53":{start:{line:87,column:16},end:{line:87,column:22}},"54":{start:{line:89,column:12},end:{line:89,column:23}},"55":{start:{line:91,column:8},end:{line:91,column:35}},"56":{start:{line:94,column:0},end:{line:94,column:32}},"57":{start:{line:96,column:0},end:{line:96,column:35}},"58":{start:{line:97,column:0},end:{line:97,column:110}},"59":{start:{line:98,column:0},end:{line:103,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:30},end:{line:18,column:5}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:17},end:{line:25,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:16},end:{line:71,column:5}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:44,column:43},end:{line:44,column:44}},loc:{start:{line:44,column:56},end:{line:46,column:9}},line:44},"4":{name:"(anonymous_4)",decl:{start:{line:47,column:46},end:{line:47,column:47}},loc:{start:{line:47,column:59},end:{line:49,column:9}},line:47},"5":{name:"(anonymous_5)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:23},end:{line:79,column:5}},line:72},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:42},end:{line:92,column:5}},line:80}},branchMap:{"0":{loc:{start:{line:35,column:8},end:{line:37,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:37,column:9}},{start:{line:35,column:8},end:{line:37,column:9}}],line:35},"1":{loc:{start:{line:50,column:8},end:{line:54,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:54,column:9}},{start:{line:50,column:8},end:{line:54,column:9}}],line:50},"2":{loc:{start:{line:50,column:12},end:{line:50,column:43}},type:"binary-expr",locations:[{start:{line:50,column:12},end:{line:50,column:24}},{start:{line:50,column:28},end:{line:50,column:43}}],line:50},"3":{loc:{start:{line:57,column:8},end:{line:59,column:9}},type:"if",locations:[{start:{line:57,column:8},end:{line:59,column:9}},{start:{line:57,column:8},end:{line:59,column:9}}],line:57},"4":{loc:{start:{line:65,column:8},end:{line:70,column:9}},type:"if",locations:[{start:{line:65,column:8},end:{line:70,column:9}},{start:{line:65,column:8},end:{line:70,column:9}}],line:65},"5":{loc:{start:{line:76,column:8},end:{line:78,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:78,column:9}},{start:{line:76,column:8},end:{line:78,column:9}}],line:76},"6":{loc:{start:{line:86,column:12},end:{line:88,column:13}},type:"if",locations:[{start:{line:86,column:12},end:{line:88,column:13}},{start:{line:86,column:12},end:{line:88,column:13}}],line:86},"7":{loc:{start:{line:86,column:16},end:{line:86,column:93}},type:"binary-expr",locations:[{start:{line:86,column:16},end:{line:86,column:53}},{start:{line:86,column:57},end:{line:86,column:93}}],line:86}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable filenames/match-exported */\n\nimport { IConfig } from \"@oclif/config\";\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs-extra\";\nimport { join, resolve } from \"path\";\n\nimport { getConfig, TBBaseCommand } from \"../../command-config\";\nimport createConsumableHTML, {\n  ITracerBenchTraceResult,\n} from \"../../helpers/create-consumable-html\";\nimport {\n  config,\n  isCIEnv,\n  plotTitle,\n  tbResultsFolder,\n} from \"../../helpers/flags\";\nimport printToPDF from \"../../helpers/print-to-pdf\";\nimport { chalkScheme } from \"../../helpers/utils\";\n\nconst ARTIFACT_FILE_NAME = \"artifact\";\n\nexport interface IReportFlags {\n  tbResultsFolder: string;\n  config?: string;\n  plotTitle?: string;\n  isCIEnv?: boolean;\n}\n\nexport default class CompareReport extends TBBaseCommand {\n  // alias for API backwards compat\n  static aliases = [\"report\"];\n  public static description = `Generates report files (PDF/HTML) from the \"tracerbench compare\" command output`;\n  public static flags = {\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    config: config(),\n    plotTitle: plotTitle(),\n    isCIEnv: isCIEnv(),\n  };\n  public reportFlags: IReportFlags;\n\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    const { flags } = this.parse(CompareReport);\n\n    this.reportFlags = flags;\n  }\n  // instantiated before this.run()\n  public async init(): Promise<void> {\n    const { flags } = this.parse(CompareReport);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n\n    this.reportFlags = flags;\n    await this.parseFlags();\n  }\n  /**\n   * Ensure the input file is valid and call the helper function \"createConsumableHTML\"\n   * to generate the HTML string for the output file.\n   */\n  public async run(): Promise<void> {\n    const tbResultsFolder = this.reportFlags.tbResultsFolder;\n    const inputFilePath = join(tbResultsFolder, \"compare.json\");\n    let inputData: ITracerBenchTraceResult[] = [];\n    // If the input file cannot be found, exit with an error\n    if (!existsSync(inputFilePath)) {\n      this.error(\n        `The compare.json file does not exist. Please make sure ${inputFilePath} exists`,\n        { exit: 1 }\n      );\n    }\n\n    try {\n      inputData = JSON.parse(readFileSync(inputFilePath, \"utf8\"));\n    } catch (error) {\n      this.error(\n        `Had issues parsing the compare.json file. Please make sure ${inputFilePath} is valid JSON`,\n        { exit: 1 }\n      );\n    }\n\n    const controlData = inputData.find((element) => {\n      return element.set === \"control\";\n    }) as ITracerBenchTraceResult;\n\n    const experimentData = inputData.find((element) => {\n      return element.set === \"experiment\";\n    }) as ITracerBenchTraceResult;\n\n    if (!controlData || !experimentData) {\n      this.error(`Missing control or experiment set in compare.json`, {\n        exit: 1,\n      });\n    }\n\n    const outputFileName = this.determineOutputFileName(tbResultsFolder);\n    const renderedHTML = createConsumableHTML(\n      controlData,\n      experimentData,\n      this.parsedConfig,\n      this.reportFlags.plotTitle\n    );\n    if (!existsSync(tbResultsFolder)) {\n      mkdirSync(tbResultsFolder, { recursive: true });\n    }\n\n    const htmlOutputPath = join(tbResultsFolder, `/${outputFileName}.html`);\n    const absPathToHTML = resolve(htmlOutputPath);\n\n    writeFileSync(absPathToHTML, renderedHTML);\n\n    const absOutputPath = resolve(\n      join(tbResultsFolder + `/${outputFileName}.pdf`)\n    );\n\n    await printToPDF(`file://${absPathToHTML}`, absOutputPath);\n\n    if (!this.parsedConfig.isCIEnv) {\n      this.log(\n        `\\n${chalkScheme.blackBgBlue(\n          `    ${chalkScheme.white(\"Benchmark Reports\")}    `\n        )}`\n      );\n      this.log(\n        `\\nJSON: ${chalkScheme.tbBranding.blue.underline.bold(\n          `${this.parsedConfig.tbResultsFolder}/compare.json`\n        )}`\n      );\n      this.log(\n        `\\nPDF: ${chalkScheme.tbBranding.blue.underline.bold(absOutputPath)}`\n      );\n      this.log(\n        `\\nHTML: ${chalkScheme.tbBranding.blue.underline.bold(absPathToHTML)}\\n`\n      );\n    }\n  }\n\n  private async parseFlags(): Promise<void> {\n    const { tbResultsFolder } = (this.parsedConfig as unknown) as IReportFlags;\n\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    if (!existsSync(tbResultsFolder)) {\n      mkdirSync(tbResultsFolder);\n    }\n  }\n\n  private determineOutputFileName(outputFolder: string): string {\n    let count = 1;\n    const running = true;\n    while (running) {\n      const candidateHTML = join(\n        outputFolder,\n        `${ARTIFACT_FILE_NAME}-${count}.html`\n      );\n      const candidatePDF = join(\n        outputFolder,\n        `${ARTIFACT_FILE_NAME}-${count}.pdf`\n      );\n      if (!existsSync(candidateHTML) && !existsSync(candidatePDF)) {\n        break;\n      }\n      count += 1;\n    }\n    return `artifact-${count}`;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"308335ea589d45bd8e20430a8c640504f077fadd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_12pf4rr1tp=function(){return actualCoverage;};}return actualCoverage;}cov_12pf4rr1tp();cov_12pf4rr1tp().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fs_extra_1=(cov_12pf4rr1tp().s[1]++,require("fs-extra"));const path_1=(cov_12pf4rr1tp().s[2]++,require("path"));const command_config_1=(cov_12pf4rr1tp().s[3]++,require("../../command-config"));const create_consumable_html_1=(cov_12pf4rr1tp().s[4]++,require("../../helpers/create-consumable-html"));const flags_1=(cov_12pf4rr1tp().s[5]++,require("../../helpers/flags"));const print_to_pdf_1=(cov_12pf4rr1tp().s[6]++,require("../../helpers/print-to-pdf"));const utils_1=(cov_12pf4rr1tp().s[7]++,require("../../helpers/utils"));const ARTIFACT_FILE_NAME=(cov_12pf4rr1tp().s[8]++,"artifact");class CompareReport extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_12pf4rr1tp().f[0]++;cov_12pf4rr1tp().s[9]++;super(argv,config);const{flags}=(cov_12pf4rr1tp().s[10]++,this.parse(CompareReport));cov_12pf4rr1tp().s[11]++;this.reportFlags=flags;}// instantiated before this.run()
async init(){cov_12pf4rr1tp().f[1]++;const{flags}=(cov_12pf4rr1tp().s[12]++,this.parse(CompareReport));cov_12pf4rr1tp().s[13]++;this.parsedConfig=command_config_1.getConfig(flags.config,flags,this.explicitFlags);cov_12pf4rr1tp().s[14]++;this.reportFlags=flags;cov_12pf4rr1tp().s[15]++;await this.parseFlags();}/**
     * Ensure the input file is valid and call the helper function "createConsumableHTML"
     * to generate the HTML string for the output file.
     */async run(){cov_12pf4rr1tp().f[2]++;const tbResultsFolder=(cov_12pf4rr1tp().s[16]++,this.reportFlags.tbResultsFolder);const inputFilePath=(cov_12pf4rr1tp().s[17]++,path_1.join(tbResultsFolder,"compare.json"));let inputData=(cov_12pf4rr1tp().s[18]++,[]);// If the input file cannot be found, exit with an error
cov_12pf4rr1tp().s[19]++;if(!fs_extra_1.existsSync(inputFilePath)){cov_12pf4rr1tp().b[0][0]++;cov_12pf4rr1tp().s[20]++;this.error(`The compare.json file does not exist. Please make sure ${inputFilePath} exists`,{exit:1});}else{cov_12pf4rr1tp().b[0][1]++;}cov_12pf4rr1tp().s[21]++;try{cov_12pf4rr1tp().s[22]++;inputData=JSON.parse(fs_extra_1.readFileSync(inputFilePath,"utf8"));}catch(error){cov_12pf4rr1tp().s[23]++;this.error(`Had issues parsing the compare.json file. Please make sure ${inputFilePath} is valid JSON`,{exit:1});}const controlData=(cov_12pf4rr1tp().s[24]++,inputData.find(element=>{cov_12pf4rr1tp().f[3]++;cov_12pf4rr1tp().s[25]++;return element.set==="control";}));const experimentData=(cov_12pf4rr1tp().s[26]++,inputData.find(element=>{cov_12pf4rr1tp().f[4]++;cov_12pf4rr1tp().s[27]++;return element.set==="experiment";}));cov_12pf4rr1tp().s[28]++;if((cov_12pf4rr1tp().b[2][0]++,!controlData)||(cov_12pf4rr1tp().b[2][1]++,!experimentData)){cov_12pf4rr1tp().b[1][0]++;cov_12pf4rr1tp().s[29]++;this.error(`Missing control or experiment set in compare.json`,{exit:1});}else{cov_12pf4rr1tp().b[1][1]++;}const outputFileName=(cov_12pf4rr1tp().s[30]++,this.determineOutputFileName(tbResultsFolder));const renderedHTML=(cov_12pf4rr1tp().s[31]++,create_consumable_html_1.default(controlData,experimentData,this.parsedConfig,this.reportFlags.plotTitle));cov_12pf4rr1tp().s[32]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_12pf4rr1tp().b[3][0]++;cov_12pf4rr1tp().s[33]++;fs_extra_1.mkdirSync(tbResultsFolder,{recursive:true});}else{cov_12pf4rr1tp().b[3][1]++;}const htmlOutputPath=(cov_12pf4rr1tp().s[34]++,path_1.join(tbResultsFolder,`/${outputFileName}.html`));const absPathToHTML=(cov_12pf4rr1tp().s[35]++,path_1.resolve(htmlOutputPath));cov_12pf4rr1tp().s[36]++;fs_extra_1.writeFileSync(absPathToHTML,renderedHTML);const absOutputPath=(cov_12pf4rr1tp().s[37]++,path_1.resolve(path_1.join(tbResultsFolder+`/${outputFileName}.pdf`)));cov_12pf4rr1tp().s[38]++;await print_to_pdf_1.default(`file://${absPathToHTML}`,absOutputPath);cov_12pf4rr1tp().s[39]++;if(!this.parsedConfig.isCIEnv){cov_12pf4rr1tp().b[4][0]++;cov_12pf4rr1tp().s[40]++;this.log(`\n${utils_1.chalkScheme.blackBgBlue(`    ${utils_1.chalkScheme.white("Benchmark Reports")}    `)}`);cov_12pf4rr1tp().s[41]++;this.log(`\nJSON: ${utils_1.chalkScheme.tbBranding.blue.underline.bold(`${this.parsedConfig.tbResultsFolder}/compare.json`)}`);cov_12pf4rr1tp().s[42]++;this.log(`\nPDF: ${utils_1.chalkScheme.tbBranding.blue.underline.bold(absOutputPath)}`);cov_12pf4rr1tp().s[43]++;this.log(`\nHTML: ${utils_1.chalkScheme.tbBranding.blue.underline.bold(absPathToHTML)}\n`);}else{cov_12pf4rr1tp().b[4][1]++;}}async parseFlags(){cov_12pf4rr1tp().f[5]++;const{tbResultsFolder}=(cov_12pf4rr1tp().s[44]++,this.parsedConfig);// if the folder for the tracerbench results file
// does not exist then create it
cov_12pf4rr1tp().s[45]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_12pf4rr1tp().b[5][0]++;cov_12pf4rr1tp().s[46]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_12pf4rr1tp().b[5][1]++;}}determineOutputFileName(outputFolder){cov_12pf4rr1tp().f[6]++;let count=(cov_12pf4rr1tp().s[47]++,1);const running=(cov_12pf4rr1tp().s[48]++,true);cov_12pf4rr1tp().s[49]++;while(running){const candidateHTML=(cov_12pf4rr1tp().s[50]++,path_1.join(outputFolder,`${ARTIFACT_FILE_NAME}-${count}.html`));const candidatePDF=(cov_12pf4rr1tp().s[51]++,path_1.join(outputFolder,`${ARTIFACT_FILE_NAME}-${count}.pdf`));cov_12pf4rr1tp().s[52]++;if((cov_12pf4rr1tp().b[7][0]++,!fs_extra_1.existsSync(candidateHTML))&&(cov_12pf4rr1tp().b[7][1]++,!fs_extra_1.existsSync(candidatePDF))){cov_12pf4rr1tp().b[6][0]++;cov_12pf4rr1tp().s[53]++;break;}else{cov_12pf4rr1tp().b[6][1]++;}cov_12pf4rr1tp().s[54]++;count+=1;}cov_12pf4rr1tp().s[55]++;return`artifact-${count}`;}}cov_12pf4rr1tp().s[56]++;exports.default=CompareReport;// alias for API backwards compat
cov_12pf4rr1tp().s[57]++;CompareReport.aliases=["report"];cov_12pf4rr1tp().s[58]++;CompareReport.description=`Generates report files (PDF/HTML) from the "tracerbench compare" command output`;cov_12pf4rr1tp().s[59]++;CompareReport.flags={tbResultsFolder:flags_1.tbResultsFolder({required:true}),config:flags_1.config(),plotTitle:flags_1.plotTitle(),isCIEnv:flags_1.isCIEnv()};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,