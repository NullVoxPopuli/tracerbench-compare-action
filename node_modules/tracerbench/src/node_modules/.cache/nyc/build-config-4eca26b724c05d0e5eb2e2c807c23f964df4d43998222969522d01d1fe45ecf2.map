{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { OutputFlags } from \"@oclif/parser\";\nimport * as fs from \"fs-extra\";\nimport * as JSON5 from \"json5\";\nimport * as path from \"path\";\n\nimport { mergeLeft } from \"../helpers/utils\";\nimport { getDefaultValue } from \"./default-flag-args\";\nimport { EXTENDS, ITBConfig } from \"./tb-config\";\n\nconst configFileKeys = [\n  \"extends\",\n  \"tbResultsFolder\",\n  \"inputFilePath\",\n  \"outputFilePath\",\n] as const;\n\nconst serverFileKeys = [\"har\", \"dist\"] as const;\n\n// STEP 1\n// takes a command flags object with all the flags the command accepts\n// runs that commands object thru the defaults and returns those values\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getCommandDefaults(flags: OutputFlags<any>): OutputFlags<any> {\n  const f = flags;\n  Object.entries(f).forEach(([key]) => {\n    f[key] = getDefaultValue(key) || flags[key];\n  });\n\n  // this will return a bunch of flags that don't have values\n  // and wont know which are required or not\n  return f;\n}\n\n/**\n * Read config file, expanding relative paths to absolute and\n * recursively reading extends\n * @param fileOrDir config file path or directory with a tbconfig.json\n */\nexport function readConfig(fileOrDir = \"tbconfig.json\"): ITBConfig | undefined {\n  let configDir: string;\n  let configFile: string;\n  let config: ITBConfig;\n  try {\n    [configDir, configFile] = resolveConfigFile(fileOrDir);\n    config = JSON5.parse(fs.readFileSync(configFile, \"utf8\"));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return;\n    }\n    throw e;\n  }\n  resolveConfigFileKeys(config, configDir);\n  // extends is already absolute here from the above\n  const parentConfigFile = config[EXTENDS];\n  if (parentConfigFile) {\n    const parent = readConfig(parentConfigFile);\n    if (parent === undefined) {\n      throw new Error(`Extended config missing referenced in ${configFile}`);\n    }\n    const merged = mergeLeft(parent, config);\n    delete merged[EXTENDS];\n    return merged;\n  }\n  return config;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction resolveConfigFileKeys(config: ITBConfig, configDir = process.cwd()) {\n  resolveFileKeys(config, configFileKeys, configDir);\n  if (Array.isArray(config.servers)) {\n    for (const server of config.servers) {\n      resolveFileKeys(server, serverFileKeys, configDir);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction resolveFileKeys<K extends string>(\n  config: { [P in K]?: string },\n  keys: readonly K[],\n  configDir: string\n) {\n  for (const key of keys) {\n    const value = config[key];\n    if (typeof value === \"string\") {\n      config[key] = path.resolve(configDir, value);\n    }\n  }\n}\n\nfunction resolveConfigFile(fileOrDir: string): [string, string] {\n  const resolved = path.resolve(fileOrDir);\n  const stats = fs.statSync(resolved);\n  let dir: string;\n  let file: string;\n  if (stats.isDirectory()) {\n    dir = resolved;\n    file = path.join(dir, \"tbconfig.json\");\n  } else {\n    dir = path.dirname(resolved);\n    file = resolved;\n  }\n  return [dir, file];\n}\n\n// overwrite all flags explicity flagged within cli command\nfunction handleExplicitFlags(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  flags: OutputFlags<any>,\n  explicitFlags: string[]\n): {} {\n  const obj: Record<string, unknown> = {};\n  const f = flags;\n\n  explicitFlags.forEach((exF) => {\n    if (exF.startsWith(\"--\") && !exF.includes(\"config\")) {\n      exF = exF.substring(2);\n      obj[exF] = f[exF];\n    }\n  });\n\n  return obj as {};\n}\n\n/**\n * Executes the pemberly-tracerbench serve:compare command with terminal stdout summary\n * @param configFileOrDir - path to a tbconfig.json file (configuration file)\n * @param flags - relative subset of flags for a given command\n * @param explicitFlags - overwriting flags coming from the CLI session directly eg. --headless, --url etc.\n */\nexport function getConfig(\n  configFileOrDir = \"tbconfig.json\",\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  flags: OutputFlags<any>,\n  explicitFlags: string[]\n): ITBConfig {\n  const ef = handleExplicitFlags(flags, explicitFlags);\n  resolveConfigFileKeys(ef);\n  const commandDefaults = getCommandDefaults(flags);\n  resolveConfigFileKeys(commandDefaults);\n\n  const config = readConfig(configFileOrDir);\n  if (config === undefined) {\n    return mergeLeft(commandDefaults, ef);\n  }\n\n  return mergeLeft(mergeLeft(commandDefaults, config), ef);\n}\n"]}