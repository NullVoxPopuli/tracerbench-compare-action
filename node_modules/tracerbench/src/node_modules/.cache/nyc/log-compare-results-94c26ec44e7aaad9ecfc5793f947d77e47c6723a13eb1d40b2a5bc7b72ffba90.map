{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from \"@oclif/command\";\nimport { ISevenFigureSummary, Stats } from \"@tracerbench/stats\";\nimport * as chalk from \"chalk\";\n\nimport { fidelityLookup } from \"../command-config\";\nimport { ICompareFlags } from \"../commands/compare\";\nimport {\n  bucketPhaseValues,\n  formatPhaseData,\n  HTMLSectionRenderData,\n  ITracerBenchTraceResult,\n  PAGE_LOAD_TIME,\n} from \"./create-consumable-html\";\nimport TBTable from \"./tb-table\";\nimport { chalkScheme } from \"./utils\";\n\nexport interface ICompareJSONResult {\n  heading: string;\n  phaseName: string;\n  isSignificant: boolean;\n  estimatorDelta: string;\n  controlSampleCount: number;\n  experimentSampleCount: number;\n  confidenceInterval: string[];\n  controlSevenFigureSummary: ISevenFigureSummary;\n  experimentSevenFigureSummary: ISevenFigureSummary;\n}\n\nexport interface ICompareJSONResults {\n  benchmarkTableData: ICompareJSONResult[];\n  phaseTableData: ICompareJSONResult[];\n  areResultsSignificant: boolean;\n  isBelowRegressionThreshold: boolean;\n}\n\n/**\n * If fidelity is at acceptable number, return true if any of the phase results were significant\n *\n * @param fidelity - Use this to determine if the sample count is too low\n * @param benchmarkIsSigArray - Array of strings of either \"Yes\" or \"No\" from TBTable\n * @param phaseIsSigArray - Array of strings of either \"Yes\" or \"No\" from TBTable\n */\nexport function anyResultsSignificant(\n  fidelity: number,\n  benchmarkIsSigArray: boolean[],\n  phaseIsSigArray: boolean[]\n): boolean {\n  // if fidelity !== 'test'\n  if (fidelity > fidelityLookup.test) {\n    return benchmarkIsSigArray.includes(true) || phaseIsSigArray.includes(true);\n  }\n  return false;\n}\n\n/**\n * If any phase of the experiment has regressed slower beyond the threshold limit returns false; otherwise true\n *\n * @param regressionThreshold - Positive number in milliseconds the experiment has regressed slower eg 100\n * @param benchmarkTableEstimatorDeltas - Array of Estimator Deltas for the Benchmark Table\n * @param phaseTableEstimatorDeltas - Array of Estimator Deltas for the Phase Table\n */\nexport function allBelowRegressionThreshold(\n  regressionThreshold: number | undefined,\n  benchmarkTableEstimatorDeltas: number[],\n  phaseTableEstimatorDeltas: number[]\n): boolean {\n  function isBelowThreshold(n: number): boolean {\n    const limit = regressionThreshold as number;\n    // if the delta is a negative number and abs(delta) greater than threshold return false\n    return n < 0 && Math.abs(n) > limit ? false : true;\n  }\n\n  if (typeof regressionThreshold === \"number\") {\n    // concat estimator deltas from all phases\n    const deltas: number[] = benchmarkTableEstimatorDeltas.concat(\n      phaseTableEstimatorDeltas\n    );\n    // if the experiment is slower beyond the threshold return false;\n    return deltas.every(isBelowThreshold);\n  }\n  return true;\n}\n\n/**\n * Output meta data about the benchmark run and FYI messages to the user.\n *\n * @param cli - This is expected to be a \"compare\" Command instance\n * @param cliFlags - This is expected to be CLI flags from the \"compare\" command\n * @param isBelowRegressionThreshold - Boolean indicating if there were any deltas below \"regressionThreshold\" flag\n */\nexport function outputRunMetaMessagesAndWarnings(\n  cli: Command,\n  cliFlags: Partial<ICompareFlags>,\n  isBelowRegressionThreshold: boolean\n): void {\n  const { fidelity, regressionThreshold } = cliFlags;\n  const LOW_FIDELITY_WARNING =\n    'The fidelity setting was set below the recommended for a viable result. Rerun TracerBench with at least \"fidelity=low\"';\n\n  if ((fidelity as number) < 10) {\n    cli.log(\n      `\\n${chalkScheme.blackBgYellow(\n        `    ${chalkScheme.white(\"WARNING\")}    `\n      )} ${chalkScheme.warning(` ${LOW_FIDELITY_WARNING}`)}\\n`\n    );\n  }\n\n  if (!isBelowRegressionThreshold) {\n    cli.log(\n      `\\n${chalkScheme.blackBgRed(\n        `    ${chalkScheme.white(\"!! ALERT\")}    `\n      )} ${chalk.red(\n        ` Regression found exceeding the set regression threshold of ${regressionThreshold}ms`\n      )}\\n`\n    );\n  }\n\n  return;\n}\n\n/**\n * Generate the summary section for the results.\n *\n * For each phase, color the significance appropriately by the HL estimated difference. Red for regression, green for\n * improvement. Color with monotone if not significant.\n *\n * @param cli - This is expected to be a \"compare\" Command instance\n * @param phaseResultsFormatted - Array of results from calling formatPhaseData\n */\nexport function outputSummaryReport(\n  cli: Command,\n  phaseResultsFormatted: Array<\n    Pick<\n      HTMLSectionRenderData,\n      \"phase\" | \"hlDiff\" | \"isSignificant\" | \"ciMin\" | \"ciMax\"\n    >\n  >\n): void {\n  cli.log(\n    `\\n${chalkScheme.blackBgBlue(\n      `    ${chalkScheme.white(\"Benchmark Results Summary\")}    `\n    )}`\n  );\n\n  cli.log(`\\n${chalk.red(\"Red\")} color means there was a regression.`);\n  cli.log(`${chalk.green(\"Green\")} color means there was an improvement.\\n`);\n  phaseResultsFormatted.forEach((phaseData) => {\n    const { phase, hlDiff, isSignificant, ciMin, ciMax } = phaseData;\n    let msg = `${chalk.bold(phase)} phase `;\n\n    if (isSignificant && Math.abs(hlDiff)) {\n      let coloredDiff;\n\n      msg += \"estimated difference \";\n\n      if (hlDiff < 0) {\n        coloredDiff = chalk.red(\n          `+${Math.abs(hlDiff)}ms [${ciMax * -1}ms to ${ciMin * -1}ms]`\n        );\n      } else {\n        coloredDiff = chalk.green(\n          `-${Math.abs(hlDiff)}ms [${ciMax * -1}ms to ${ciMin * -1}ms]`\n        );\n      }\n\n      msg += `${coloredDiff}`;\n    } else {\n      msg += `${chalk.grey(\"no difference\")}`;\n    }\n    cli.log(msg);\n  });\n\n  return;\n}\n\n/**\n * Return the trimmed compare results in JSON format\n *\n * This is propogated as the default return all the way up to the Compare command directly\n * without the need for the legacy --json flag\n *\n * @param benchmarkTableData - ICompareJSONResult[] from instantiated TBTable#getData() for the top level duration\n * @param phaseTableData - ICompareJSONResult[] from instantiated TBTable#getData() for all sub phases of the top level duration\n * @param areResultsSignificant - A culled boolean if any results are significant this is truthy\n * @param isBelowRegressionThreshold - A culled boolean to check if all results are below the config regression threshold\n * @return jsonResults - A JSON.stringified return of the trimmed compare results\n */\nexport function outputJSONResults(\n  benchmarkTableData: ICompareJSONResult[],\n  phaseTableData: ICompareJSONResult[],\n  areResultsSignificant: boolean,\n  isBelowRegressionThreshold: boolean\n): string {\n  const jsonResults: ICompareJSONResults = {\n    benchmarkTableData,\n    phaseTableData,\n    areResultsSignificant,\n    isBelowRegressionThreshold,\n  };\n  return JSON.stringify(jsonResults);\n}\n\n/**\n * Collect and analyze the data for the different phases for the experiment and control set and output the result to the console.\n *\n * @param results - This is expected to be generated from tracerbench core's runner. Containing the dataset for experiment and control\n * @param flags - This is expected to be CLI flags from the \"compare\" command\n * @param cli - This is expected to be a \"compare\" Command instance\n */\nexport async function logCompareResults(\n  results: ITracerBenchTraceResult[],\n  flags: Pick<ICompareFlags, \"fidelity\" | \"regressionThreshold\" | \"isCIEnv\">,\n  cli: Command\n): Promise<string> {\n  const { fidelity } = flags;\n  const benchmarkTable = new TBTable(\"Initial Render\");\n  const phaseTable = new TBTable(\"Sub Phase of Duration\");\n\n  const controlData = results.find((element) => {\n    return element.set === \"control\";\n  }) as ITracerBenchTraceResult;\n\n  const experimentData = results.find((element) => {\n    return element.set === \"experiment\";\n  }) as ITracerBenchTraceResult;\n\n  const valuesByPhaseControl = bucketPhaseValues(controlData.samples);\n  const valuesByPhaseExperiment = bucketPhaseValues(experimentData.samples);\n\n  const subPhases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n  const phaseResultsFormatted: Array<Pick<\n    HTMLSectionRenderData,\n    \"phase\" | \"hlDiff\" | \"isSignificant\" | \"ciMin\" | \"ciMax\"\n  >> = [];\n\n  const durationStats = new Stats({\n    control: valuesByPhaseControl.duration,\n    experiment: valuesByPhaseExperiment.duration,\n    name: \"duration\",\n  });\n  benchmarkTable.display.push(durationStats);\n  phaseResultsFormatted.push(\n    formatPhaseData(\n      valuesByPhaseControl[PAGE_LOAD_TIME],\n      valuesByPhaseExperiment[PAGE_LOAD_TIME],\n      PAGE_LOAD_TIME\n    )\n  );\n\n  subPhases.forEach((phase) => {\n    phaseTable.display.push(\n      new Stats({\n        control: valuesByPhaseControl[phase],\n        experiment: valuesByPhaseExperiment[phase],\n        name: phase,\n      })\n    );\n    phaseResultsFormatted.push(\n      formatPhaseData(\n        valuesByPhaseControl[phase],\n        valuesByPhaseExperiment[phase],\n        phase\n      )\n    );\n  });\n\n  let isBelowRegressionThreshold = true;\n  const benchmarkTableData = benchmarkTable.getData();\n  const phaseTableData = phaseTable.getData();\n  const areResultsSignificant = anyResultsSignificant(\n    fidelity as number,\n    benchmarkTable.isSigArray,\n    phaseTable.isSigArray\n  );\n  if (areResultsSignificant) {\n    isBelowRegressionThreshold = allBelowRegressionThreshold(\n      fidelity as number,\n      benchmarkTable.estimatorDeltas,\n      phaseTable.estimatorDeltas\n    );\n  }\n\n  // only log the tables when NOT in a CI env\n  if (!flags.isCIEnv) {\n    cli.log(`\\n\\n${benchmarkTable.render()}`);\n    cli.log(`\\n\\n${phaseTable.render()}`);\n  }\n\n  outputRunMetaMessagesAndWarnings(cli, flags, isBelowRegressionThreshold);\n  outputSummaryReport(cli, phaseResultsFormatted);\n\n  return outputJSONResults(\n    benchmarkTableData,\n    phaseTableData,\n    areResultsSignificant,\n    isBelowRegressionThreshold\n  );\n}\n"]}