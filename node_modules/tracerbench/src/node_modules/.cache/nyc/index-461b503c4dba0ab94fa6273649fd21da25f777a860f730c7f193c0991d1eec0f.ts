"use strict";/* eslint-disable @typescript-eslint/no-explicit-any */function cov_1q73d7sky0(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts";var hash="46f6df9bba0df1c9a4c362b00c7504320719fc36";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:11},end:{line:5,column:30}},"3":{start:{line:6,column:13},end:{line:6,column:28}},"4":{start:{line:7,column:25},end:{line:7,column:56}},"5":{start:{line:8,column:28},end:{line:8,column:77}},"6":{start:{line:9,column:20},end:{line:9,column:61}},"7":{start:{line:10,column:26},end:{line:10,column:66}},"8":{start:{line:11,column:16},end:{line:11,column:46}},"9":{start:{line:12,column:16},end:{line:12,column:46}},"10":{start:{line:13,column:17},end:{line:13,column:37}},"11":{start:{line:14,column:18},end:{line:14,column:38}},"12":{start:{line:16,column:17},end:{line:16,column:36}},"13":{start:{line:19,column:8},end:{line:19,column:28}},"14":{start:{line:20,column:8},end:{line:20,column:64}},"15":{start:{line:21,column:8},end:{line:21,column:37}},"16":{start:{line:22,column:26},end:{line:22,column:45}},"17":{start:{line:23,column:8},end:{line:23,column:34}},"18":{start:{line:24,column:8},end:{line:24,column:34}},"19":{start:{line:28,column:26},end:{line:28,column:45}},"20":{start:{line:29,column:8},end:{line:29,column:96}},"21":{start:{line:30,column:8},end:{line:30,column:34}},"22":{start:{line:31,column:8},end:{line:31,column:32}},"23":{start:{line:34,column:33},end:{line:34,column:50}},"24":{start:{line:35,column:55},end:{line:35,column:99}},"25":{start:{line:37,column:8},end:{line:43,column:9}},"26":{start:{line:38,column:12},end:{line:42,column:15}},"27":{start:{line:39,column:16},end:{line:41,column:17}},"28":{start:{line:40,column:20},end:{line:40,column:65}},"29":{start:{line:44,column:27},end:{line:47,column:9}},"30":{start:{line:48,column:23},end:{line:48,column:85}},"31":{start:{line:49,column:8},end:{line:101,column:11}},"32":{start:{line:52,column:12},end:{line:54,column:13}},"33":{start:{line:53,column:16},end:{line:53,column:157}},"34":{start:{line:55,column:35},end:{line:55,column:86}},"35":{start:{line:56,column:12},end:{line:56,column:79}},"36":{start:{line:57,column:30},end:{line:57,column:75}},"37":{start:{line:58,column:30},end:{line:58,column:101}},"38":{start:{line:59,column:28},end:{line:61,column:14}},"39":{start:{line:62,column:12},end:{line:62,column:51}},"40":{start:{line:63,column:12},end:{line:63,column:36}},"41":{start:{line:64,column:12},end:{line:64,column:31}},"42":{start:{line:66,column:28},end:{line:66,column:172}},"43":{start:{line:67,column:12},end:{line:67,column:37}},"44":{start:{line:68,column:12},end:{line:81,column:13}},"45":{start:{line:69,column:16},end:{line:79,column:19}},"46":{start:{line:80,column:16},end:{line:80,column:110}},"47":{start:{line:83,column:12},end:{line:90,column:13}},"48":{start:{line:84,column:16},end:{line:89,column:19}},"49":{start:{line:93,column:12},end:{line:97,column:13}},"50":{start:{line:94,column:16},end:{line:94,column:159}},"51":{start:{line:95,column:16},end:{line:95,column:165}},"52":{start:{line:96,column:16},end:{line:96,column:160}},"53":{start:{line:100,column:12},end:{line:100,column:28}},"54":{start:{line:102,column:8},end:{line:102,column:39}},"55":{start:{line:105,column:114},end:{line:105,column:131}},"56":{start:{line:110,column:8},end:{line:112,column:9}},"57":{start:{line:111,column:12},end:{line:111,column:100}},"58":{start:{line:113,column:8},end:{line:115,column:9}},"59":{start:{line:114,column:12},end:{line:114,column:70}},"60":{start:{line:116,column:8},end:{line:118,column:9}},"61":{start:{line:117,column:12},end:{line:117,column:86}},"62":{start:{line:119,column:8},end:{line:121,column:9}},"63":{start:{line:120,column:12},end:{line:120,column:92}},"64":{start:{line:122,column:8},end:{line:124,column:9}},"65":{start:{line:123,column:12},end:{line:123,column:95}},"66":{start:{line:126,column:8},end:{line:128,column:9}},"67":{start:{line:127,column:12},end:{line:127,column:116}},"68":{start:{line:131,column:8},end:{line:131,column:60}},"69":{start:{line:147,column:22},end:{line:147,column:25}},"70":{start:{line:148,column:31},end:{line:150,column:9}},"71":{start:{line:151,column:34},end:{line:153,column:9}},"72":{start:{line:155,column:8},end:{line:158,column:9}},"73":{start:{line:156,column:12},end:{line:156,column:163}},"74":{start:{line:157,column:12},end:{line:157,column:169}},"75":{start:{line:159,column:31},end:{line:159,column:159}},"76":{start:{line:160,column:37},end:{line:160,column:171}},"77":{start:{line:161,column:48},end:{line:161,column:193}},"78":{start:{line:162,column:34},end:{line:162,column:165}},"79":{start:{line:163,column:40},end:{line:163,column:177}},"80":{start:{line:164,column:51},end:{line:164,column:199}},"81":{start:{line:165,column:32},end:{line:180,column:9}},"82":{start:{line:178,column:31},end:{line:178,column:93}},"83":{start:{line:181,column:35},end:{line:197,column:9}},"84":{start:{line:194,column:31},end:{line:194,column:96}},"85":{start:{line:198,column:8},end:{line:198,column:53}},"86":{start:{line:201,column:0},end:{line:201,column:26}},"87":{start:{line:202,column:0},end:{line:202,column:88}},"88":{start:{line:203,column:0},end:{line:227,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:30},end:{line:25,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:17},end:{line:32,column:5}},line:27},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:16},end:{line:103,column:5}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:38,column:54},end:{line:38,column:55}},loc:{start:{line:38,column:72},end:{line:42,column:13}},line:38},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:18},end:{line:51,column:19}},loc:{start:{line:51,column:37},end:{line:98,column:9}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:99,column:19},end:{line:99,column:20}},loc:{start:{line:99,column:28},end:{line:101,column:9}},line:99},"6":{name:"(anonymous_6)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:23},end:{line:132,column:5}},line:104},"7":{name:"(anonymous_7)",decl:{start:{line:144,column:4},end:{line:144,column:5}},loc:{start:{line:144,column:44},end:{line:199,column:5}},line:144},"8":{name:"(anonymous_8)",decl:{start:{line:178,column:24},end:{line:178,column:25}},loc:{start:{line:178,column:31},end:{line:178,column:93}},line:178},"9":{name:"(anonymous_9)",decl:{start:{line:194,column:24},end:{line:194,column:25}},loc:{start:{line:194,column:31},end:{line:194,column:96}},line:194}},branchMap:{"0":{loc:{start:{line:37,column:8},end:{line:43,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:43,column:9}},{start:{line:37,column:8},end:{line:43,column:9}}],line:37},"1":{loc:{start:{line:39,column:16},end:{line:41,column:17}},type:"if",locations:[{start:{line:39,column:16},end:{line:41,column:17}},{start:{line:39,column:16},end:{line:41,column:17}}],line:39},"2":{loc:{start:{line:52,column:12},end:{line:54,column:13}},type:"if",locations:[{start:{line:52,column:12},end:{line:54,column:13}},{start:{line:52,column:12},end:{line:54,column:13}}],line:52},"3":{loc:{start:{line:68,column:12},end:{line:81,column:13}},type:"if",locations:[{start:{line:68,column:12},end:{line:81,column:13}},{start:{line:68,column:12},end:{line:81,column:13}}],line:68},"4":{loc:{start:{line:83,column:12},end:{line:90,column:13}},type:"if",locations:[{start:{line:83,column:12},end:{line:90,column:13}},{start:{line:83,column:12},end:{line:90,column:13}}],line:83},"5":{loc:{start:{line:93,column:12},end:{line:97,column:13}},type:"if",locations:[{start:{line:93,column:12},end:{line:97,column:13}},{start:{line:93,column:12},end:{line:97,column:13}}],line:93},"6":{loc:{start:{line:110,column:8},end:{line:112,column:9}},type:"if",locations:[{start:{line:110,column:8},end:{line:112,column:9}},{start:{line:110,column:8},end:{line:112,column:9}}],line:110},"7":{loc:{start:{line:113,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:113,column:8},end:{line:115,column:9}},{start:{line:113,column:8},end:{line:115,column:9}}],line:113},"8":{loc:{start:{line:116,column:8},end:{line:118,column:9}},type:"if",locations:[{start:{line:116,column:8},end:{line:118,column:9}},{start:{line:116,column:8},end:{line:118,column:9}}],line:116},"9":{loc:{start:{line:119,column:8},end:{line:121,column:9}},type:"if",locations:[{start:{line:119,column:8},end:{line:121,column:9}},{start:{line:119,column:8},end:{line:121,column:9}}],line:119},"10":{loc:{start:{line:122,column:8},end:{line:124,column:9}},type:"if",locations:[{start:{line:122,column:8},end:{line:124,column:9}},{start:{line:122,column:8},end:{line:124,column:9}}],line:122},"11":{loc:{start:{line:126,column:8},end:{line:128,column:9}},type:"if",locations:[{start:{line:126,column:8},end:{line:128,column:9}},{start:{line:126,column:8},end:{line:128,column:9}}],line:126},"12":{loc:{start:{line:155,column:8},end:{line:158,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:158,column:9}},{start:{line:155,column:8},end:{line:158,column:9}}],line:155},"13":{loc:{start:{line:169,column:35},end:{line:171,column:27}},type:"cond-expr",locations:[{start:{line:170,column:18},end:{line:170,column:134}},{start:{line:171,column:18},end:{line:171,column:27}}],line:169},"14":{loc:{start:{line:173,column:31},end:{line:175,column:43}},type:"cond-expr",locations:[{start:{line:174,column:18},end:{line:174,column:58}},{start:{line:175,column:18},end:{line:175,column:43}}],line:173},"15":{loc:{start:{line:185,column:35},end:{line:187,column:27}},type:"cond-expr",locations:[{start:{line:186,column:18},end:{line:186,column:140}},{start:{line:187,column:18},end:{line:187,column:27}}],line:185},"16":{loc:{start:{line:189,column:31},end:{line:191,column:43}},type:"cond-expr",locations:[{start:{line:190,column:18},end:{line:190,column:61}},{start:{line:191,column:18},end:{line:191,column:43}}],line:189}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { IConfig } from \"@oclif/config\";\nimport {\n  IInitialRenderBenchmarkParams,\n  IMarker,\n  InitialRenderBenchmark,\n  networkConditions,\n  Runner,\n} from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { flags, getConfig, TBBaseCommand } from \"../../command-config\";\nimport {\n  defaultFlagArgs,\n  fidelityLookup,\n  headlessFlags,\n} from \"../../command-config/default-flag-args\";\nimport {\n  CONTROL_ENV_OVERRIDE_ATTR,\n  EXPERIMENT_ENV_OVERRIDE_ATTR,\n  ITBConfig,\n} from \"../../command-config/tb-config\";\nimport { getEmulateDeviceSettingForKeyAndOrientation } from \"../../helpers/device-settings\";\nimport {\n  browserArgs,\n  config,\n  controlURL,\n  cpuThrottleRate,\n  debug,\n  emulateDevice,\n  emulateDeviceOrientation,\n  experimentURL,\n  fidelity,\n  headless,\n  isCIEnv,\n  markers,\n  network,\n  regressionThreshold,\n  report,\n  runtimeStats,\n  socksPorts,\n  tbResultsFolder,\n  tracingLocationSearch,\n} from \"../../helpers/flags\";\nimport {\n  chalkScheme,\n  checkEnvironmentSpecificOverride,\n  parseMarkers,\n} from \"../../helpers/utils\";\nimport Report from \"../report\";\nimport CompareAnalyze from \"./analyze\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst archiver = require(\"archiver\");\nexport interface ICompareFlags {\n  hideAnalysis: boolean;\n  browserArgs: string[];\n  cpuThrottleRate: number;\n  fidelity: number;\n  markers: IMarker[];\n  network: Protocol.Network.EmulateNetworkConditionsRequest;\n  tbResultsFolder: string;\n  controlURL: string | undefined;\n  experimentURL: string | undefined;\n  tracingLocationSearch: string;\n  runtimeStats: boolean;\n  emulateDevice?: string;\n  emulateDeviceOrientation?: string;\n  socksPorts?: [string, string] | [number, number] | undefined;\n  debug: boolean;\n  regressionThreshold?: number;\n  headless: boolean;\n  config?: string;\n  report?: boolean;\n  isCIEnv?: boolean;\n}\n\nexport default class Compare extends TBBaseCommand {\n  public static description =\n    \"Compare the performance delta between an experiment and control\";\n  public static flags = {\n    hideAnalysis: flags.boolean({\n      default: false,\n      description: \"Hide the the analysis output in terminal\",\n    }),\n    browserArgs: browserArgs({ required: true }),\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    fidelity: fidelity({ required: true }),\n    markers: markers({ required: true }),\n    network: network({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    controlURL: controlURL({ required: false }),\n    experimentURL: experimentURL({ required: false }),\n    tracingLocationSearch: tracingLocationSearch({ required: true }),\n    emulateDevice: emulateDevice(),\n    emulateDeviceOrientation: emulateDeviceOrientation(),\n    socksPorts: socksPorts(),\n    regressionThreshold: regressionThreshold(),\n    config: config(),\n    runtimeStats,\n    report,\n    debug,\n    headless,\n    isCIEnv: isCIEnv(),\n  };\n  public compareFlags: ICompareFlags;\n  public parsedConfig: ITBConfig = defaultFlagArgs;\n  // flags explicitly specified within the cli when\n  // running the command. these will override all\n  public explicitFlags: string[];\n  public analyzedJSONString = \"\";\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    const { flags } = this.parse(Compare);\n    this.explicitFlags = argv;\n    this.compareFlags = flags;\n  }\n\n  // instantiated before this.run()\n  public async init(): Promise<void> {\n    const { flags } = this.parse(Compare);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n    this.compareFlags = flags;\n    await this.parseFlags();\n  }\n\n  public async run(): Promise<string> {\n    const { hideAnalysis } = this.compareFlags;\n    const [\n      controlSettings,\n      experimentSettings,\n    ] = this.generateControlExperimentServerConfig();\n\n    // this should be directly above the instantiation of the InitialRenderBenchmarks\n    if (this.parsedConfig.debug) {\n      Object.entries(this.parsedConfig).forEach(([key, value]) => {\n        if (value) {\n          this.log(`${key}: ${JSON.stringify(value)}`);\n        }\n      });\n    }\n\n    const benchmarks = {\n      control: new InitialRenderBenchmark(controlSettings),\n      experiment: new InitialRenderBenchmark(experimentSettings),\n    };\n\n    const runner = new Runner([benchmarks.control, benchmarks.experiment]);\n    await runner\n      .run(this.compareFlags.fidelity, this.log)\n      .then(async (results: any) => {\n        if (!results[0].samples[0]) {\n          this.error(\n            `Could not sample from provided urls\\nCONTROL: ${this.parsedConfig.controlURL}\\nEXPERIMENT: ${this.parsedConfig.experimentURL}.`\n          );\n        }\n        const resultJSONPath = `${this.parsedConfig.tbResultsFolder}/compare.json`;\n\n        fs.writeFileSync(resultJSONPath, JSON.stringify(results, null, 2));\n\n        const tracesDir = `${this.parsedConfig.tbResultsFolder}/traces`;\n        const zipOutput = fs.createWriteStream(\n          `${this.parsedConfig.tbResultsFolder}/traces.zip`\n        );\n        const archive = archiver(\"zip\", {\n          zlib: { level: 9 },\n        });\n        archive.directory(tracesDir, \"traces\");\n        archive.pipe(zipOutput);\n        archive.finalize();\n\n        // eslint:disable-next-line: max-line-length\n        const message = `${chalkScheme.blackBgGreen(\n          `    ${chalkScheme.white(\"SUCCESS!\")}    `\n        )} ${this.parsedConfig.fidelity} test samples were taken.`;\n\n        this.log(`\\n${message}`);\n\n        if (!hideAnalysis) {\n          this.analyzedJSONString = await CompareAnalyze.run([\n            resultJSONPath,\n            \"--fidelity\",\n            `${this.parsedConfig.fidelity}`,\n            \"--tbResultsFolder\",\n            `${this.parsedConfig.tbResultsFolder}`,\n            \"--regressionThreshold\",\n            `${this.parsedConfig.regressionThreshold}`,\n            \"--isCIEnv\",\n            `${this.parsedConfig.isCIEnv}`,\n          ]);\n\n          fs.writeFileSync(\n            `${this.parsedConfig.tbResultsFolder}/report.json`,\n            this.analyzedJSONString\n          );\n        }\n\n        // if we want to run the Report without calling a separate command\n        if (this.parsedConfig.report) {\n          await Report.run([\n            \"--tbResultsFolder\",\n            `${this.parsedConfig.tbResultsFolder}`,\n            \"--config\",\n            `${this.parsedConfig.config}`,\n          ]);\n        }\n\n        // with debug flag output three files\n        // on config specifics\n        if (this.parsedConfig.debug) {\n          fs.writeFileSync(\n            `${this.parsedConfig.tbResultsFolder}/server-control-settings.json`,\n            JSON.stringify(Object.assign(controlSettings), null, 2)\n          );\n\n          fs.writeFileSync(\n            `${this.parsedConfig.tbResultsFolder}/server-experiment-settings.json`,\n            JSON.stringify(Object.assign(experimentSettings), null, 2)\n          );\n\n          fs.writeFileSync(\n            `${this.parsedConfig.tbResultsFolder}/compare-flags-settings.json`,\n            JSON.stringify(Object.assign(this.parsedConfig), null, 2)\n          );\n        }\n      })\n      .catch((err: any) => {\n        this.error(err);\n      });\n\n    return this.analyzedJSONString;\n  }\n\n  private async parseFlags(): Promise<void> {\n    const {\n      tbResultsFolder,\n      fidelity,\n      markers,\n      regressionThreshold,\n      headless,\n      controlURL,\n      experimentURL,\n    } = (this.parsedConfig as unknown) as ICompareFlags;\n\n    // modifies properties of flags that were not set\n    // during flag.parse(). these are intentionally\n    // not deconstructed as to maintain the mutable\n    // flags object state\n    if (typeof fidelity === \"string\") {\n      this.compareFlags.fidelity = parseInt(\n        (fidelityLookup as any)[fidelity],\n        10\n      );\n    }\n    if (typeof markers === \"string\") {\n      this.parsedConfig.markers = parseMarkers(markers);\n    }\n    if (typeof regressionThreshold === \"string\") {\n      this.parsedConfig.regressionThreshold = parseInt(regressionThreshold, 10);\n    }\n    if (typeof controlURL === undefined) {\n      this.error(\n        \"controlURL is required either in the tbconfig.json or as cli flag\"\n      );\n    }\n\n    if (typeof experimentURL === undefined) {\n      this.error(\n        \"experimentURL is required either in the tbconfig.json or as cli flag\"\n      );\n    }\n\n    // if headless flag is true include the headless flags\n    if (headless) {\n      this.parsedConfig.browserArgs = this.compareFlags.browserArgs.concat(\n        headlessFlags\n      );\n    }\n\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    fs.mkdirpSync(path.join(tbResultsFolder, \"traces\"));\n  }\n\n  /**\n   * Final result of the configs are in the following order:\n   *\n   * controlConfigs = tbconfig:controlBenchmarkEnvironment > command line > tbconfig > default\n   * experimentConfigs = tbconfig:experimentBenchmarkEnvironment > command line > tbconfig > default\n   *\n   * This functions handles the tsconfig:** part since it is assumed that parent function that passed input \"flags\"\n   * would've handled \"command line > tbconfig > default\"\n   *\n   * @param this.parsedConfig - Object containing configs parsed from the Command class\n   */\n  private generateControlExperimentServerConfig(): [\n    IInitialRenderBenchmarkParams,\n    IInitialRenderBenchmarkParams\n  ] {\n    // delay in ms times the number of samples. this improves variance.\n    // eg 100 total samples X 200ms per sample = 20 seconds total added to the trace time\n    const delay = 200;\n    const controlBrowser = {\n      additionalArguments: this.compareFlags.browserArgs,\n    };\n    const experimentBrowser = {\n      additionalArguments: this.compareFlags.browserArgs,\n    };\n\n    // config for the browsers to leverage socks proxy\n    if (this.parsedConfig.socksPorts) {\n      controlBrowser.additionalArguments = controlBrowser.additionalArguments.concat(\n        [`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[0]}`]\n      );\n      experimentBrowser.additionalArguments = experimentBrowser.additionalArguments.concat(\n        [`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[1]}`]\n      );\n    }\n    const controlNetwork: string = checkEnvironmentSpecificOverride(\n      \"network\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const controlEmulateDevice = checkEnvironmentSpecificOverride(\n      \"emulateDevice\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const controlEmulateDeviceOrientation = checkEnvironmentSpecificOverride(\n      \"emulateDeviceOrientation\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentNetwork: string = checkEnvironmentSpecificOverride(\n      \"network\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentEmulateDevice = checkEnvironmentSpecificOverride(\n      \"emulateDevice\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentEmulateDeviceOrientation = checkEnvironmentSpecificOverride(\n      \"emulateDeviceOrientation\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n\n    const controlSettings: IInitialRenderBenchmarkParams = {\n      browser: controlBrowser,\n      cpuThrottleRate: checkEnvironmentSpecificOverride(\n        \"cpuThrottleRate\",\n        this.compareFlags,\n        CONTROL_ENV_OVERRIDE_ATTR,\n        this.parsedConfig\n      ),\n      delay,\n      emulateDeviceSettings: controlEmulateDevice\n        ? getEmulateDeviceSettingForKeyAndOrientation(\n            controlEmulateDevice,\n            controlEmulateDeviceOrientation\n          )\n        : undefined,\n      markers: this.compareFlags.markers,\n      networkConditions: controlNetwork\n        ? networkConditions[controlNetwork as keyof typeof networkConditions]\n        : this.compareFlags.network,\n      name: \"control\",\n      runtimeStats: this.compareFlags.runtimeStats,\n      saveTraces: (i) =>\n        `${this.compareFlags.tbResultsFolder}/traces/control${i}.json`,\n      url: path.join(\n        this.compareFlags.controlURL + this.compareFlags.tracingLocationSearch\n      ),\n    };\n\n    const experimentSettings: IInitialRenderBenchmarkParams = {\n      browser: experimentBrowser,\n      cpuThrottleRate: checkEnvironmentSpecificOverride(\n        \"cpuThrottleRate\",\n        this.compareFlags,\n        EXPERIMENT_ENV_OVERRIDE_ATTR,\n        this.parsedConfig\n      ),\n      delay,\n      emulateDeviceSettings: experimentEmulateDevice\n        ? getEmulateDeviceSettingForKeyAndOrientation(\n            experimentEmulateDevice,\n            experimentEmulateDeviceOrientation\n          )\n        : undefined,\n      markers: this.compareFlags.markers,\n      networkConditions: experimentNetwork\n        ? networkConditions[experimentNetwork as keyof typeof networkConditions]\n        : this.compareFlags.network,\n      name: \"experiment\",\n      runtimeStats: this.compareFlags.runtimeStats,\n      saveTraces: (i) =>\n        `${this.compareFlags.tbResultsFolder}/traces/experiment${i}.json`,\n      url: path.join(\n        this.compareFlags.experimentURL +\n          this.compareFlags.tracingLocationSearch\n      ),\n    };\n\n    return [controlSettings, experimentSettings];\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"46f6df9bba0df1c9a4c362b00c7504320719fc36"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1q73d7sky0=function(){return actualCoverage;};return actualCoverage;}cov_1q73d7sky0().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const core_1=(cov_1q73d7sky0().s[1]++,require("@tracerbench/core"));const fs=(cov_1q73d7sky0().s[2]++,require("fs-extra"));const path=(cov_1q73d7sky0().s[3]++,require("path"));const command_config_1=(cov_1q73d7sky0().s[4]++,require("../../command-config"));const default_flag_args_1=(cov_1q73d7sky0().s[5]++,require("../../command-config/default-flag-args"));const tb_config_1=(cov_1q73d7sky0().s[6]++,require("../../command-config/tb-config"));const device_settings_1=(cov_1q73d7sky0().s[7]++,require("../../helpers/device-settings"));const flags_1=(cov_1q73d7sky0().s[8]++,require("../../helpers/flags"));const utils_1=(cov_1q73d7sky0().s[9]++,require("../../helpers/utils"));const report_1=(cov_1q73d7sky0().s[10]++,require("../report"));const analyze_1=(cov_1q73d7sky0().s[11]++,require("./analyze"));// eslint-disable-next-line @typescript-eslint/no-var-requires
const archiver=(cov_1q73d7sky0().s[12]++,require("archiver"));class Compare extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_1q73d7sky0().f[0]++;cov_1q73d7sky0().s[13]++;super(argv,config);cov_1q73d7sky0().s[14]++;this.parsedConfig=default_flag_args_1.defaultFlagArgs;cov_1q73d7sky0().s[15]++;this.analyzedJSONString="";const{flags}=(cov_1q73d7sky0().s[16]++,this.parse(Compare));cov_1q73d7sky0().s[17]++;this.explicitFlags=argv;cov_1q73d7sky0().s[18]++;this.compareFlags=flags;}// instantiated before this.run()
async init(){cov_1q73d7sky0().f[1]++;const{flags}=(cov_1q73d7sky0().s[19]++,this.parse(Compare));cov_1q73d7sky0().s[20]++;this.parsedConfig=command_config_1.getConfig(flags.config,flags,this.explicitFlags);cov_1q73d7sky0().s[21]++;this.compareFlags=flags;cov_1q73d7sky0().s[22]++;await this.parseFlags();}async run(){cov_1q73d7sky0().f[2]++;const{hideAnalysis}=(cov_1q73d7sky0().s[23]++,this.compareFlags);const[controlSettings,experimentSettings]=(cov_1q73d7sky0().s[24]++,this.generateControlExperimentServerConfig());// this should be directly above the instantiation of the InitialRenderBenchmarks
cov_1q73d7sky0().s[25]++;if(this.parsedConfig.debug){cov_1q73d7sky0().b[0][0]++;cov_1q73d7sky0().s[26]++;Object.entries(this.parsedConfig).forEach(([key,value])=>{cov_1q73d7sky0().f[3]++;cov_1q73d7sky0().s[27]++;if(value){cov_1q73d7sky0().b[1][0]++;cov_1q73d7sky0().s[28]++;this.log(`${key}: ${JSON.stringify(value)}`);}else{cov_1q73d7sky0().b[1][1]++;}});}else{cov_1q73d7sky0().b[0][1]++;}const benchmarks=(cov_1q73d7sky0().s[29]++,{control:new core_1.InitialRenderBenchmark(controlSettings),experiment:new core_1.InitialRenderBenchmark(experimentSettings)});const runner=(cov_1q73d7sky0().s[30]++,new core_1.Runner([benchmarks.control,benchmarks.experiment]));cov_1q73d7sky0().s[31]++;await runner.run(this.compareFlags.fidelity,this.log).then(async results=>{cov_1q73d7sky0().f[4]++;cov_1q73d7sky0().s[32]++;if(!results[0].samples[0]){cov_1q73d7sky0().b[2][0]++;cov_1q73d7sky0().s[33]++;this.error(`Could not sample from provided urls\nCONTROL: ${this.parsedConfig.controlURL}\nEXPERIMENT: ${this.parsedConfig.experimentURL}.`);}else{cov_1q73d7sky0().b[2][1]++;}const resultJSONPath=(cov_1q73d7sky0().s[34]++,`${this.parsedConfig.tbResultsFolder}/compare.json`);cov_1q73d7sky0().s[35]++;fs.writeFileSync(resultJSONPath,JSON.stringify(results,null,2));const tracesDir=(cov_1q73d7sky0().s[36]++,`${this.parsedConfig.tbResultsFolder}/traces`);const zipOutput=(cov_1q73d7sky0().s[37]++,fs.createWriteStream(`${this.parsedConfig.tbResultsFolder}/traces.zip`));const archive=(cov_1q73d7sky0().s[38]++,archiver("zip",{zlib:{level:9}}));cov_1q73d7sky0().s[39]++;archive.directory(tracesDir,"traces");cov_1q73d7sky0().s[40]++;archive.pipe(zipOutput);cov_1q73d7sky0().s[41]++;archive.finalize();// eslint:disable-next-line: max-line-length
const message=(cov_1q73d7sky0().s[42]++,`${utils_1.chalkScheme.blackBgGreen(`    ${utils_1.chalkScheme.white("SUCCESS!")}    `)} ${this.parsedConfig.fidelity} test samples were taken.`);cov_1q73d7sky0().s[43]++;this.log(`\n${message}`);cov_1q73d7sky0().s[44]++;if(!hideAnalysis){cov_1q73d7sky0().b[3][0]++;cov_1q73d7sky0().s[45]++;this.analyzedJSONString=await analyze_1.default.run([resultJSONPath,"--fidelity",`${this.parsedConfig.fidelity}`,"--tbResultsFolder",`${this.parsedConfig.tbResultsFolder}`,"--regressionThreshold",`${this.parsedConfig.regressionThreshold}`,"--isCIEnv",`${this.parsedConfig.isCIEnv}`]);cov_1q73d7sky0().s[46]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/report.json`,this.analyzedJSONString);}else{cov_1q73d7sky0().b[3][1]++;}// if we want to run the Report without calling a separate command
cov_1q73d7sky0().s[47]++;if(this.parsedConfig.report){cov_1q73d7sky0().b[4][0]++;cov_1q73d7sky0().s[48]++;await report_1.default.run(["--tbResultsFolder",`${this.parsedConfig.tbResultsFolder}`,"--config",`${this.parsedConfig.config}`]);}else{cov_1q73d7sky0().b[4][1]++;}// with debug flag output three files
// on config specifics
cov_1q73d7sky0().s[49]++;if(this.parsedConfig.debug){cov_1q73d7sky0().b[5][0]++;cov_1q73d7sky0().s[50]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/server-control-settings.json`,JSON.stringify(Object.assign(controlSettings),null,2));cov_1q73d7sky0().s[51]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/server-experiment-settings.json`,JSON.stringify(Object.assign(experimentSettings),null,2));cov_1q73d7sky0().s[52]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/compare-flags-settings.json`,JSON.stringify(Object.assign(this.parsedConfig),null,2));}else{cov_1q73d7sky0().b[5][1]++;}}).catch(err=>{cov_1q73d7sky0().f[5]++;cov_1q73d7sky0().s[53]++;this.error(err);});cov_1q73d7sky0().s[54]++;return this.analyzedJSONString;}async parseFlags(){cov_1q73d7sky0().f[6]++;const{tbResultsFolder,fidelity,markers,regressionThreshold,headless,controlURL,experimentURL}=(cov_1q73d7sky0().s[55]++,this.parsedConfig);// modifies properties of flags that were not set
// during flag.parse(). these are intentionally
// not deconstructed as to maintain the mutable
// flags object state
cov_1q73d7sky0().s[56]++;if(typeof fidelity==="string"){cov_1q73d7sky0().b[6][0]++;cov_1q73d7sky0().s[57]++;this.compareFlags.fidelity=parseInt(default_flag_args_1.fidelityLookup[fidelity],10);}else{cov_1q73d7sky0().b[6][1]++;}cov_1q73d7sky0().s[58]++;if(typeof markers==="string"){cov_1q73d7sky0().b[7][0]++;cov_1q73d7sky0().s[59]++;this.parsedConfig.markers=utils_1.parseMarkers(markers);}else{cov_1q73d7sky0().b[7][1]++;}cov_1q73d7sky0().s[60]++;if(typeof regressionThreshold==="string"){cov_1q73d7sky0().b[8][0]++;cov_1q73d7sky0().s[61]++;this.parsedConfig.regressionThreshold=parseInt(regressionThreshold,10);}else{cov_1q73d7sky0().b[8][1]++;}cov_1q73d7sky0().s[62]++;if(typeof controlURL===undefined){cov_1q73d7sky0().b[9][0]++;cov_1q73d7sky0().s[63]++;this.error("controlURL is required either in the tbconfig.json or as cli flag");}else{cov_1q73d7sky0().b[9][1]++;}cov_1q73d7sky0().s[64]++;if(typeof experimentURL===undefined){cov_1q73d7sky0().b[10][0]++;cov_1q73d7sky0().s[65]++;this.error("experimentURL is required either in the tbconfig.json or as cli flag");}else{cov_1q73d7sky0().b[10][1]++;}// if headless flag is true include the headless flags
cov_1q73d7sky0().s[66]++;if(headless){cov_1q73d7sky0().b[11][0]++;cov_1q73d7sky0().s[67]++;this.parsedConfig.browserArgs=this.compareFlags.browserArgs.concat(default_flag_args_1.headlessFlags);}else{cov_1q73d7sky0().b[11][1]++;}// if the folder for the tracerbench results file
// does not exist then create it
cov_1q73d7sky0().s[68]++;fs.mkdirpSync(path.join(tbResultsFolder,"traces"));}/**
     * Final result of the configs are in the following order:
     *
     * controlConfigs = tbconfig:controlBenchmarkEnvironment > command line > tbconfig > default
     * experimentConfigs = tbconfig:experimentBenchmarkEnvironment > command line > tbconfig > default
     *
     * This functions handles the tsconfig:** part since it is assumed that parent function that passed input "flags"
     * would've handled "command line > tbconfig > default"
     *
     * @param this.parsedConfig - Object containing configs parsed from the Command class
     */generateControlExperimentServerConfig(){cov_1q73d7sky0().f[7]++;// delay in ms times the number of samples. this improves variance.
// eg 100 total samples X 200ms per sample = 20 seconds total added to the trace time
const delay=(cov_1q73d7sky0().s[69]++,200);const controlBrowser=(cov_1q73d7sky0().s[70]++,{additionalArguments:this.compareFlags.browserArgs});const experimentBrowser=(cov_1q73d7sky0().s[71]++,{additionalArguments:this.compareFlags.browserArgs});// config for the browsers to leverage socks proxy
cov_1q73d7sky0().s[72]++;if(this.parsedConfig.socksPorts){cov_1q73d7sky0().b[12][0]++;cov_1q73d7sky0().s[73]++;controlBrowser.additionalArguments=controlBrowser.additionalArguments.concat([`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[0]}`]);cov_1q73d7sky0().s[74]++;experimentBrowser.additionalArguments=experimentBrowser.additionalArguments.concat([`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[1]}`]);}else{cov_1q73d7sky0().b[12][1]++;}const controlNetwork=(cov_1q73d7sky0().s[75]++,utils_1.checkEnvironmentSpecificOverride("network",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlEmulateDevice=(cov_1q73d7sky0().s[76]++,utils_1.checkEnvironmentSpecificOverride("emulateDevice",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlEmulateDeviceOrientation=(cov_1q73d7sky0().s[77]++,utils_1.checkEnvironmentSpecificOverride("emulateDeviceOrientation",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentNetwork=(cov_1q73d7sky0().s[78]++,utils_1.checkEnvironmentSpecificOverride("network",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentEmulateDevice=(cov_1q73d7sky0().s[79]++,utils_1.checkEnvironmentSpecificOverride("emulateDevice",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentEmulateDeviceOrientation=(cov_1q73d7sky0().s[80]++,utils_1.checkEnvironmentSpecificOverride("emulateDeviceOrientation",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlSettings=(cov_1q73d7sky0().s[81]++,{browser:controlBrowser,cpuThrottleRate:utils_1.checkEnvironmentSpecificOverride("cpuThrottleRate",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig),delay,emulateDeviceSettings:controlEmulateDevice?(cov_1q73d7sky0().b[13][0]++,device_settings_1.getEmulateDeviceSettingForKeyAndOrientation(controlEmulateDevice,controlEmulateDeviceOrientation)):(cov_1q73d7sky0().b[13][1]++,undefined),markers:this.compareFlags.markers,networkConditions:controlNetwork?(cov_1q73d7sky0().b[14][0]++,core_1.networkConditions[controlNetwork]):(cov_1q73d7sky0().b[14][1]++,this.compareFlags.network),name:"control",runtimeStats:this.compareFlags.runtimeStats,saveTraces:i=>{cov_1q73d7sky0().f[8]++;cov_1q73d7sky0().s[82]++;return`${this.compareFlags.tbResultsFolder}/traces/control${i}.json`;},url:path.join(this.compareFlags.controlURL+this.compareFlags.tracingLocationSearch)});const experimentSettings=(cov_1q73d7sky0().s[83]++,{browser:experimentBrowser,cpuThrottleRate:utils_1.checkEnvironmentSpecificOverride("cpuThrottleRate",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig),delay,emulateDeviceSettings:experimentEmulateDevice?(cov_1q73d7sky0().b[15][0]++,device_settings_1.getEmulateDeviceSettingForKeyAndOrientation(experimentEmulateDevice,experimentEmulateDeviceOrientation)):(cov_1q73d7sky0().b[15][1]++,undefined),markers:this.compareFlags.markers,networkConditions:experimentNetwork?(cov_1q73d7sky0().b[16][0]++,core_1.networkConditions[experimentNetwork]):(cov_1q73d7sky0().b[16][1]++,this.compareFlags.network),name:"experiment",runtimeStats:this.compareFlags.runtimeStats,saveTraces:i=>{cov_1q73d7sky0().f[9]++;cov_1q73d7sky0().s[84]++;return`${this.compareFlags.tbResultsFolder}/traces/experiment${i}.json`;},url:path.join(this.compareFlags.experimentURL+this.compareFlags.tracingLocationSearch)});cov_1q73d7sky0().s[85]++;return[controlSettings,experimentSettings];}}cov_1q73d7sky0().s[86]++;exports.default=Compare;cov_1q73d7sky0().s[87]++;Compare.description="Compare the performance delta between an experiment and control";cov_1q73d7sky0().s[88]++;Compare.flags={hideAnalysis:command_config_1.flags.boolean({default:false,description:"Hide the the analysis output in terminal"}),browserArgs:flags_1.browserArgs({required:true}),cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),fidelity:flags_1.fidelity({required:true}),markers:flags_1.markers({required:true}),network:flags_1.network({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),controlURL:flags_1.controlURL({required:false}),experimentURL:flags_1.experimentURL({required:false}),tracingLocationSearch:flags_1.tracingLocationSearch({required:true}),emulateDevice:flags_1.emulateDevice(),emulateDeviceOrientation:flags_1.emulateDeviceOrientation(),socksPorts:flags_1.socksPorts(),regressionThreshold:flags_1.regressionThreshold(),config:flags_1.config(),runtimeStats:flags_1.runtimeStats,report:flags_1.report,debug:flags_1.debug,headless:flags_1.headless,isCIEnv:flags_1.isCIEnv()};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvaW5kZXgudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9jb21tYW5kcy9jb21wYXJlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx1REFBdUQ7O0FBR3ZELDRDQU0yQjtBQUUzQiwrQkFBK0I7QUFDL0IsNkJBQTZCO0FBRTdCLHlEQUF1RTtBQUN2RSw4RUFJZ0Q7QUFDaEQsOERBSXdDO0FBQ3hDLG1FQUE0RjtBQUM1RiwrQ0FvQjZCO0FBQzdCLCtDQUk2QjtBQUM3QixzQ0FBK0I7QUFDL0IsdUNBQXVDO0FBRXZDLDhEQUE4RDtBQUM5RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUF3QnJDLE1BQXFCLE9BQVEsU0FBUSw4QkFBYTtJQWtDaEQsWUFBWSxJQUFjLEVBQUUsTUFBZTtRQUN6QyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBTmYsaUJBQVksR0FBYyxtQ0FBZSxDQUFDO1FBSTFDLHVCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUc3QixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsaUNBQWlDO0lBQzFCLEtBQUssQ0FBQyxJQUFJO1FBQ2YsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRywwQkFBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFh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LHFCQUFhLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDakQscUJBQXFCLEVBQUUsNkJBQXFCLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDaEUsYUFBYSxFQUFFLHFCQUFhLEVBQUU7SUFDOUIsd0JBQXdCLEVBQUUsZ0NBQXdCLEVBQUU7SUFDcEQsVUFBVSxFQUFFLGtCQUFVLEVBQUU7SUFDeEIsbUJBQW1CLEVBQUUsMkJBQW1CLEVBQUU7SUFDMUMsTUFBTSxFQUFFLGNBQU0sRUFBRTtJQUNoQixZQUFZLEVBQVosb0JBQVk7SUFDWixNQUFNLEVBQU4sY0FBTTtJQUNOLEtBQUssRUFBTCxhQUFLO0lBQ0wsUUFBUSxFQUFSLGdCQUFRO0lBQ1IsT0FBTyxFQUFFLGVBQU8sRUFBRTtDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSBcIkBvY2xpZi9jb25maWdcIjtcbmltcG9ydCB7XG4gIElJbml0aWFsUmVuZGVyQmVuY2htYXJrUGFyYW1zLFxuICBJTWFya2VyLFxuICBJbml0aWFsUmVuZGVyQmVuY2htYXJrLFxuICBuZXR3b3JrQ29uZGl0aW9ucyxcbiAgUnVubmVyLFxufSBmcm9tIFwiQHRyYWNlcmJlbmNoL2NvcmVcIjtcbmltcG9ydCBQcm90b2NvbCBmcm9tIFwiZGV2dG9vbHMtcHJvdG9jb2xcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgeyBmbGFncywgZ2V0Q29uZmlnLCBUQkJhc2VDb21tYW5kIH0gZnJvbSBcIi4uLy4uL2NvbW1hbmQtY29uZmlnXCI7XG5pbXBvcnQge1xuICBkZWZhdWx0RmxhZ0FyZ3MsXG4gIGZpZGVsaXR5TG9va3VwLFxuICBoZWFkbGVzc0ZsYWdzLFxufSBmcm9tIFwiLi4vLi4vY29tbWFuZC1jb25maWcvZGVmYXVsdC1mbGFnLWFyZ3NcIjtcbmltcG9ydCB7XG4gIENPTlRST0xfRU5WX09WRVJSSURFX0FUVFIsXG4gIEVYUEVSSU1FTlRfRU5WX09WRVJSSURFX0FUVFIsXG4gIElUQkNvbmZpZyxcbn0gZnJvbSBcIi4uLy4uL2NvbW1hbmQtY29uZmlnL3RiLWNvbmZpZ1wiO1xuaW1wb3J0IHsgZ2V0RW11bGF0ZURldmljZVNldHRpbmdGb3JLZXlBbmRPcmllbnRhdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2RldmljZS1zZXR0aW5nc1wiO1xuaW1wb3J0IHtcbiAgYnJvd3NlckFyZ3MsXG4gIGNvbmZpZyxcbiAgY29udHJvbFVSTCxcbiAgY3B1VGhyb3R0bGVSYXRlLFxuICBkZWJ1ZyxcbiAgZW11bGF0ZURldmljZSxcbiAgZW11bGF0ZURldmljZU9yaWVudGF0aW9uLFxuICBleHBlcmltZW50VVJMLFxuICBmaWRlbGl0eSxcbiAgaGVhZGxlc3MsXG4gIGlzQ0lFbnYsXG4gIG1hcmtlcnMsXG4gIG5ldHdvcmssXG4gIHJlZ3Jlc3Npb25UaHJlc2hvbGQsXG4gIHJlcG9ydCxcbiAgcnVudGltZVN0YXRzLFxuICBzb2Nrc1BvcnRzLFxuICB0YlJlc3VsdHNGb2xkZXIsXG4gIHRyYWNpbmdMb2NhdGlvblNlYXJjaCxcbn0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvZmxhZ3NcIjtcbmltcG9ydCB7XG4gIGNoYWxrU2NoZW1lLFxuICBjaGVja0Vudmlyb25tZW50U3BlY2lmaWNPdmVycmlkZSxcbiAgcGFyc2VNYXJrZXJzLFxufSBmcm9tIFwiLi4vLi4vaGVscGVycy91dGlsc1wiO1xuaW1wb3J0IFJlcG9ydCBmcm9tIFwiLi4vcmVwb3J0XCI7XG5pbXBvcnQgQ29tcGFyZUFuYWx5emUgZnJvbSBcIi4vYW5hbHl6ZVwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgYXJjaGl2ZXIgPSByZXF1aXJlKFwiYXJjaGl2ZXJcIik7XG5leHBvcnQgaW50ZXJmYWNlIElDb21wYXJlRmxhZ3Mge1xuICBoaWRlQW5hbHlzaXM6IGJvb2xlYW47XG4gIGJyb3dzZXJBcmdzOiBzdHJpbmdbXTtcbiAgY3B1VGhyb3R0bGVSYXRlOiBudW1iZXI7XG4gIGZpZGVsaXR5OiBudW1iZXI7XG4gIG1hcmtlcnM6IElNYXJrZXJbXTtcbiAgbmV0d29yazogUHJvdG9jb2wuTmV0d29yay5FbXVsYXRlTmV0d29ya0NvbmRpdGlvbnNSZXF1ZXN0O1xuICB0YlJlc3VsdHNGb2xkZXI6IHN0cmluZztcbiAgY29udHJvbFVSTDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBleHBlcmltZW50VVJMOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHRyYWNpbmdMb2NhdGlvblNlYXJjaDogc3RyaW5nO1xuICBydW50aW1lU3RhdHM6IGJvb2xlYW47XG4gIGVtdWxhdGVEZXZpY2U/OiBzdHJpbmc7XG4gIGVtdWxhdGVEZXZpY2VPcmllbnRhdGlvbj86IHN0cmluZztcbiAgc29ja3NQb3J0cz86IFtzdHJpbmcsIHN0cmluZ10gfCBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkO1xuICBkZWJ1ZzogYm9vbGVhbjtcbiAgcmVncmVzc2lvblRocmVzaG9sZD86IG51bWJlcjtcbiAgaGVhZGxlc3M6IGJvb2xlYW47XG4gIGNvbmZpZz86IHN0cmluZztcbiAgcmVwb3J0PzogYm9vbGVhbjtcbiAgaXNDSUVudj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmUgZXh0ZW5kcyBUQkJhc2VDb21tYW5kIHtcbiAgcHVibGljIHN0YXRpYyBkZXNjcmlwdGlvbiA9XG4gICAgXCJDb21wYXJlIHRoZSBwZXJmb3JtYW5jZSBkZWx0YSBiZXR3ZWVuIGFuIGV4cGVyaW1lbnQgYW5kIGNvbnRyb2xcIjtcbiAgcHVibGljIHN0YXRpYyBmbGFncyA9IHtcbiAgICBoaWRlQW5hbHlzaXM6IGZsYWdzLmJvb2xlYW4oe1xuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICBkZXNjcmlwdGlvbjogXCJIaWRlIHRoZSB0aGUgYW5hbHlzaXMgb3V0cHV0IGluIHRlcm1pbmFsXCIsXG4gICAgfSksXG4gICAgYnJvd3NlckFyZ3M6IGJyb3dzZXJBcmdzKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgY3B1VGhyb3R0bGVSYXRlOiBjcHVUaHJvdHRsZVJhdGUoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBmaWRlbGl0eTogZmlkZWxpdHkoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBtYXJrZXJzOiBtYXJrZXJzKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgbmV0d29yazogbmV0d29yayh7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICAgIHRiUmVzdWx0c0ZvbGRlcjogdGJSZXN1bHRzRm9sZGVyKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgY29udHJvbFVSTDogY29udHJvbFVSTCh7IHJlcXVpcmVkOiBmYWxzZSB9KSxcbiAgICBleHBlcmltZW50VVJMOiBleHBlcmltZW50VVJMKHsgcmVxdWlyZWQ6IGZhbHNlIH0pLFxuICAgIHRyYWNpbmdMb2NhdGlvblNlYXJjaDogdHJhY2luZ0xvY2F0aW9uU2VhcmNoKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgZW11bGF0ZURldmljZTogZW11bGF0ZURldmljZSgpLFxuICAgIGVtdWxhdGVEZXZpY2VPcmllbnRhdGlvbjogZW11bGF0ZURldmljZU9yaWVudGF0aW9uKCksXG4gICAgc29ja3NQb3J0czogc29ja3NQb3J0cygpLFxuICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IHJlZ3Jlc3Npb25UaHJlc2hvbGQoKSxcbiAgICBjb25maWc6IGNvbmZpZygpLFxuICAgIHJ1bnRpbWVTdGF0cyxcbiAgICByZXBvcnQsXG4gICAgZGVidWcsXG4gICAgaGVhZGxlc3MsXG4gICAgaXNDSUVudjogaXNDSUVudigpLFxuICB9O1xuICBwdWJsaWMgY29tcGFyZUZsYWdzOiBJQ29tcGFyZUZsYWdzO1xuICBwdWJsaWMgcGFyc2VkQ29uZmlnOiBJVEJDb25maWcgPSBkZWZhdWx0RmxhZ0FyZ3M7XG4gIC8vIGZsYWdzIGV4cGxpY2l0bHkgc3BlY2lmaWVkIHdpdGhpbiB0aGUgY2xpIHdoZW5cbiAgLy8gcnVubmluZyB0aGUgY29tbWFuZC4gdGhlc2Ugd2lsbCBvdmVycmlkZSBhbGxcbiAgcHVibGljIGV4cGxpY2l0RmxhZ3M6IHN0cmluZ1tdO1xuICBwdWJsaWMgYW5hbHl6ZWRKU09OU3RyaW5nID0gXCJcIjtcbiAgY29uc3RydWN0b3IoYXJndjogc3RyaW5nW10sIGNvbmZpZzogSUNvbmZpZykge1xuICAgIHN1cGVyKGFyZ3YsIGNvbmZpZyk7XG4gICAgY29uc3QgeyBmbGFncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlKTtcbiAgICB0aGlzLmV4cGxpY2l0RmxhZ3MgPSBhcmd2O1xuICAgIHRoaXMuY29tcGFyZUZsYWdzID0gZmxhZ3M7XG4gIH1cblxuICAvLyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoaXMucnVuKClcbiAgcHVibGljIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBmbGFncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlKTtcbiAgICB0aGlzLnBhcnNlZENvbmZpZyA9IGdldENvbmZpZyhmbGFncy5jb25maWcsIGZsYWdzLCB0aGlzLmV4cGxpY2l0RmxhZ3MpO1xuICAgIHRoaXMuY29tcGFyZUZsYWdzID0gZmxhZ3M7XG4gICAgYXdhaXQgdGhpcy5wYXJzZUZsYWdzKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgeyBoaWRlQW5hbHlzaXMgfSA9IHRoaXMuY29tcGFyZUZsYWdzO1xuICAgIGNvbnN0IFtcbiAgICAgIGNvbnRyb2xTZXR0aW5ncyxcbiAgICAgIGV4cGVyaW1lbnRTZXR0aW5ncyxcbiAgICBdID0gdGhpcy5nZW5lcmF0ZUNvbnRyb2xFeHBlcmltZW50U2VydmVyQ29uZmlnKCk7XG5cbiAgICAvLyB0aGlzIHNob3VsZCBiZSBkaXJlY3RseSBhYm92ZSB0aGUgaW5zdGFudGlhdGlvbiBvZiB0aGUgSW5pdGlhbFJlbmRlckJlbmNobWFya3NcbiAgICBpZiAodGhpcy5wYXJzZWRDb25maWcuZGVidWcpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucGFyc2VkQ29uZmlnKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5sb2coYCR7a2V5fTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGJlbmNobWFya3MgPSB7XG4gICAgICBjb250cm9sOiBuZXcgSW5pdGlhbFJlbmRlckJlbmNobWFyayhjb250cm9sU2V0dGluZ3MpLFxuICAgICAgZXhwZXJpbWVudDogbmV3IEluaXRpYWxSZW5kZXJCZW5jaG1hcmsoZXhwZXJpbWVudFNldHRpbmdzKSxcbiAgICB9O1xuXG4gICAgY29uc3QgcnVubmVyID0gbmV3IFJ1bm5lcihbYmVuY2htYXJrcy5jb250cm9sLCBiZW5jaG1hcmtzLmV4cGVyaW1lbnRdKTtcbiAgICBhd2FpdCBydW5uZXJcbiAgICAgIC5ydW4odGhpcy5jb21wYXJlRmxhZ3MuZmlkZWxpdHksIHRoaXMubG9nKVxuICAgICAgLnRoZW4oYXN5bmMgKHJlc3VsdHM6IGFueSkgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdHNbMF0uc2FtcGxlc1swXSkge1xuICAgICAgICAgIHRoaXMuZXJyb3IoXG4gICAgICAgICAgICBgQ291bGQgbm90IHNhbXBsZSBmcm9tIHByb3ZpZGVkIHVybHNcXG5DT05UUk9MOiAke3RoaXMucGFyc2VkQ29uZmlnLmNvbnRyb2xVUkx9XFxuRVhQRVJJTUVOVDogJHt0aGlzLnBhcnNlZENvbmZpZy5leHBlcmltZW50VVJMfS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHRKU09OUGF0aCA9IGAke3RoaXMucGFyc2VkQ29uZmlnLnRiUmVzdWx0c0ZvbGRlcn0vY29tcGFyZS5qc29uYDtcblxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHJlc3VsdEpTT05QYXRoLCBKU09OLnN0cmluZ2lmeShyZXN1bHRzLCBudWxsLCAyKSk7XG5cbiAgICAgICAgY29uc3QgdHJhY2VzRGlyID0gYCR7dGhpcy5wYXJzZWRDb25maWcudGJSZXN1bHRzRm9sZGVyfS90cmFjZXNgO1xuICAgICAgICBjb25zdCB6aXBPdXRwdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShcbiAgICAgICAgICBgJHt0aGlzLnBhcnNlZENvbmZpZy50YlJlc3VsdHNGb2xkZXJ9L3RyYWNlcy56aXBgXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGFyY2hpdmUgPSBhcmNoaXZlcihcInppcFwiLCB7XG4gICAgICAgICAgemxpYjogeyBsZXZlbDogOSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgYXJjaGl2ZS5kaXJlY3RvcnkodHJhY2VzRGlyLCBcInRyYWNlc1wiKTtcbiAgICAgICAgYXJjaGl2ZS5waXBlKHppcE91dHB1dCk7XG4gICAgICAgIGFyY2hpdmUuZmluYWxpemUoKTtcblxuICAgICAgICAvLyBlc2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG1heC1saW5lLWxlbmd0aFxuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Y2hhbGtTY2hlbWUuYmxhY2tCZ0dyZWVuKFxuICAgICAgICAgIGAgICAgJHtjaGFsa1NjaGVtZS53aGl0ZShcIlNVQ0NFU1MhXCIpfSAgICBgXG4gICAgICAgICl9ICR7dGhpcy5wYXJzZWRDb25maWcuZmlkZWxpdHl9IHRlc3Qgc2FtcGxlcyB3ZXJlIHRha2VuLmA7XG5cbiAgICAgICAgdGhpcy5sb2coYFxcbiR7bWVzc2FnZX1gKTtcblxuICAgICAgICBpZiAoIWhpZGVBbmFseXNpcykge1xuICAgICAgICAgIHRoaXMuYW5hbHl6ZWRKU09OU3RyaW5nID0gYXdhaXQgQ29tcGFyZUFuYWx5emUucnVuKFtcbiAgICAgICAgICAgIHJlc3VsdEpTT05QYXRoLFxuICAgICAgICAgICAgXCItLWZpZGVsaXR5XCIsXG4gICAgICAgICAgICBgJHt0aGlzLnBhcnNlZENvbmZpZy5maWRlbGl0eX1gLFxuICAgICAgICAgICAgXCItLXRiUmVzdWx0c0ZvbGRlclwiLFxuICAgICAgICAgICAgYCR7dGhpcy5wYXJzZWRDb25maWcudGJSZXN1bHRzRm9sZGVyfWAsXG4gICAgICAgICAgICBcIi0tcmVncmVzc2lvblRocmVzaG9sZFwiLFxuICAgICAgICAgICAgYCR7dGhpcy5wYXJzZWRDb25maWcucmVncmVzc2lvblRocmVzaG9sZH1gLFxuICAgICAgICAgICAgXCItLWlzQ0lFbnZcIixcbiAgICAgICAgICAgIGAke3RoaXMucGFyc2VkQ29uZmlnLmlzQ0lFbnZ9YCxcbiAgICAgICAgICBdKTtcblxuICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICAgICAgICBgJHt0aGlzLnBhcnNlZENvbmZpZy50YlJlc3VsdHNGb2xkZXJ9L3JlcG9ydC5qc29uYCxcbiAgICAgICAgICAgIHRoaXMuYW5hbHl6ZWRKU09OU3RyaW5nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdlIHdhbnQgdG8gcnVuIHRoZSBSZXBvcnQgd2l0aG91dCBjYWxsaW5nIGEgc2VwYXJhdGUgY29tbWFuZFxuICAgICAgICBpZiAodGhpcy5wYXJzZWRDb25maWcucmVwb3J0KSB7XG4gICAgICAgICAgYXdhaXQgUmVwb3J0LnJ1bihbXG4gICAgICAgICAgICBcIi0tdGJSZXN1bHRzRm9sZGVyXCIsXG4gICAgICAgICAgICBgJHt0aGlzLnBhcnNlZENvbmZpZy50YlJlc3VsdHNGb2xkZXJ9YCxcbiAgICAgICAgICAgIFwiLS1jb25maWdcIixcbiAgICAgICAgICAgIGAke3RoaXMucGFyc2VkQ29uZmlnLmNvbmZpZ31gLFxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2l0aCBkZWJ1ZyBmbGFnIG91dHB1dCB0aHJlZSBmaWxlc1xuICAgICAgICAvLyBvbiBjb25maWcgc3BlY2lmaWNzXG4gICAgICAgIGlmICh0aGlzLnBhcnNlZENvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICAgICAgICBgJHt0aGlzLnBhcnNlZENvbmZpZy50YlJlc3VsdHNGb2xkZXJ9L3NlcnZlci1jb250cm9sLXNldHRpbmdzLmpzb25gLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbihjb250cm9sU2V0dGluZ3MpLCBudWxsLCAyKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKFxuICAgICAgICAgICAgYCR7dGhpcy5wYXJzZWRDb25maWcudGJSZXN1bHRzRm9sZGVyfS9zZXJ2ZXItZXhwZXJpbWVudC1zZXR0aW5ncy5qc29uYCxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oZXhwZXJpbWVudFNldHRpbmdzKSwgbnVsbCwgMilcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhcbiAgICAgICAgICAgIGAke3RoaXMucGFyc2VkQ29uZmlnLnRiUmVzdWx0c0ZvbGRlcn0vY29tcGFyZS1mbGFncy1zZXR0aW5ncy5qc29uYCxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24odGhpcy5wYXJzZWRDb25maWcpLCBudWxsLCAyKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuYW5hbHl6ZWRKU09OU3RyaW5nO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwYXJzZUZsYWdzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRiUmVzdWx0c0ZvbGRlcixcbiAgICAgIGZpZGVsaXR5LFxuICAgICAgbWFya2VycyxcbiAgICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQsXG4gICAgICBoZWFkbGVzcyxcbiAgICAgIGNvbnRyb2xVUkwsXG4gICAgICBleHBlcmltZW50VVJMLFxuICAgIH0gPSAodGhpcy5wYXJzZWRDb25maWcgYXMgdW5rbm93bikgYXMgSUNvbXBhcmVGbGFncztcblxuICAgIC8vIG1vZGlmaWVzIHByb3BlcnRpZXMgb2YgZmxhZ3MgdGhhdCB3ZXJlIG5vdCBzZXRcbiAgICAvLyBkdXJpbmcgZmxhZy5wYXJzZSgpLiB0aGVzZSBhcmUgaW50ZW50aW9uYWxseVxuICAgIC8vIG5vdCBkZWNvbnN0cnVjdGVkIGFzIHRvIG1haW50YWluIHRoZSBtdXRhYmxlXG4gICAgLy8gZmxhZ3Mgb2JqZWN0IHN0YXRlXG4gICAgaWYgKHR5cGVvZiBmaWRlbGl0eSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5jb21wYXJlRmxhZ3MuZmlkZWxpdHkgPSBwYXJzZUludChcbiAgICAgICAgKGZpZGVsaXR5TG9va3VwIGFzIGFueSlbZmlkZWxpdHldLFxuICAgICAgICAxMFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtYXJrZXJzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnBhcnNlZENvbmZpZy5tYXJrZXJzID0gcGFyc2VNYXJrZXJzKG1hcmtlcnMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlZ3Jlc3Npb25UaHJlc2hvbGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMucGFyc2VkQ29uZmlnLnJlZ3Jlc3Npb25UaHJlc2hvbGQgPSBwYXJzZUludChyZWdyZXNzaW9uVGhyZXNob2xkLCAxMCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29udHJvbFVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmVycm9yKFxuICAgICAgICBcImNvbnRyb2xVUkwgaXMgcmVxdWlyZWQgZWl0aGVyIGluIHRoZSB0YmNvbmZpZy5qc29uIG9yIGFzIGNsaSBmbGFnXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBleHBlcmltZW50VVJMID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZXJyb3IoXG4gICAgICAgIFwiZXhwZXJpbWVudFVSTCBpcyByZXF1aXJlZCBlaXRoZXIgaW4gdGhlIHRiY29uZmlnLmpzb24gb3IgYXMgY2xpIGZsYWdcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBpZiBoZWFkbGVzcyBmbGFnIGlzIHRydWUgaW5jbHVkZSB0aGUgaGVhZGxlc3MgZmxhZ3NcbiAgICBpZiAoaGVhZGxlc3MpIHtcbiAgICAgIHRoaXMucGFyc2VkQ29uZmlnLmJyb3dzZXJBcmdzID0gdGhpcy5jb21wYXJlRmxhZ3MuYnJvd3NlckFyZ3MuY29uY2F0KFxuICAgICAgICBoZWFkbGVzc0ZsYWdzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSBmb2xkZXIgZm9yIHRoZSB0cmFjZXJiZW5jaCByZXN1bHRzIGZpbGVcbiAgICAvLyBkb2VzIG5vdCBleGlzdCB0aGVuIGNyZWF0ZSBpdFxuICAgIGZzLm1rZGlycFN5bmMocGF0aC5qb2luKHRiUmVzdWx0c0ZvbGRlciwgXCJ0cmFjZXNcIikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmFsIHJlc3VsdCBvZiB0aGUgY29uZmlncyBhcmUgaW4gdGhlIGZvbGxvd2luZyBvcmRlcjpcbiAgICpcbiAgICogY29udHJvbENvbmZpZ3MgPSB0YmNvbmZpZzpjb250cm9sQmVuY2htYXJrRW52aXJvbm1lbnQgPiBjb21tYW5kIGxpbmUgPiB0YmNvbmZpZyA+IGRlZmF1bHRcbiAgICogZXhwZXJpbWVudENvbmZpZ3MgPSB0YmNvbmZpZzpleHBlcmltZW50QmVuY2htYXJrRW52aXJvbm1lbnQgPiBjb21tYW5kIGxpbmUgPiB0YmNvbmZpZyA+IGRlZmF1bHRcbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbnMgaGFuZGxlcyB0aGUgdHNjb25maWc6KiogcGFydCBzaW5jZSBpdCBpcyBhc3N1bWVkIHRoYXQgcGFyZW50IGZ1bmN0aW9uIHRoYXQgcGFzc2VkIGlucHV0IFwiZmxhZ3NcIlxuICAgKiB3b3VsZCd2ZSBoYW5kbGVkIFwiY29tbWFuZCBsaW5lID4gdGJjb25maWcgPiBkZWZhdWx0XCJcbiAgICpcbiAgICogQHBhcmFtIHRoaXMucGFyc2VkQ29uZmlnIC0gT2JqZWN0IGNvbnRhaW5pbmcgY29uZmlncyBwYXJzZWQgZnJvbSB0aGUgQ29tbWFuZCBjbGFzc1xuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNvbnRyb2xFeHBlcmltZW50U2VydmVyQ29uZmlnKCk6IFtcbiAgICBJSW5pdGlhbFJlbmRlckJlbmNobWFya1BhcmFtcyxcbiAgICBJSW5pdGlhbFJlbmRlckJlbmNobWFya1BhcmFtc1xuICBdIHtcbiAgICAvLyBkZWxheSBpbiBtcyB0aW1lcyB0aGUgbnVtYmVyIG9mIHNhbXBsZXMuIHRoaXMgaW1wcm92ZXMgdmFyaWFuY2UuXG4gICAgLy8gZWcgMTAwIHRvdGFsIHNhbXBsZXMgWCAyMDBtcyBwZXIgc2FtcGxlID0gMjAgc2Vjb25kcyB0b3RhbCBhZGRlZCB0byB0aGUgdHJhY2UgdGltZVxuICAgIGNvbnN0IGRlbGF5ID0gMjAwO1xuICAgIGNvbnN0IGNvbnRyb2xCcm93c2VyID0ge1xuICAgICAgYWRkaXRpb25hbEFyZ3VtZW50czogdGhpcy5jb21wYXJlRmxhZ3MuYnJvd3NlckFyZ3MsXG4gICAgfTtcbiAgICBjb25zdCBleHBlcmltZW50QnJvd3NlciA9IHtcbiAgICAgIGFkZGl0aW9uYWxBcmd1bWVudHM6IHRoaXMuY29tcGFyZUZsYWdzLmJyb3dzZXJBcmdzLFxuICAgIH07XG5cbiAgICAvLyBjb25maWcgZm9yIHRoZSBicm93c2VycyB0byBsZXZlcmFnZSBzb2NrcyBwcm94eVxuICAgIGlmICh0aGlzLnBhcnNlZENvbmZpZy5zb2Nrc1BvcnRzKSB7XG4gICAgICBjb250cm9sQnJvd3Nlci5hZGRpdGlvbmFsQXJndW1lbnRzID0gY29udHJvbEJyb3dzZXIuYWRkaXRpb25hbEFyZ3VtZW50cy5jb25jYXQoXG4gICAgICAgIFtgLS1wcm94eS1zZXJ2ZXI9c29ja3M1Oi8vMC4wLjAuMDoke3RoaXMucGFyc2VkQ29uZmlnLnNvY2tzUG9ydHNbMF19YF1cbiAgICAgICk7XG4gICAgICBleHBlcmltZW50QnJvd3Nlci5hZGRpdGlvbmFsQXJndW1lbnRzID0gZXhwZXJpbWVudEJyb3dzZXIuYWRkaXRpb25hbEFyZ3VtZW50cy5jb25jYXQoXG4gICAgICAgIFtgLS1wcm94eS1zZXJ2ZXI9c29ja3M1Oi8vMC4wLjAuMDoke3RoaXMucGFyc2VkQ29uZmlnLnNvY2tzUG9ydHNbMV19YF1cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2xOZXR3b3JrOiBzdHJpbmcgPSBjaGVja0Vudmlyb25tZW50U3BlY2lmaWNPdmVycmlkZShcbiAgICAgIFwibmV0d29ya1wiLFxuICAgICAgdGhpcy5jb21wYXJlRmxhZ3MsXG4gICAgICBDT05UUk9MX0VOVl9PVkVSUklERV9BVFRSLFxuICAgICAgdGhpcy5wYXJzZWRDb25maWdcbiAgICApO1xuICAgIGNvbnN0IGNvbnRyb2xFbXVsYXRlRGV2aWNlID0gY2hlY2tFbnZpcm9ubWVudFNwZWNpZmljT3ZlcnJpZGUoXG4gICAgICBcImVtdWxhdGVEZXZpY2VcIixcbiAgICAgIHRoaXMuY29tcGFyZUZsYWdzLFxuICAgICAgQ09OVFJPTF9FTlZfT1ZFUlJJREVfQVRUUixcbiAgICAgIHRoaXMucGFyc2VkQ29uZmlnXG4gICAgKTtcbiAgICBjb25zdCBjb250cm9sRW11bGF0ZURldmljZU9yaWVudGF0aW9uID0gY2hlY2tFbnZpcm9ubWVudFNwZWNpZmljT3ZlcnJpZGUoXG4gICAgICBcImVtdWxhdGVEZXZpY2VPcmllbnRhdGlvblwiLFxuICAgICAgdGhpcy5jb21wYXJlRmxhZ3MsXG4gICAgICBDT05UUk9MX0VOVl9PVkVSUklERV9BVFRSLFxuICAgICAgdGhpcy5wYXJzZWRDb25maWdcbiAgICApO1xuICAgIGNvbnN0IGV4cGVyaW1lbnROZXR3b3JrOiBzdHJpbmcgPSBjaGVja0Vudmlyb25tZW50U3BlY2lmaWNPdmVycmlkZShcbiAgICAgIFwibmV0d29ya1wiLFxuICAgICAgdGhpcy5jb21wYXJlRmxhZ3MsXG4gICAgICBFWFBFUklNRU5UX0VOVl9PVkVSUklERV9BVFRSLFxuICAgICAgdGhpcy5wYXJzZWRDb25maWdcbiAgICApO1xuICAgIGNvbnN0IGV4cGVyaW1lbnRFbXVsYXRlRGV2aWNlID0gY2hlY2tFbnZpcm9ubWVudFNwZWNpZmljT3ZlcnJpZGUoXG4gICAgICBcImVtdWxhdGVEZXZpY2VcIixcbiAgICAgIHRoaXMuY29tcGFyZUZsYWdzLFxuICAgICAgRVhQRVJJTUVOVF9FTlZfT1ZFUlJJREVfQVRUUixcbiAgICAgIHRoaXMucGFyc2VkQ29uZmlnXG4gICAgKTtcbiAgICBjb25zdCBleHBlcmltZW50RW11bGF0ZURldmljZU9yaWVudGF0aW9uID0gY2hlY2tFbnZpcm9ubWVudFNwZWNpZmljT3ZlcnJpZGUoXG4gICAgICBcImVtdWxhdGVEZXZpY2VPcmllbnRhdGlvblwiLFxuICAgICAgdGhpcy5jb21wYXJlRmxhZ3MsXG4gICAgICBFWFBFUklNRU5UX0VOVl9PVkVSUklERV9BVFRSLFxuICAgICAgdGhpcy5wYXJzZWRDb25maWdcbiAgICApO1xuXG4gICAgY29uc3QgY29udHJvbFNldHRpbmdzOiBJSW5pdGlhbFJlbmRlckJlbmNobWFya1BhcmFtcyA9IHtcbiAgICAgIGJyb3dzZXI6IGNvbnRyb2xCcm93c2VyLFxuICAgICAgY3B1VGhyb3R0bGVSYXRlOiBjaGVja0Vudmlyb25tZW50U3BlY2lmaWNPdmVycmlkZShcbiAgICAgICAgXCJjcHVUaHJvdHRsZVJhdGVcIixcbiAgICAgICAgdGhpcy5jb21wYXJlRmxhZ3MsXG4gICAgICAgIENPTlRST0xfRU5WX09WRVJSSURFX0FUVFIsXG4gICAgICAgIHRoaXMucGFyc2VkQ29uZmlnXG4gICAgICApLFxuICAgICAgZGVsYXksXG4gICAgICBlbXVsYXRlRGV2aWNlU2V0dGluZ3M6IGNvbnRyb2xFbXVsYXRlRGV2aWNlXG4gICAgICAgID8gZ2V0RW11bGF0ZURldmljZVNldHRpbmdGb3JLZXlBbmRPcmllbnRhdGlvbihcbiAgICAgICAgICAgIGNvbnRyb2xFbXVsYXRlRGV2aWNlLFxuICAgICAgICAgICAgY29udHJvbEVtdWxhdGVEZXZpY2VPcmllbnRhdGlvblxuICAgICAgICAgIClcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICBtYXJrZXJzOiB0aGlzLmNvbXBhcmVGbGFncy5tYXJrZXJzLFxuICAgICAgbmV0d29ya0NvbmRpdGlvbnM6IGNvbnRyb2xOZXR3b3JrXG4gICAgICAgID8gbmV0d29ya0NvbmRpdGlvbnNbY29udHJvbE5ldHdvcmsgYXMga2V5b2YgdHlwZW9mIG5ldHdvcmtDb25kaXRpb25zXVxuICAgICAgICA6IHRoaXMuY29tcGFyZUZsYWdzLm5ldHdvcmssXG4gICAgICBuYW1lOiBcImNvbnRyb2xcIixcbiAgICAgIHJ1bnRpbWVTdGF0czogdGhpcy5jb21wYXJlRmxhZ3MucnVudGltZVN0YXRzLFxuICAgICAgc2F2ZVRyYWNlczogKGkpID0+XG4gICAgICAgIGAke3RoaXMuY29tcGFyZUZsYWdzLnRiUmVzdWx0c0ZvbGRlcn0vdHJhY2VzL2NvbnRyb2wke2l9Lmpzb25gLFxuICAgICAgdXJsOiBwYXRoLmpvaW4oXG4gICAgICAgIHRoaXMuY29tcGFyZUZsYWdzLmNvbnRyb2xVUkwgKyB0aGlzLmNvbXBhcmVGbGFncy50cmFjaW5nTG9jYXRpb25TZWFyY2hcbiAgICAgICksXG4gICAgfTtcblxuICAgIGNvbnN0IGV4cGVyaW1lbnRTZXR0aW5nczogSUluaXRpYWxSZW5kZXJCZW5jaG1hcmtQYXJhbXMgPSB7XG4gICAgICBicm93c2VyOiBleHBlcmltZW50QnJvd3NlcixcbiAgICAgIGNwdVRocm90dGxlUmF0ZTogY2hlY2tFbnZpcm9ubWVudFNwZWNpZmljT3ZlcnJpZGUoXG4gICAgICAgIFwiY3B1VGhyb3R0bGVSYXRlXCIsXG4gICAgICAgIHRoaXMuY29tcGFyZUZsYWdzLFxuICAgICAgICBFWFBFUklNRU5UX0VOVl9PVkVSUklERV9BVFRSLFxuICAgICAgICB0aGlzLnBhcnNlZENvbmZpZ1xuICAgICAgKSxcbiAgICAgIGRlbGF5LFxuICAgICAgZW11bGF0ZURldmljZVNldHRpbmdzOiBleHBlcmltZW50RW11bGF0ZURldmljZVxuICAgICAgICA/IGdldEVtdWxhdGVEZXZpY2VTZXR0aW5nRm9yS2V5QW5kT3JpZW50YXRpb24oXG4gICAgICAgICAgICBleHBlcmltZW50RW11bGF0ZURldmljZSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRFbXVsYXRlRGV2aWNlT3JpZW50YXRpb25cbiAgICAgICAgICApXG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgbWFya2VyczogdGhpcy5jb21wYXJlRmxhZ3MubWFya2VycyxcbiAgICAgIG5ldHdvcmtDb25kaXRpb25zOiBleHBlcmltZW50TmV0d29ya1xuICAgICAgICA/IG5ldHdvcmtDb25kaXRpb25zW2V4cGVyaW1lbnROZXR3b3JrIGFzIGtleW9mIHR5cGVvZiBuZXR3b3JrQ29uZGl0aW9uc11cbiAgICAgICAgOiB0aGlzLmNvbXBhcmVGbGFncy5uZXR3b3JrLFxuICAgICAgbmFtZTogXCJleHBlcmltZW50XCIsXG4gICAgICBydW50aW1lU3RhdHM6IHRoaXMuY29tcGFyZUZsYWdzLnJ1bnRpbWVTdGF0cyxcbiAgICAgIHNhdmVUcmFjZXM6IChpKSA9PlxuICAgICAgICBgJHt0aGlzLmNvbXBhcmVGbGFncy50YlJlc3VsdHNGb2xkZXJ9L3RyYWNlcy9leHBlcmltZW50JHtpfS5qc29uYCxcbiAgICAgIHVybDogcGF0aC5qb2luKFxuICAgICAgICB0aGlzLmNvbXBhcmVGbGFncy5leHBlcmltZW50VVJMICtcbiAgICAgICAgICB0aGlzLmNvbXBhcmVGbGFncy50cmFjaW5nTG9jYXRpb25TZWFyY2hcbiAgICAgICksXG4gICAgfTtcblxuICAgIHJldHVybiBbY29udHJvbFNldHRpbmdzLCBleHBlcmltZW50U2V0dGluZ3NdO1xuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,