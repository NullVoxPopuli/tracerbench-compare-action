{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts"],"names":[],"mappings":";;AAIA,uCAAwC;AAExC,yDAAqD;AACrD,6CAAiD;AACjD,+CAA6E;AAC7E,2EAAsE;AAQtE,MAAqB,cAAe,SAAQ,8BAAa;IAUvD,YAAY,IAAc,EAAE,MAAe;QACzC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,uBAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,OAAO,MAAM,uCAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAEO,UAAU,CAAC,cAAiC;QAClD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAEzD,OAAO;YACL,QAAQ;YACR,mBAAmB;YACnB,OAAO;SACR,CAAC;IACJ,CAAC;;AA9BH,iCA+BC;AA9Be,0BAAW,GAAG,uEAAuE,CAAC;AAEtF,mBAAI,GAAG,CAAC,kBAAW,CAAC,CAAC;AACrB,oBAAK,GAAG;IACpB,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,mBAAmB,EAAE,2BAAmB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5D,OAAO,EAAE,eAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;CACrC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable filenames/match-exported */\nimport { IConfig } from \"@oclif/config\";\nimport * as Parser from \"@oclif/parser\";\nimport { readJsonSync } from \"fs-extra\";\n\nimport { TBBaseCommand } from \"../../command-config\";\nimport { resultsFile } from \"../../helpers/args\";\nimport { fidelity, isCIEnv, regressionThreshold } from \"../../helpers/flags\";\nimport { logCompareResults } from \"../../helpers/log-compare-results\";\n\nexport interface CompareAnalyzeFlags {\n  fidelity: number;\n  regressionThreshold: number;\n  isCIEnv: boolean;\n}\n\nexport default class CompareAnalyze extends TBBaseCommand {\n  public static description = `Generates stdout report from the \"tracerbench compare\" command output`;\n\n  public static args = [resultsFile];\n  public static flags = {\n    fidelity: fidelity({ required: true }),\n    regressionThreshold: regressionThreshold({ required: true }),\n    isCIEnv: isCIEnv({ required: true }),\n  };\n  public typedFlags: CompareAnalyzeFlags;\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    this.typedFlags = this.parseFlags(CompareAnalyze);\n  }\n\n  public async run(): Promise<string> {\n    const { args } = this.parse(CompareAnalyze);\n    const results = readJsonSync(args.resultsFile);\n    return await logCompareResults(results, this.typedFlags, this);\n  }\n\n  private parseFlags(CompareAnalyze: Parser.Input<any>): CompareAnalyzeFlags {\n    const { flags } = this.parse(CompareAnalyze);\n    const { fidelity, regressionThreshold, isCIEnv } = flags;\n\n    return {\n      fidelity,\n      regressionThreshold,\n      isCIEnv,\n    };\n  }\n}\n"]}