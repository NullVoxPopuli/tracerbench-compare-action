"use strict";function cov_hiy6j0wk4(){var path="/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts";var hash="58dc08d4137d4ffbf26f492dbc987718b2081070";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:5,column:18},end:{line:5,column:43}},"2":{start:{line:6,column:15},end:{line:6,column:43}},"3":{start:{line:7,column:28},end:{line:7,column:74}},"4":{start:{line:8,column:26},end:{line:8,column:54}},"5":{start:{line:9,column:16},end:{line:9,column:34}},"6":{start:{line:17,column:0},end:{line:28,column:3}},"7":{start:{line:19,column:19},end:{line:19,column:65}},"8":{start:{line:22,column:8},end:{line:24,column:9}},"9":{start:{line:23,column:12},end:{line:23,column:22}},"10":{start:{line:26,column:8},end:{line:26,column:29}},"11":{start:{line:29,column:0},end:{line:32,column:3}},"12":{start:{line:33,column:0},end:{line:36,column:3}},"13":{start:{line:37,column:0},end:{line:39,column:3}},"14":{start:{line:40,column:0},end:{line:43,column:3}},"15":{start:{line:41,column:19},end:{line:41,column:67}},"16":{start:{line:44,column:0},end:{line:46,column:3}},"17":{start:{line:47,column:0},end:{line:50,column:3}},"18":{start:{line:51,column:0},end:{line:54,column:3}},"19":{start:{line:55,column:0},end:{line:58,column:3}},"20":{start:{line:59,column:0},end:{line:65,column:3}},"21":{start:{line:60,column:19},end:{line:60,column:77}},"22":{start:{line:63,column:8},end:{line:63,column:32}},"23":{start:{line:66,column:0},end:{line:72,column:3}},"24":{start:{line:67,column:19},end:{line:67,column:69}},"25":{start:{line:70,column:8},end:{line:70,column:28}},"26":{start:{line:73,column:0},end:{line:76,column:3}},"27":{start:{line:74,column:19},end:{line:74,column:79}},"28":{start:{line:77,column:0},end:{line:80,column:3}},"29":{start:{line:78,column:19},end:{line:78,column:65}},"30":{start:{line:81,column:0},end:{line:84,column:3}},"31":{start:{line:82,column:19},end:{line:82,column:63}},"32":{start:{line:85,column:0},end:{line:88,column:3}},"33":{start:{line:86,column:19},end:{line:86,column:65}},"34":{start:{line:89,column:0},end:{line:95,column:3}},"35":{start:{line:90,column:19},end:{line:90,column:73}},"36":{start:{line:93,column:8},end:{line:93,column:45}},"37":{start:{line:96,column:0},end:{line:116,column:3}},"38":{start:{line:97,column:19},end:{line:97,column:66}},"39":{start:{line:100,column:28},end:{line:100,column:211}},"40":{start:{line:101,column:8},end:{line:113,column:9}},"41":{start:{line:103,column:12},end:{line:105,column:13}},"42":{start:{line:104,column:16},end:{line:104,column:46}},"43":{start:{line:107,column:12},end:{line:112,column:13}},"44":{start:{line:108,column:16},end:{line:108,column:82}},"45":{start:{line:111,column:16},end:{line:111,column:47}},"46":{start:{line:114,column:8},end:{line:114,column:98}},"47":{start:{line:117,column:0},end:{line:121,column:3}},"48":{start:{line:118,column:19},end:{line:118,column:65}},"49":{start:{line:122,column:0},end:{line:145,column:3}},"50":{start:{line:123,column:19},end:{line:123,column:65}},"51":{start:{line:143,column:8},end:{line:143,column:43}},"52":{start:{line:146,column:0},end:{line:149,column:3}},"53":{start:{line:147,column:19},end:{line:147,column:73}},"54":{start:{line:150,column:0},end:{line:153,column:3}},"55":{start:{line:151,column:19},end:{line:151,column:61}},"56":{start:{line:154,column:0},end:{line:157,column:3}},"57":{start:{line:155,column:19},end:{line:155,column:68}},"58":{start:{line:158,column:0},end:{line:161,column:3}},"59":{start:{line:159,column:19},end:{line:159,column:71}},"60":{start:{line:162,column:0},end:{line:174,column:3}},"61":{start:{line:163,column:19},end:{line:163,column:68}},"62":{start:{line:166,column:8},end:{line:172,column:9}},"63":{start:{line:167,column:22},end:{line:167,column:34}},"64":{start:{line:168,column:12},end:{line:170,column:13}},"65":{start:{line:169,column:16},end:{line:169,column:75}},"66":{start:{line:171,column:12},end:{line:171,column:60}},"67":{start:{line:175,column:0},end:{line:179,column:3}},"68":{start:{line:176,column:19},end:{line:176,column:71}},"69":{start:{line:178,column:56},end:{line:178,column:77}},"70":{start:{line:180,column:0},end:{line:184,column:3}},"71":{start:{line:181,column:19},end:{line:181,column:82}},"72":{start:{line:185,column:0},end:{line:188,column:3}},"73":{start:{line:187,column:19},end:{line:187,column:69}},"74":{start:{line:189,column:0},end:{line:191,column:3}},"75":{start:{line:192,column:0},end:{line:194,column:3}},"76":{start:{line:195,column:0},end:{line:198,column:3}},"77":{start:{line:196,column:19},end:{line:196,column:62}},"78":{start:{line:199,column:0},end:{line:201,column:3}},"79":{start:{line:202,column:0},end:{line:205,column:3}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:13},end:{line:19,column:14}},loc:{start:{line:19,column:19},end:{line:19,column:65}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:11},end:{line:20,column:12}},loc:{start:{line:20,column:19},end:{line:27,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:13},end:{line:41,column:14}},loc:{start:{line:41,column:19},end:{line:41,column:67}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:60,column:13},end:{line:60,column:14}},loc:{start:{line:60,column:19},end:{line:60,column:77}},line:60},"4":{name:"(anonymous_4)",decl:{start:{line:62,column:11},end:{line:62,column:12}},loc:{start:{line:62,column:19},end:{line:64,column:5}},line:62},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:13},end:{line:67,column:14}},loc:{start:{line:67,column:19},end:{line:67,column:69}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:69,column:11},end:{line:69,column:12}},loc:{start:{line:69,column:18},end:{line:71,column:5}},line:69},"7":{name:"(anonymous_7)",decl:{start:{line:74,column:13},end:{line:74,column:14}},loc:{start:{line:74,column:19},end:{line:74,column:79}},line:74},"8":{name:"(anonymous_8)",decl:{start:{line:78,column:13},end:{line:78,column:14}},loc:{start:{line:78,column:19},end:{line:78,column:65}},line:78},"9":{name:"(anonymous_9)",decl:{start:{line:82,column:13},end:{line:82,column:14}},loc:{start:{line:82,column:19},end:{line:82,column:63}},line:82},"10":{name:"(anonymous_10)",decl:{start:{line:86,column:13},end:{line:86,column:14}},loc:{start:{line:86,column:19},end:{line:86,column:65}},line:86},"11":{name:"(anonymous_11)",decl:{start:{line:90,column:13},end:{line:90,column:14}},loc:{start:{line:90,column:19},end:{line:90,column:73}},line:90},"12":{name:"(anonymous_12)",decl:{start:{line:92,column:11},end:{line:92,column:12}},loc:{start:{line:92,column:32},end:{line:94,column:5}},line:92},"13":{name:"(anonymous_13)",decl:{start:{line:97,column:13},end:{line:97,column:14}},loc:{start:{line:97,column:19},end:{line:97,column:66}},line:97},"14":{name:"(anonymous_14)",decl:{start:{line:99,column:11},end:{line:99,column:12}},loc:{start:{line:99,column:25},end:{line:115,column:5}},line:99},"15":{name:"(anonymous_15)",decl:{start:{line:118,column:13},end:{line:118,column:14}},loc:{start:{line:118,column:19},end:{line:118,column:65}},line:118},"16":{name:"(anonymous_16)",decl:{start:{line:123,column:13},end:{line:123,column:14}},loc:{start:{line:123,column:19},end:{line:123,column:65}},line:123},"17":{name:"(anonymous_17)",decl:{start:{line:142,column:11},end:{line:142,column:12}},loc:{start:{line:142,column:18},end:{line:144,column:5}},line:142},"18":{name:"(anonymous_18)",decl:{start:{line:147,column:13},end:{line:147,column:14}},loc:{start:{line:147,column:19},end:{line:147,column:73}},line:147},"19":{name:"(anonymous_19)",decl:{start:{line:151,column:13},end:{line:151,column:14}},loc:{start:{line:151,column:19},end:{line:151,column:61}},line:151},"20":{name:"(anonymous_20)",decl:{start:{line:155,column:13},end:{line:155,column:14}},loc:{start:{line:155,column:19},end:{line:155,column:68}},line:155},"21":{name:"(anonymous_21)",decl:{start:{line:159,column:13},end:{line:159,column:14}},loc:{start:{line:159,column:19},end:{line:159,column:71}},line:159},"22":{name:"(anonymous_22)",decl:{start:{line:163,column:13},end:{line:163,column:14}},loc:{start:{line:163,column:19},end:{line:163,column:68}},line:163},"23":{name:"(anonymous_23)",decl:{start:{line:165,column:11},end:{line:165,column:12}},loc:{start:{line:165,column:18},end:{line:173,column:5}},line:165},"24":{name:"(anonymous_24)",decl:{start:{line:176,column:13},end:{line:176,column:14}},loc:{start:{line:176,column:19},end:{line:176,column:71}},line:176},"25":{name:"(anonymous_25)",decl:{start:{line:178,column:43},end:{line:178,column:44}},loc:{start:{line:178,column:56},end:{line:178,column:77}},line:178},"26":{name:"(anonymous_26)",decl:{start:{line:181,column:13},end:{line:181,column:14}},loc:{start:{line:181,column:19},end:{line:181,column:82}},line:181},"27":{name:"(anonymous_27)",decl:{start:{line:187,column:13},end:{line:187,column:14}},loc:{start:{line:187,column:19},end:{line:187,column:69}},line:187},"28":{name:"(anonymous_28)",decl:{start:{line:196,column:13},end:{line:196,column:14}},loc:{start:{line:196,column:19},end:{line:196,column:62}},line:196}},branchMap:{"0":{loc:{start:{line:22,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:22,column:8},end:{line:24,column:9}},{start:{line:22,column:8},end:{line:24,column:9}}],line:22},"1":{loc:{start:{line:101,column:8},end:{line:113,column:9}},type:"if",locations:[{start:{line:101,column:8},end:{line:113,column:9}},{start:{line:101,column:8},end:{line:113,column:9}}],line:101},"2":{loc:{start:{line:103,column:12},end:{line:105,column:13}},type:"if",locations:[{start:{line:103,column:12},end:{line:105,column:13}},{start:{line:103,column:12},end:{line:105,column:13}}],line:103},"3":{loc:{start:{line:107,column:12},end:{line:112,column:13}},type:"if",locations:[{start:{line:107,column:12},end:{line:112,column:13}},{start:{line:107,column:12},end:{line:112,column:13}}],line:107},"4":{loc:{start:{line:114,column:15},end:{line:114,column:97}},type:"cond-expr",locations:[{start:{line:114,column:39},end:{line:114,column:47}},{start:{line:114,column:50},end:{line:114,column:97}}],line:114},"5":{loc:{start:{line:166,column:8},end:{line:172,column:9}},type:"if",locations:[{start:{line:166,column:8},end:{line:172,column:9}},{start:{line:166,column:8},end:{line:172,column:9}}],line:166},"6":{loc:{start:{line:168,column:12},end:{line:170,column:13}},type:"if",locations:[{start:{line:168,column:12},end:{line:170,column:13}},{start:{line:168,column:12},end:{line:170,column:13}}],line:168}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts"],names:[],mappings:";;AAAA,uDAAuD;AACvD,8BAA8B;AAC9B,4CAAuC;AACvC,4CAAsD;AAGtD,2EAG6C;AAC7C,uDAE2B;AAC3B,mCAAuC;AACvC;;;;;;EAME;AACW,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,WAAW,EAAE,qGAAqG;IAClH,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,SAAS,CAAC;IACzC,KAAK,EAAE,CAAC,EAAE,EAAW,EAAE;QACrB,oBAAoB;QACpB,IAAI,OAAO,EAAE,KAAK,SAAS,EAAE;YAC3B,OAAO,EAAE,CAAC;SACX;QACD,iCAAiC;QACjC,OAAO,EAAE,KAAK,MAAM,CAAC;IACvB,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,eAAK,CAAC,OAAO,CAAC;IACvC,WAAW,EAAE,kCAAkC;IAC/C,OAAO,EAAE,IAAI;CACd,CAAC,CAAC;AAEU,QAAA,YAAY,GAAG,eAAK,CAAC,OAAO,CAAC;IACxC,WAAW,EAAE,oDAAoD;IACjE,OAAO,EAAE,KAAK;CACf,CAAC,CAAC;AAEU,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,WAAW,EAAE,kIAAkI;CAChJ,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,eAAK,CAAC,KAAK,CAAC;IACnC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,WAAW,CAAC;IAC3C,WAAW,EAAE,2CAA2C;CACzD,CAAC,CAAC;AAEU,QAAA,MAAM,GAAG,eAAK,CAAC,KAAK,CAAC;IAChC,WAAW,EAAE,+HAA+H;CAC7I,CAAC,CAAC;AAEU,QAAA,MAAM,GAAG,eAAK,CAAC,OAAO,CAAC;IAClC,WAAW,EAAE,mEAAmE;IAChF,OAAO,EAAE,KAAK;CACf,CAAC,CAAC;AAEU,QAAA,QAAQ,GAAG,eAAK,CAAC,OAAO,CAAC;IACpC,WAAW,EAAE,gCAAgC;IAC7C,OAAO,EAAE,KAAK;CACf,CAAC,CAAC;AAEU,QAAA,KAAK,GAAG,eAAK,CAAC,OAAO,CAAC;IACjC,WAAW,EAAE,mDAAmD;IAChE,OAAO,EAAE,KAAK;CACf,CAAC,CAAC;AAEU,QAAA,mBAAmB,GAAG,eAAK,CAAC,KAAK,CAAC;IAC7C,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,qBAAqB,CAAC;IACrD,WAAW,EAAE,2EAA2E;IACxF,KAAK,EAAE,CAAC,EAAE,EAAU,EAAE;QACpB,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1B,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,eAAK,CAAC,KAAK,CAAC;IACrC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,aAAa,CAAC;IAC7C,WAAW,EAAE,2JAA2J;IACxK,KAAK,EAAE,CAAC,CAAC,EAAY,EAAE;QACrB,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,qBAAqB,GAAG,eAAK,CAAC,KAAK,CAAC;IAC/C,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,uBAAuB,CAAC;IACvD,WAAW,EAAE,qCAAqC;CACnD,CAAC,CAAC;AAEU,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,SAAS,CAAC;IACzC,WAAW,EAAE,8BAA8B;CAC5C,CAAC,CAAC;AAEU,QAAA,KAAK,GAAG,eAAK,CAAC,KAAK,CAAC;IAC/B,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,OAAO,CAAC;IACvC,WAAW,EAAE,+DAA+D;CAC7E,CAAC,CAAC;AAEU,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,SAAS,CAAC;IACzC,WAAW,EAAE,8BAA8B;CAC5C,CAAC,CAAC;AAEU,QAAA,eAAe,GAAG,eAAK,CAAC,KAAK,CAAC;IACzC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,iBAAiB,CAAC;IACjD,WAAW,EAAE,yBAAyB;IACtC,KAAK,EAAE,CAAC,eAAe,EAAU,EAAE;QACjC,OAAO,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,QAAQ,GAAG,eAAK,CAAC,KAAK,CAAC;IAClC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,UAAU,CAAC;IAC1C,WAAW,EAAE,yFAAyF;IACtG,KAAK,EAAE,CAAC,QAAyB,EAAU,EAAE;QAC3C,MAAM,WAAW,GAAG,uBAAuB,QAAQ,qCAAqC,MAAM,CAAC,IAAI,CACjG,kCAAc,CACf,mBAAmB,mCAAe,CAAC,UAAU,CAAC,EAAE,CAAC;QAElD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,2CAA2C;YAC3C,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE;gBAC5C,OAAO,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aAC/B;YACD,8CAA8C;YAC9C,IAAI,MAAM,CAAC,IAAI,CAAC,kCAAc,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAClD,OAAO,QAAQ,CAAE,kCAAsB,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;aACxD;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC;aAChC;SACF;QACD,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,mCAAe,CAAC,UAAU,CAAC,CAAC;IACxE,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,SAAS,CAAC;IACzC,WAAW,EAAE,qBAAqB;IAClC,KAAK,EAAE,oBAAY;CACpB,CAAC,CAAC;AAEU,QAAA,OAAO,GAAG,eAAK,CAAC,KAAK,CAAC;IACjC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,SAAS,CAAC;IACzC,WAAW,EAAE,+BAA+B;IAC5C,OAAO,EAAE;QACP,MAAM;QACN,SAAS;QACT,QAAQ;QACR,SAAS;QACT,IAAI;QACJ,WAAW;QACX,MAAM;QACN,SAAS;QACT,KAAK;QACL,IAAI;QACJ,SAAS;QACT,IAAI;QACJ,OAAO;QACP,KAAK;QACL,MAAM;KACP;IACD,KAAK,EAAE,CAAC,CAAS,EAAoD,EAAE;QACrE,OAAO,wBAAiB,CAAC,CAAmC,CAAC,CAAC;IAChE,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,eAAe,GAAG,eAAK,CAAC,KAAK,CAAC;IACzC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,iBAAiB,CAAC;IACjD,WAAW,EAAE,oDAAoD;CAClE,CAAC,CAAC;AAEU,QAAA,GAAG,GAAG,eAAK,CAAC,KAAK,CAAC;IAC7B,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,KAAK,CAAC;IACrC,WAAW,EAAE,uDAAuD;CACrE,CAAC,CAAC;AAEU,QAAA,UAAU,GAAG,eAAK,CAAC,KAAK,CAAC;IACpC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,YAAY,CAAC;IAC5C,WAAW,EAAE,0CAA0C;CACxD,CAAC,CAAC;AAEU,QAAA,aAAa,GAAG,eAAK,CAAC,KAAK,CAAC;IACvC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,eAAe,CAAC;IAC/C,WAAW,EAAE,6CAA6C;CAC3D,CAAC,CAAC;AAEU,QAAA,UAAU,GAAG,eAAK,CAAC,KAAK,CAAC;IACpC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,YAAY,CAAC;IAC5C,WAAW,EACT,yEAAyE;IAC3E,KAAK,EAAE,CAAC,CAAS,EAAgC,EAAE;QACjD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChB,OAAO,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;aAC5D;YAED,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAqB,CAAC;SACrE;IACH,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,aAAa,GAAG,eAAK,CAAC,KAAK,CAAC;IACvC,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,eAAe,CAAC;IAC/C,WAAW,EAAE,sCAAsC;IACnD,OAAO,EAAE,yBAAc,CAAC,GAAG,CACzB,CAAC,OAAsC,EAAE,EAAE,CAAC,GAAG,OAAO,CAAC,QAAQ,EAAE,CAClE;CACF,CAAC,CAAC;AAEU,QAAA,wBAAwB,GAAG,eAAK,CAAC,KAAK,CAAC;IAClD,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,0BAA0B,CAAC;IAC1D,WAAW,EAAE,0FAA0F;IACvG,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;CACpC,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,eAAK,CAAC,KAAK,CAAC;IACrC,WAAW,EAAE,uFAAuF;IACpG,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,aAAa,CAAC;CAC9C,CAAC,CAAC;AAEU,QAAA,YAAY,GAAG,eAAK,CAAC,KAAK,CAAC;IACtC,WAAW,EAAE,8DAA8D;CAC5E,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,eAAK,CAAC,KAAK,CAAC;IACnC,WAAW,EAAE,2CAA2C;CACzD,CAAC,CAAC;AAEU,QAAA,IAAI,GAAG,eAAK,CAAC,KAAK,CAAC;IAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,mCAAe,CAAC,MAAM,CAAC;IACtC,WAAW,EAAE,6CAA6C;CAC3D,CAAC,CAAC;AAEU,QAAA,QAAQ,GAAG,eAAK,CAAC,KAAK,CAAC;IAClC,WAAW,EAAE,qCAAqC;CACnD,CAAC,CAAC;AAEU,QAAA,MAAM,GAAG,eAAK,CAAC,KAAK,CAAC;IAChC,WAAW,EAAE,+CAA+C;IAC5D,OAAO,EAAE,cAAc;CACxB,CAAC,CAAC",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint:disable:no-console*/\nimport { flags } from \"@oclif/command\";\nimport { networkConditions } from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\n\nimport {\n  fidelityLookup,\n  getDefaultValue,\n} from \"../command-config/default-flag-args\";\nimport deviceSettings, {\n  EmulateDeviceSettingCliOption,\n} from \"./device-settings\";\nimport { parseMarkers } from \"./utils\";\n/*\n! oclif flags.build#parse will only execute when the flag:string is passed directly\n! from the cli. thus when passed via the tbconfig.json or the defaultFlagArgs\n! the parse method will never execute\n! todo: mitigate above by either extending the flags oclif command calling parse\n! and type checking in all circumstances\n*/\nexport const isCIEnv = flags.build({\n  description: `Provides a drastically slimmed down stdout report for CI workflows. However does NOT hide analysis.`,\n  default: () => getDefaultValue(\"isCIEnv\"),\n  parse: (ci): boolean => {\n    // if boolean return\n    if (typeof ci === \"boolean\") {\n      return ci;\n    }\n    // if string return boolean value\n    return ci === \"true\";\n  },\n});\n\nexport const usertimings = flags.boolean({\n  description: `Included stdout of user-timings.`,\n  default: true,\n});\n\nexport const runtimeStats = flags.boolean({\n  description: `Compare command output deep-dive stats during run.`,\n  default: false,\n});\n\nexport const servers = flags.build({\n  description: `Optional servers config for A/B testing with har-remix dist slicing with socks proxy. All paths within this config are relative.`,\n});\n\nexport const plotTitle = flags.build({\n  default: () => getDefaultValue(\"plotTitle\"),\n  description: `Specify the title of the report pdf file.`,\n});\n\nexport const config = flags.build({\n  description: `Specify an alternative directory rather than the project root for the tbconfig.json. This explicit config will overwrite all.`,\n});\n\nexport const report = flags.boolean({\n  description: `Generate a PDF report directly after running the compare command.`,\n  default: false,\n});\n\nexport const headless = flags.boolean({\n  description: `Run with headless chrome flags`,\n  default: false,\n});\n\nexport const debug = flags.boolean({\n  description: `Debug flag per command. Will output noisy command`,\n  default: false,\n});\n\nexport const regressionThreshold = flags.build({\n  default: () => getDefaultValue(\"regressionThreshold\"),\n  description: `The upper limit the experiment can regress slower in milliseconds. eg 100`,\n  parse: (ms): number => {\n    return parseInt(ms, 10);\n  },\n});\n\nexport const browserArgs = flags.build({\n  default: () => getDefaultValue(\"browserArgs\"),\n  description: `(Default Recommended) Additional chrome flags for the TracerBench render benchmark. TracerBench includes many non-configurable defaults in this category.`,\n  parse: (s): string[] => {\n    return s.split(\",\");\n  },\n});\n\nexport const tracingLocationSearch = flags.build({\n  default: () => getDefaultValue(\"tracingLocationSearch\"),\n  description: `The document location search param.`,\n});\n\nexport const appName = flags.build({\n  default: () => getDefaultValue(\"appName\"),\n  description: \"The name of your application\",\n});\n\nexport const event = flags.build({\n  default: () => getDefaultValue(\"event\"),\n  description: \"Slice time and see the events before and after the time slice\",\n});\n\nexport const methods = flags.build({\n  default: () => getDefaultValue(\"methods\"),\n  description: \"List of methods to aggregate\",\n});\n\nexport const cpuThrottleRate = flags.build({\n  default: () => getDefaultValue(\"cpuThrottleRate\"),\n  description: \"CPU throttle multiplier\",\n  parse: (cpuThrottleRate): number => {\n    return parseInt(cpuThrottleRate, 10);\n  },\n});\n\nexport const fidelity = flags.build({\n  default: () => getDefaultValue(\"fidelity\"),\n  description: `Directly correlates to the number of samples per trace. High is the longest trace time.`,\n  parse: (fidelity: string | number): number => {\n    const warnMessage = `Expected --fidelity=${fidelity} to be either a number or one of: ${Object.keys(\n      fidelityLookup\n    )}. Defaulting to ${getDefaultValue(\"fidelity\")}`;\n\n    if (typeof fidelity === \"string\") {\n      // integers are coming as string from oclif\n      if (Number.isInteger(parseInt(fidelity, 10))) {\n        return parseInt(fidelity, 10);\n      }\n      // is a string and is either test/low/med/high\n      if (Object.keys(fidelityLookup).includes(fidelity)) {\n        return parseInt((fidelityLookup as any)[fidelity], 10);\n      } else {\n        console.warn(`${warnMessage}`);\n      }\n    }\n    return fidelity === \"number\" ? fidelity : getDefaultValue(\"fidelity\");\n  },\n});\n\nexport const markers = flags.build({\n  default: () => getDefaultValue(\"markers\"),\n  description: \"User Timing Markers\",\n  parse: parseMarkers,\n});\n\nexport const network = flags.build({\n  default: () => getDefaultValue(\"network\"),\n  description: \"Simulated network conditions.\",\n  options: [\n    \"none\",\n    \"offline\",\n    \"dialup\",\n    \"slow-2g\",\n    \"2g\",\n    \"slow-edge\",\n    \"edge\",\n    \"slow-3g\",\n    \"dsl\",\n    \"3g\",\n    \"fast-3g\",\n    \"4g\",\n    \"cable\",\n    \"LTE\",\n    \"FIOS\",\n  ],\n  parse: (n: string): Protocol.Network.EmulateNetworkConditionsRequest => {\n    return networkConditions[n as keyof typeof networkConditions];\n  },\n});\n\nexport const tbResultsFolder = flags.build({\n  default: () => getDefaultValue(\"tbResultsFolder\"),\n  description: \"The output folder path for all tracerbench results\",\n});\n\nexport const url = flags.build({\n  default: () => getDefaultValue(\"url\"),\n  description: \"URL to visit for record-har, timings & trace commands\",\n});\n\nexport const controlURL = flags.build({\n  default: () => getDefaultValue(\"controlURL\"),\n  description: \"Control URL to visit for compare command\",\n});\n\nexport const experimentURL = flags.build({\n  default: () => getDefaultValue(\"experimentURL\"),\n  description: \"Experiment URL to visit for compare command\",\n});\n\nexport const socksPorts = flags.build({\n  default: () => getDefaultValue(\"socksPorts\"),\n  description:\n    \"Specify a socks proxy port as browser option for control and experiment\",\n  parse: (s: string): [number, number] | undefined => {\n    if (typeof s === \"string\") {\n      const a = s.split(\",\");\n      if (a.length > 2) {\n        console.error(`Maximium of two socks ports can be passed`);\n      }\n\n      return [parseInt(a[0], 10), parseInt(a[1], 10)] as [number, number];\n    }\n  },\n});\n\nexport const emulateDevice = flags.build({\n  default: () => getDefaultValue(\"emulateDevice\"),\n  description: `Emulate a mobile device screen size.`,\n  options: deviceSettings.map(\n    (setting: EmulateDeviceSettingCliOption) => `${setting.typeable}`\n  ),\n});\n\nexport const emulateDeviceOrientation = flags.build({\n  default: () => getDefaultValue(\"emulateDeviceOrientation\"),\n  description: `Expected to be either \"vertical\" or \"horizontal\". Dictates orientation of device screen.`,\n  options: [\"horizontal\", \"vertical\"],\n});\n\nexport const cookiespath = flags.build({\n  description: `The path to a JSON file containing cookies to authenticate against the correlated URL`,\n  default: () => getDefaultValue(\"cookiespath\"),\n});\n\nexport const tbconfigpath = flags.build({\n  description: `The path to a TracerBench configuration file (tbconfig.json)`,\n});\n\nexport const tracepath = flags.build({\n  description: `The path to the generated trace.json file`,\n});\n\nexport const dest = flags.build({\n  default: () => getDefaultValue(\"dest\"),\n  description: `The destination path for the generated file`,\n});\n\nexport const filename = flags.build({\n  description: `The filename for the generated file`,\n});\n\nexport const marker = flags.build({\n  description: `The last marker before ending a HAR recording`,\n  default: \"loadEventEnd\",\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"58dc08d4137d4ffbf26f492dbc987718b2081070"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_hiy6j0wk4=function(){return actualCoverage;};return actualCoverage;}cov_hiy6j0wk4().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint:disable:no-console*/const command_1=(cov_hiy6j0wk4().s[1]++,require("@oclif/command"));const core_1=(cov_hiy6j0wk4().s[2]++,require("@tracerbench/core"));const default_flag_args_1=(cov_hiy6j0wk4().s[3]++,require("../command-config/default-flag-args"));const device_settings_1=(cov_hiy6j0wk4().s[4]++,require("./device-settings"));const utils_1=(cov_hiy6j0wk4().s[5]++,require("./utils"));/*
! oclif flags.build#parse will only execute when the flag:string is passed directly
! from the cli. thus when passed via the tbconfig.json or the defaultFlagArgs
! the parse method will never execute
! todo: mitigate above by either extending the flags oclif command calling parse
! and type checking in all circumstances
*/cov_hiy6j0wk4().s[6]++;exports.isCIEnv=command_1.flags.build({description:`Provides a drastically slimmed down stdout report for CI workflows. However does NOT hide analysis.`,default:()=>{cov_hiy6j0wk4().f[0]++;cov_hiy6j0wk4().s[7]++;return default_flag_args_1.getDefaultValue("isCIEnv");},parse:ci=>{cov_hiy6j0wk4().f[1]++;cov_hiy6j0wk4().s[8]++;// if boolean return
if(typeof ci==="boolean"){cov_hiy6j0wk4().b[0][0]++;cov_hiy6j0wk4().s[9]++;return ci;}else{cov_hiy6j0wk4().b[0][1]++;}// if string return boolean value
cov_hiy6j0wk4().s[10]++;return ci==="true";}});cov_hiy6j0wk4().s[11]++;exports.usertimings=command_1.flags.boolean({description:`Included stdout of user-timings.`,default:true});cov_hiy6j0wk4().s[12]++;exports.runtimeStats=command_1.flags.boolean({description:`Compare command output deep-dive stats during run.`,default:false});cov_hiy6j0wk4().s[13]++;exports.servers=command_1.flags.build({description:`Optional servers config for A/B testing with har-remix dist slicing with socks proxy. All paths within this config are relative.`});cov_hiy6j0wk4().s[14]++;exports.plotTitle=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[2]++;cov_hiy6j0wk4().s[15]++;return default_flag_args_1.getDefaultValue("plotTitle");},description:`Specify the title of the report pdf file.`});cov_hiy6j0wk4().s[16]++;exports.config=command_1.flags.build({description:`Specify an alternative directory rather than the project root for the tbconfig.json. This explicit config will overwrite all.`});cov_hiy6j0wk4().s[17]++;exports.report=command_1.flags.boolean({description:`Generate a PDF report directly after running the compare command.`,default:false});cov_hiy6j0wk4().s[18]++;exports.headless=command_1.flags.boolean({description:`Run with headless chrome flags`,default:false});cov_hiy6j0wk4().s[19]++;exports.debug=command_1.flags.boolean({description:`Debug flag per command. Will output noisy command`,default:false});cov_hiy6j0wk4().s[20]++;exports.regressionThreshold=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[3]++;cov_hiy6j0wk4().s[21]++;return default_flag_args_1.getDefaultValue("regressionThreshold");},description:`The upper limit the experiment can regress slower in milliseconds. eg 100`,parse:ms=>{cov_hiy6j0wk4().f[4]++;cov_hiy6j0wk4().s[22]++;return parseInt(ms,10);}});cov_hiy6j0wk4().s[23]++;exports.browserArgs=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[5]++;cov_hiy6j0wk4().s[24]++;return default_flag_args_1.getDefaultValue("browserArgs");},description:`(Default Recommended) Additional chrome flags for the TracerBench render benchmark. TracerBench includes many non-configurable defaults in this category.`,parse:s=>{cov_hiy6j0wk4().f[6]++;cov_hiy6j0wk4().s[25]++;return s.split(",");}});cov_hiy6j0wk4().s[26]++;exports.tracingLocationSearch=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[7]++;cov_hiy6j0wk4().s[27]++;return default_flag_args_1.getDefaultValue("tracingLocationSearch");},description:`The document location search param.`});cov_hiy6j0wk4().s[28]++;exports.appName=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[8]++;cov_hiy6j0wk4().s[29]++;return default_flag_args_1.getDefaultValue("appName");},description:"The name of your application"});cov_hiy6j0wk4().s[30]++;exports.event=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[9]++;cov_hiy6j0wk4().s[31]++;return default_flag_args_1.getDefaultValue("event");},description:"Slice time and see the events before and after the time slice"});cov_hiy6j0wk4().s[32]++;exports.methods=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[10]++;cov_hiy6j0wk4().s[33]++;return default_flag_args_1.getDefaultValue("methods");},description:"List of methods to aggregate"});cov_hiy6j0wk4().s[34]++;exports.cpuThrottleRate=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[11]++;cov_hiy6j0wk4().s[35]++;return default_flag_args_1.getDefaultValue("cpuThrottleRate");},description:"CPU throttle multiplier",parse:cpuThrottleRate=>{cov_hiy6j0wk4().f[12]++;cov_hiy6j0wk4().s[36]++;return parseInt(cpuThrottleRate,10);}});cov_hiy6j0wk4().s[37]++;exports.fidelity=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[13]++;cov_hiy6j0wk4().s[38]++;return default_flag_args_1.getDefaultValue("fidelity");},description:`Directly correlates to the number of samples per trace. High is the longest trace time.`,parse:fidelity=>{cov_hiy6j0wk4().f[14]++;const warnMessage=(cov_hiy6j0wk4().s[39]++,`Expected --fidelity=${fidelity} to be either a number or one of: ${Object.keys(default_flag_args_1.fidelityLookup)}. Defaulting to ${default_flag_args_1.getDefaultValue("fidelity")}`);cov_hiy6j0wk4().s[40]++;if(typeof fidelity==="string"){cov_hiy6j0wk4().b[1][0]++;cov_hiy6j0wk4().s[41]++;// integers are coming as string from oclif
if(Number.isInteger(parseInt(fidelity,10))){cov_hiy6j0wk4().b[2][0]++;cov_hiy6j0wk4().s[42]++;return parseInt(fidelity,10);}else{cov_hiy6j0wk4().b[2][1]++;}// is a string and is either test/low/med/high
cov_hiy6j0wk4().s[43]++;if(Object.keys(default_flag_args_1.fidelityLookup).includes(fidelity)){cov_hiy6j0wk4().b[3][0]++;cov_hiy6j0wk4().s[44]++;return parseInt(default_flag_args_1.fidelityLookup[fidelity],10);}else{cov_hiy6j0wk4().b[3][1]++;cov_hiy6j0wk4().s[45]++;console.warn(`${warnMessage}`);}}else{cov_hiy6j0wk4().b[1][1]++;}cov_hiy6j0wk4().s[46]++;return fidelity==="number"?(cov_hiy6j0wk4().b[4][0]++,fidelity):(cov_hiy6j0wk4().b[4][1]++,default_flag_args_1.getDefaultValue("fidelity"));}});cov_hiy6j0wk4().s[47]++;exports.markers=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[15]++;cov_hiy6j0wk4().s[48]++;return default_flag_args_1.getDefaultValue("markers");},description:"User Timing Markers",parse:utils_1.parseMarkers});cov_hiy6j0wk4().s[49]++;exports.network=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[16]++;cov_hiy6j0wk4().s[50]++;return default_flag_args_1.getDefaultValue("network");},description:"Simulated network conditions.",options:["none","offline","dialup","slow-2g","2g","slow-edge","edge","slow-3g","dsl","3g","fast-3g","4g","cable","LTE","FIOS"],parse:n=>{cov_hiy6j0wk4().f[17]++;cov_hiy6j0wk4().s[51]++;return core_1.networkConditions[n];}});cov_hiy6j0wk4().s[52]++;exports.tbResultsFolder=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[18]++;cov_hiy6j0wk4().s[53]++;return default_flag_args_1.getDefaultValue("tbResultsFolder");},description:"The output folder path for all tracerbench results"});cov_hiy6j0wk4().s[54]++;exports.url=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[19]++;cov_hiy6j0wk4().s[55]++;return default_flag_args_1.getDefaultValue("url");},description:"URL to visit for record-har, timings & trace commands"});cov_hiy6j0wk4().s[56]++;exports.controlURL=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[20]++;cov_hiy6j0wk4().s[57]++;return default_flag_args_1.getDefaultValue("controlURL");},description:"Control URL to visit for compare command"});cov_hiy6j0wk4().s[58]++;exports.experimentURL=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[21]++;cov_hiy6j0wk4().s[59]++;return default_flag_args_1.getDefaultValue("experimentURL");},description:"Experiment URL to visit for compare command"});cov_hiy6j0wk4().s[60]++;exports.socksPorts=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[22]++;cov_hiy6j0wk4().s[61]++;return default_flag_args_1.getDefaultValue("socksPorts");},description:"Specify a socks proxy port as browser option for control and experiment",parse:s=>{cov_hiy6j0wk4().f[23]++;cov_hiy6j0wk4().s[62]++;if(typeof s==="string"){cov_hiy6j0wk4().b[5][0]++;const a=(cov_hiy6j0wk4().s[63]++,s.split(","));cov_hiy6j0wk4().s[64]++;if(a.length>2){cov_hiy6j0wk4().b[6][0]++;cov_hiy6j0wk4().s[65]++;console.error(`Maximium of two socks ports can be passed`);}else{cov_hiy6j0wk4().b[6][1]++;}cov_hiy6j0wk4().s[66]++;return[parseInt(a[0],10),parseInt(a[1],10)];}else{cov_hiy6j0wk4().b[5][1]++;}}});cov_hiy6j0wk4().s[67]++;exports.emulateDevice=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[24]++;cov_hiy6j0wk4().s[68]++;return default_flag_args_1.getDefaultValue("emulateDevice");},description:`Emulate a mobile device screen size.`,options:device_settings_1.default.map(setting=>{cov_hiy6j0wk4().f[25]++;cov_hiy6j0wk4().s[69]++;return`${setting.typeable}`;})});cov_hiy6j0wk4().s[70]++;exports.emulateDeviceOrientation=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[26]++;cov_hiy6j0wk4().s[71]++;return default_flag_args_1.getDefaultValue("emulateDeviceOrientation");},description:`Expected to be either "vertical" or "horizontal". Dictates orientation of device screen.`,options:["horizontal","vertical"]});cov_hiy6j0wk4().s[72]++;exports.cookiespath=command_1.flags.build({description:`The path to a JSON file containing cookies to authenticate against the correlated URL`,default:()=>{cov_hiy6j0wk4().f[27]++;cov_hiy6j0wk4().s[73]++;return default_flag_args_1.getDefaultValue("cookiespath");}});cov_hiy6j0wk4().s[74]++;exports.tbconfigpath=command_1.flags.build({description:`The path to a TracerBench configuration file (tbconfig.json)`});cov_hiy6j0wk4().s[75]++;exports.tracepath=command_1.flags.build({description:`The path to the generated trace.json file`});cov_hiy6j0wk4().s[76]++;exports.dest=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[28]++;cov_hiy6j0wk4().s[77]++;return default_flag_args_1.getDefaultValue("dest");},description:`The destination path for the generated file`});cov_hiy6j0wk4().s[78]++;exports.filename=command_1.flags.build({description:`The filename for the generated file`});cov_hiy6j0wk4().s[79]++;exports.marker=command_1.flags.build({description:`The last marker before ending a HAR recording`,default:"loadEventEnd"});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,