{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport {\n  analyze,\n  IAnalyze,\n  IConditions,\n  ITraceEvent,\n  liveTrace,\n  loadTrace,\n} from \"@tracerbench/core\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  harpath,\n  insights,\n  iterations,\n  locations,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  isCommitLoad,\n  normalizeFnName,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\nexport default class Trace extends TBBaseCommand {\n  public static description = `Parses a CPU profile and aggregates time across heuristics. Can be vertically sliced with event names.`;\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    harpath: harpath({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    iterations: iterations({ required: true }),\n    locations: locations(),\n    insights,\n  };\n\n  public async run() {\n    const { flags } = this.parse(Trace);\n    const {\n      url,\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      insights,\n      locations,\n      network,\n      harpath,\n    } = flags;\n\n    const methods = [\"\"];\n    const cookiesJSON = await readJson(path.resolve(cookiespath));\n    const traceHAR = path.resolve(harpath);\n    const traceHARJSON = await readJson(traceHAR);\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    try {\n      if (!existsSync(tbResultsFolder)) {\n        mkdirSync(tbResultsFolder);\n      }\n    } catch (error) {\n      this.error(error);\n    }\n    // write the trace.json\n    writeFileSync(\n      path.join(tbResultsFolder, \"trace.json\"),\n      JSON.stringify(traceHARJSON, null, 2)\n    );\n\n    // run the liveTrace\n    const { traceEvents } = await liveTrace(\n      url,\n      tbResultsFolder,\n      cookiesJSON,\n      conditions\n    );\n\n    const analyzeOptions: IAnalyze = {\n      traceEvents,\n      traceHARJSON,\n      methods,\n    };\n\n    // analyze the liveTrace\n    await analyze(analyzeOptions);\n\n    if (insights) {\n      // js-eval-time\n      let trace: any;\n      let totalJSDuration = 0;\n      let totalCSSDuration = 0;\n\n      const methods = new Set();\n\n      try {\n        trace = setTraceEvents(traceEvents);\n      } catch (error) {\n        this.error(`${error}`);\n      }\n\n      trace\n        .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n        .filter((event: any) => event.args.data.url)\n        .forEach((event: any) => {\n          const url = event.args.data.url;\n          const durationInMs = (event.dur as number) / 1000;\n          totalJSDuration += durationInMs;\n          this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);\n        });\n\n      // log js-eval-time\n      this.log(\n        `JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \\n\\n`\n      );\n\n      // css-parse\n      trace\n        .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n        .filter((event: any) => event.args.data.styleSheetUrl)\n        .forEach((event: any) => {\n          const url = event.args.data.styleSheetUrl;\n          const durationInMs = event.dur / 1000;\n          totalCSSDuration += durationInMs;\n          this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);\n        });\n\n      // log css-parse-time\n      this.log(\n        `CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \\n\\n`\n      );\n\n      // list-functions\n      try {\n        const profile = loadTrace(trace).cpuProfile(-1, -1);\n        if (locations) {\n          profile.nodeMap.forEach((node: any) => {\n            const {\n              functionName,\n              url,\n              lineNumber,\n              columnNumber,\n            } = node.callFrame;\n\n            methods.add(\n              `${url}:${lineNumber}:${columnNumber}.${normalizeFnName(\n                functionName\n              )}`\n            );\n          });\n        } else {\n          profile.nodeMap.forEach((node: any) => {\n            methods.add(normalizeFnName(node.callFrame.functionName));\n          });\n        }\n      } catch (error) {\n        this.error(error);\n      }\n\n      try {\n        trace = setTraceEvents(traceEvents);\n        const traceLoad = trace.filter(isCommitLoad);\n        traceLoad.forEach(\n          ({\n            args: {\n              data: { frame, url },\n            },\n          }: {\n            args: { data: { frame: any; url: any } };\n          }) => {\n            this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);\n          }\n        );\n      } catch (error) {\n        this.error(`${error}`);\n      }\n    }\n  }\n}\n"]}