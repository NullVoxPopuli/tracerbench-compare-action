"use strict";function cov_1skb92i4ln(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts";var hash="029999835f34171300ca20f4a19e4329266b0901";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:14},end:{line:6,column:30}},"4":{start:{line:7,column:15},end:{line:7,column:30}},"5":{start:{line:8,column:25},end:{line:8,column:53}},"6":{start:{line:9,column:15},end:{line:9,column:41}},"7":{start:{line:10,column:16},end:{line:10,column:43}},"8":{start:{line:11,column:16},end:{line:11,column:43}},"9":{start:{line:14,column:8},end:{line:14,column:28}},"10":{start:{line:15,column:8},end:{line:15,column:24}},"11":{start:{line:18,column:32},end:{line:18,column:51}},"12":{start:{line:19,column:98},end:{line:19,column:103}},"13":{start:{line:20,column:28},end:{line:20,column:32}},"14":{start:{line:21,column:24},end:{line:28,column:9}},"15":{start:{line:29,column:27},end:{line:32,column:9}},"16":{start:{line:33,column:22},end:{line:121,column:10}},"17":{start:{line:38,column:20},end:{line:40,column:34}},"18":{start:{line:48,column:20},end:{line:55,column:21}},"19":{start:{line:49,column:24},end:{line:51,column:25}},"20":{start:{line:50,column:28},end:{line:50,column:66}},"21":{start:{line:54,column:24},end:{line:54,column:42}},"22":{start:{line:62,column:20},end:{line:62,column:85}},"23":{start:{line:63,column:20},end:{line:63,column:83}},"24":{start:{line:64,column:20},end:{line:64,column:102}},"25":{start:{line:66,column:20},end:{line:66,column:68}},"26":{start:{line:68,column:24},end:{line:74,column:25}},"27":{start:{line:69,column:40},end:{line:69,column:78}},"28":{start:{line:70,column:28},end:{line:70,column:39}},"29":{start:{line:73,column:28},end:{line:73,column:141}},"30":{start:{line:81,column:45},end:{line:81,column:48}},"31":{start:{line:82,column:20},end:{line:89,column:21}},"32":{start:{line:84,column:48},end:{line:84,column:113}},"33":{start:{line:85,column:24},end:{line:85,column:54}},"34":{start:{line:88,column:24},end:{line:88,column:47}},"35":{start:{line:95,column:53},end:{line:95,column:56}},"36":{start:{line:96,column:20},end:{line:105,column:21}},"37":{start:{line:98,column:24},end:{line:101,column:27}},"38":{start:{line:104,column:24},end:{line:104,column:47}},"39":{start:{line:111,column:44},end:{line:111,column:47}},"40":{start:{line:113,column:20},end:{line:118,column:21}},"41":{start:{line:114,column:24},end:{line:114,column:73}},"42":{start:{line:117,column:24},end:{line:117,column:47}},"43":{start:{line:122,column:8},end:{line:138,column:11}},"44":{start:{line:125,column:12},end:{line:125,column:35}},"45":{start:{line:129,column:12},end:{line:129,column:55}},"46":{start:{line:131,column:12},end:{line:131,column:33}},"47":{start:{line:133,column:12},end:{line:133,column:34}},"48":{start:{line:135,column:12},end:{line:137,column:13}},"49":{start:{line:136,column:16},end:{line:136,column:69}},"50":{start:{line:141,column:8},end:{line:141,column:48}},"51":{start:{line:142,column:8},end:{line:142,column:43}},"52":{start:{line:143,column:8},end:{line:145,column:11}},"53":{start:{line:144,column:12},end:{line:144,column:34}},"54":{start:{line:148,column:30},end:{line:148,column:31}},"55":{start:{line:149,column:27},end:{line:149,column:29}},"56":{start:{line:150,column:8},end:{line:162,column:11}},"57":{start:{line:151,column:31},end:{line:151,column:62}},"58":{start:{line:152,column:31},end:{line:152,column:50}},"59":{start:{line:154,column:24},end:{line:154,column:43}},"60":{start:{line:155,column:33},end:{line:155,column:49}},"61":{start:{line:156,column:12},end:{line:156,column:44}},"62":{start:{line:157,column:12},end:{line:161,column:15}},"63":{start:{line:163,column:8},end:{line:163,column:84}},"64":{start:{line:165,column:8},end:{line:171,column:11}},"65":{start:{line:167,column:12},end:{line:167,column:43}},"66":{start:{line:170,column:12},end:{line:170,column:42}},"67":{start:{line:174,column:31},end:{line:174,column:32}},"68":{start:{line:175,column:28},end:{line:175,column:30}},"69":{start:{line:176,column:8},end:{line:188,column:11}},"70":{start:{line:177,column:31},end:{line:177,column:69}},"71":{start:{line:178,column:31},end:{line:178,column:60}},"72":{start:{line:180,column:24},end:{line:180,column:53}},"73":{start:{line:181,column:33},end:{line:181,column:49}},"74":{start:{line:182,column:12},end:{line:182,column:45}},"75":{start:{line:183,column:12},end:{line:187,column:15}},"76":{start:{line:189,column:8},end:{line:189,column:86}},"77":{start:{line:191,column:8},end:{line:197,column:11}},"78":{start:{line:193,column:12},end:{line:193,column:43}},"79":{start:{line:196,column:12},end:{line:196,column:42}},"80":{start:{line:202,column:24},end:{line:202,column:26}},"81":{start:{line:203,column:27},end:{line:203,column:31}},"82":{start:{line:205,column:27},end:{line:205,column:29}},"83":{start:{line:206,column:8},end:{line:208,column:9}},"84":{start:{line:207,column:12},end:{line:207,column:110}},"85":{start:{line:209,column:8},end:{line:214,column:9}},"86":{start:{line:210,column:12},end:{line:210,column:84}},"87":{start:{line:213,column:12},end:{line:213,column:26}},"88":{start:{line:215,column:8},end:{line:220,column:9}},"89":{start:{line:216,column:12},end:{line:216,column:63}},"90":{start:{line:219,column:12},end:{line:219,column:26}},"91":{start:{line:221,column:8},end:{line:226,column:9}},"92":{start:{line:222,column:12},end:{line:222,column:56}},"93":{start:{line:225,column:12},end:{line:225,column:24}},"94":{start:{line:227,column:8},end:{line:229,column:9}},"95":{start:{line:228,column:12},end:{line:228,column:140}},"96":{start:{line:230,column:8},end:{line:245,column:11}},"97":{start:{line:231,column:31},end:{line:231,column:83}},"98":{start:{line:234,column:12},end:{line:244,column:13}},"99":{start:{line:235,column:16},end:{line:235,column:37}},"100":{start:{line:236,column:16},end:{line:236,column:72}},"101":{start:{line:238,column:17},end:{line:244,column:13}},"102":{start:{line:240,column:16},end:{line:242,column:17}},"103":{start:{line:241,column:20},end:{line:241,column:27}},"104":{start:{line:243,column:16},end:{line:243,column:72}},"105":{start:{line:246,column:8},end:{line:246,column:42}},"106":{start:{line:249,column:8},end:{line:255,column:10}},"107":{start:{line:258,column:30},end:{line:258,column:72}},"108":{start:{line:259,column:8},end:{line:259,column:83}},"109":{start:{line:260,column:8},end:{line:266,column:11}},"110":{start:{line:261,column:12},end:{line:265,column:16}},"111":{start:{line:269,column:0},end:{line:269,column:26}},"112":{start:{line:271,column:0},end:{line:271,column:28}},"113":{start:{line:272,column:0},end:{line:272,column:84}},"114":{start:{line:273,column:0},end:{line:273,column:32}},"115":{start:{line:274,column:0},end:{line:281,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:18},end:{line:16,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:16},end:{line:139,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:22},end:{line:36,column:23}},loc:{start:{line:36,column:37},end:{line:41,column:17}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:22},end:{line:45,column:23}},loc:{start:{line:45,column:28},end:{line:56,column:17}},line:45},"4":{name:"(anonymous_4)",decl:{start:{line:60,column:22},end:{line:60,column:23}},loc:{start:{line:60,column:37},end:{line:76,column:17}},line:60},"5":{name:"getURLFromHAR",decl:{start:{line:67,column:29},end:{line:67,column:42}},loc:{start:{line:67,column:48},end:{line:75,column:21}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:22},end:{line:80,column:23}},loc:{start:{line:80,column:37},end:{line:90,column:17}},line:80},"7":{name:"(anonymous_7)",decl:{start:{line:94,column:22},end:{line:94,column:23}},loc:{start:{line:94,column:37},end:{line:106,column:17}},line:94},"8":{name:"(anonymous_8)",decl:{start:{line:110,column:22},end:{line:110,column:23}},loc:{start:{line:110,column:37},end:{line:119,column:17}},line:110},"9":{name:"(anonymous_9)",decl:{start:{line:124,column:19},end:{line:124,column:20}},loc:{start:{line:124,column:30},end:{line:126,column:9}},line:124},"10":{name:"(anonymous_10)",decl:{start:{line:127,column:18},end:{line:127,column:19}},loc:{start:{line:127,column:33},end:{line:138,column:9}},line:127},"11":{name:"(anonymous_11)",decl:{start:{line:140,column:4},end:{line:140,column:5}},loc:{start:{line:140,column:38},end:{line:146,column:5}},line:140},"12":{name:"(anonymous_12)",decl:{start:{line:143,column:48},end:{line:143,column:49}},loc:{start:{line:143,column:60},end:{line:145,column:9}},line:143},"13":{name:"(anonymous_13)",decl:{start:{line:147,column:4},end:{line:147,column:5}},loc:{start:{line:147,column:20},end:{line:172,column:5}},line:147},"14":{name:"(anonymous_14)",decl:{start:{line:151,column:20},end:{line:151,column:21}},loc:{start:{line:151,column:31},end:{line:151,column:62}},line:151},"15":{name:"(anonymous_15)",decl:{start:{line:152,column:20},end:{line:152,column:21}},loc:{start:{line:152,column:31},end:{line:152,column:50}},line:152},"16":{name:"(anonymous_16)",decl:{start:{line:153,column:21},end:{line:153,column:22}},loc:{start:{line:153,column:32},end:{line:162,column:9}},line:153},"17":{name:"(anonymous_17)",decl:{start:{line:166,column:18},end:{line:166,column:19}},loc:{start:{line:166,column:28},end:{line:168,column:9}},line:166},"18":{name:"(anonymous_18)",decl:{start:{line:169,column:21},end:{line:169,column:22}},loc:{start:{line:169,column:30},end:{line:171,column:9}},line:169},"19":{name:"(anonymous_19)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:21},end:{line:198,column:5}},line:173},"20":{name:"(anonymous_20)",decl:{start:{line:177,column:20},end:{line:177,column:21}},loc:{start:{line:177,column:31},end:{line:177,column:69}},line:177},"21":{name:"(anonymous_21)",decl:{start:{line:178,column:20},end:{line:178,column:21}},loc:{start:{line:178,column:31},end:{line:178,column:60}},line:178},"22":{name:"(anonymous_22)",decl:{start:{line:179,column:21},end:{line:179,column:22}},loc:{start:{line:179,column:32},end:{line:188,column:9}},line:179},"23":{name:"(anonymous_23)",decl:{start:{line:192,column:18},end:{line:192,column:19}},loc:{start:{line:192,column:28},end:{line:194,column:9}},line:192},"24":{name:"(anonymous_24)",decl:{start:{line:195,column:21},end:{line:195,column:22}},loc:{start:{line:195,column:30},end:{line:197,column:9}},line:195},"25":{name:"(anonymous_25)",decl:{start:{line:200,column:4},end:{line:200,column:5}},loc:{start:{line:200,column:44},end:{line:247,column:5}},line:200},"26":{name:"(anonymous_26)",decl:{start:{line:231,column:20},end:{line:231,column:21}},loc:{start:{line:231,column:31},end:{line:231,column:83}},line:231},"27":{name:"(anonymous_27)",decl:{start:{line:233,column:21},end:{line:233,column:22}},loc:{start:{line:233,column:32},end:{line:245,column:9}},line:233},"28":{name:"(anonymous_28)",decl:{start:{line:248,column:4},end:{line:248,column:5}},loc:{start:{line:248,column:38},end:{line:256,column:5}},line:248},"29":{name:"(anonymous_29)",decl:{start:{line:257,column:4},end:{line:257,column:5}},loc:{start:{line:257,column:33},end:{line:267,column:5}},line:257},"30":{name:"(anonymous_30)",decl:{start:{line:260,column:27},end:{line:260,column:28}},loc:{start:{line:260,column:36},end:{line:266,column:9}},line:260}},branchMap:{"0":{loc:{start:{line:38,column:34},end:{line:40,column:33}},type:"cond-expr",locations:[{start:{line:39,column:26},end:{line:39,column:80}},{start:{line:40,column:26},end:{line:40,column:33}}],line:38},"1":{loc:{start:{line:49,column:24},end:{line:51,column:25}},type:"if",locations:[{start:{line:49,column:24},end:{line:51,column:25}},{start:{line:49,column:24},end:{line:51,column:25}}],line:49},"2":{loc:{start:{line:66,column:30},end:{line:66,column:67}},type:"cond-expr",locations:[{start:{line:66,column:43},end:{line:66,column:46}},{start:{line:66,column:49},end:{line:66,column:67}}],line:66},"3":{loc:{start:{line:135,column:12},end:{line:137,column:13}},type:"if",locations:[{start:{line:135,column:12},end:{line:137,column:13}},{start:{line:135,column:12},end:{line:137,column:13}}],line:135},"4":{loc:{start:{line:206,column:8},end:{line:208,column:9}},type:"if",locations:[{start:{line:206,column:8},end:{line:208,column:9}},{start:{line:206,column:8},end:{line:208,column:9}}],line:206},"5":{loc:{start:{line:221,column:8},end:{line:226,column:9}},type:"if",locations:[{start:{line:221,column:8},end:{line:226,column:9}},{start:{line:221,column:8},end:{line:226,column:9}}],line:221},"6":{loc:{start:{line:227,column:8},end:{line:229,column:9}},type:"if",locations:[{start:{line:227,column:8},end:{line:229,column:9}},{start:{line:227,column:8},end:{line:229,column:9}}],line:227},"7":{loc:{start:{line:231,column:31},end:{line:231,column:83}},type:"binary-expr",locations:[{start:{line:231,column:31},end:{line:231,column:52}},{start:{line:231,column:56},end:{line:231,column:83}}],line:231},"8":{loc:{start:{line:234,column:12},end:{line:244,column:13}},type:"if",locations:[{start:{line:234,column:12},end:{line:244,column:13}},{start:{line:234,column:12},end:{line:244,column:13}}],line:234},"9":{loc:{start:{line:238,column:17},end:{line:244,column:13}},type:"if",locations:[{start:{line:238,column:17},end:{line:244,column:13}},{start:{line:238,column:17},end:{line:244,column:13}}],line:238},"10":{loc:{start:{line:238,column:21},end:{line:239,column:48}},type:"binary-expr",locations:[{start:{line:238,column:21},end:{line:238,column:54}},{start:{line:239,column:16},end:{line:239,column:48}}],line:238},"11":{loc:{start:{line:240,column:16},end:{line:242,column:17}},type:"if",locations:[{start:{line:240,column:16},end:{line:242,column:17}},{start:{line:240,column:16},end:{line:242,column:17}}],line:240}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  analyze,\n  IConditions,\n  ITraceEvent,\n  ITraceEventFrame,\n  liveTrace,\n} from \"@tracerbench/core\";\nimport { Archive } from \"@tracerbench/har\";\nimport Protocol from \"devtools-protocol\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  hideUsertimings,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  convertToSentCase,\n  findFrame,\n  formatToDuration,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  logBar,\n  logBarOptions,\n  logHeading,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\ninterface ProfileContext {\n  cookies: Protocol.Network.CookieParam[];\n  harJSON: Archive;\n  traceJSONPath: string;\n  traceEvents: ITraceEventFrame[];\n  url: string;\n  analyzeResults: { node: string; hierarchyReports: string[] };\n}\n\ntype markerLogMeta = {\n  name: string;\n  sentanceCaseName: string;\n  duration: number;\n  startTime: number;\n  bar: string;\n};\n\nexport default class Profile extends TBBaseCommand {\n  // include backwards compat to trace cmd\n  static aliases = [\"trace\"];\n  public trace: ITraceEventFrame[] = [];\n  public static description = `Parses a CPU profile and aggregates time across heuristics.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    hideUsertimings,\n  };\n\n  public async run(): Promise<void> {\n    const { flags, args } = this.parse(Profile);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      hideUsertimings,\n      url,\n    } = flags;\n    const { harpath } = args;\n    const cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n\n    const tasks = new listr([\n      {\n        title: \"Reading cookies json\",\n        task: async (ctx: ProfileContext) => {\n          // read cookies json file from path and set to context\n          ctx.cookies = cookiespath.length\n            ? await readJson(resolve(cookiespath))\n            : cookies;\n        },\n      },\n      {\n        title: \"Preparing results folder\",\n        task: () => {\n          // if the folder for the tracerbench results file\n          // does not exist then create it\n          try {\n            if (!existsSync(tbResultsFolder)) {\n              mkdirSync(tbResultsFolder);\n            }\n          } catch (error) {\n            this.error(error);\n          }\n        },\n      },\n      {\n        title: \"Validating & Cloning HAR file\",\n        task: async (ctx: ProfileContext) => {\n          // validate har and clone it to trace.json which will be mutated\n          ctx.harJSON = await readJson(resolve(harpath));\n          ctx.traceJSONPath = join(tbResultsFolder, \"trace.json\");\n          writeFileSync(\n            ctx.traceJSONPath,\n            JSON.stringify(ctx.harJSON, null, 2)\n          );\n          // if no url get url from har otherwise set with cmd url\n          ctx.url = url.length ? url : getURLFromHAR(ctx);\n\n          function getURLFromHAR(ctx: ProfileContext): string {\n            try {\n              const url = ctx.harJSON.log.entries[0].request.url;\n              return url;\n            } catch (error) {\n              throw new Error(\n                `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n              );\n            }\n          }\n        },\n      },\n      {\n        title: \"Recording the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { cookies, url } = ctx;\n          try {\n            // run the liveTrace\n            const { traceEvents } = await liveTrace(\n              url,\n              tbResultsFolder,\n              cookies,\n              conditions\n            );\n            ctx.traceEvents = traceEvents as ITraceEventFrame[];\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n      {\n        title: \"Analyzing the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents, harJSON } = ctx;\n\n          try {\n            // analyze the liveTrace\n            ctx.analyzeResults = await analyze({\n              traceEvents,\n              harJSON,\n            });\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n      {\n        title: \"Setting trace events\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents } = ctx;\n          // mutates this.trace\n          try {\n            this.trace = setTraceEvents(traceEvents);\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n    ]);\n\n    await tasks\n      .run()\n      .catch((error) => {\n        this.error(`${error}`);\n      })\n      .then(async (ctx) => {\n        // log logAnalyzeReports\n        this.logAnalyzeReports(ctx.analyzeResults);\n        // log js-eval-time\n        this.logJSEvalTime();\n        // log css-parse\n        this.logCSSEvalTime();\n        // log user timings\n        if (!hideUsertimings) {\n          await this.markerTimings(ctx.traceJSONPath, ctx.url);\n        }\n      });\n  }\n\n  private logAnalyzeReports(analyzeResults: {\n    node: string;\n    hierarchyReports: string[];\n  }): void {\n    logHeading(\"Hierarchy Reports\");\n    this.log(`${analyzeResults.node}`);\n    analyzeResults.hierarchyReports.forEach((report) => {\n      this.log(`${report}`);\n    });\n  }\n\n  private logJSEvalTime(): void {\n    let totalJSDuration = 0;\n    const jsEvalLogs: logBarOptions[] = [];\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = event.dur / 1000;\n        totalJSDuration += durationInMs;\n        jsEvalLogs.push({\n          totalDuration: totalJSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);\n\n    // log js-eval-time\n    jsEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  private logCSSEvalTime(): void {\n    let totalCSSDuration = 0;\n    const cssEvalLogs: logBarOptions[] = [];\n\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        cssEvalLogs.push({\n          totalDuration: totalCSSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);\n\n    // log css-parse-time\n    cssEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(\n    traceJSONPath: string,\n    url: string\n  ): Promise<void> {\n    let frame: string;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let customTrace: ITraceEventFrame[];\n    const markerLogs: markerLogMeta[] = [];\n\n    if (!url) {\n      this.error(\n        `Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n      );\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(traceJSONPath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      customTrace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (url.startsWith(\"http\")) {\n      frame = findFrame(customTrace, url);\n    } else {\n      frame = url;\n    }\n\n    if (!frame) {\n      this.error(\n        `Could not extract frame from trace. Explicitly opt-out of usertimings via \"--usertimings\" boolean flag and rerun.`\n      );\n    }\n\n    customTrace\n      .filter((event: ITraceEventFrame) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: ITraceEventFrame) => {\n        if (isFrameNavigationStart(frame, event, url)) {\n          startTime = event.ts;\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        } else if (\n          isFrameMark(frame, event) &&\n          event.name !== \"navigationStart\"\n        ) {\n          if (startTime === -1) {\n            return;\n          }\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        }\n      });\n\n    this.logMarkerTimings(markerLogs);\n  }\n\n  private buildMarkerLogs(\n    event: ITraceEventFrame,\n    startTime: number\n  ): markerLogMeta {\n    return {\n      name: event.name,\n      sentanceCaseName: convertToSentCase(event.name),\n      duration: formatToDuration(event.ts, startTime),\n      startTime,\n      bar: \"\",\n    };\n  }\n\n  private logMarkerTimings(markerLogs: markerLogMeta[]): void {\n    const totalDuration = markerLogs[markerLogs.length - 1].duration;\n\n    logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);\n    markerLogs.forEach((log) => {\n      this.log(\n        logBar({\n          totalDuration,\n          duration: log.duration,\n          title: log.sentanceCaseName,\n        })\n      );\n    });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"029999835f34171300ca20f4a19e4329266b0901"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1skb92i4ln=function(){return actualCoverage;};return actualCoverage;}cov_1skb92i4ln().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/no-explicit-any */const core_1=(cov_1skb92i4ln().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1skb92i4ln().s[2]++,require("fs-extra"));const listr=(cov_1skb92i4ln().s[3]++,require("listr"));const path_1=(cov_1skb92i4ln().s[4]++,require("path"));const command_config_1=(cov_1skb92i4ln().s[5]++,require("../command-config"));const args_1=(cov_1skb92i4ln().s[6]++,require("../helpers/args"));const flags_1=(cov_1skb92i4ln().s[7]++,require("../helpers/flags"));const utils_1=(cov_1skb92i4ln().s[8]++,require("../helpers/utils"));class Profile extends(command_config_1.TBBaseCommand){constructor(){cov_1skb92i4ln().f[0]++;cov_1skb92i4ln().s[9]++;super(...arguments);cov_1skb92i4ln().s[10]++;this.trace=[];}async run(){cov_1skb92i4ln().f[1]++;const{flags,args}=(cov_1skb92i4ln().s[11]++,this.parse(Profile));const{cpuThrottleRate,cookiespath,tbResultsFolder,network,hideUsertimings,url}=(cov_1skb92i4ln().s[12]++,flags);const{harpath}=(cov_1skb92i4ln().s[13]++,args);const cookies=(cov_1skb92i4ln().s[14]++,[{name:"",value:"",domain:"",path:""}]);const conditions=(cov_1skb92i4ln().s[15]++,{cpu:cpuThrottleRate,network});const tasks=(cov_1skb92i4ln().s[16]++,new listr([{title:"Reading cookies json",task:async ctx=>{cov_1skb92i4ln().f[2]++;cov_1skb92i4ln().s[17]++;// read cookies json file from path and set to context
ctx.cookies=cookiespath.length?(cov_1skb92i4ln().b[0][0]++,await fs_extra_1.readJson(path_1.resolve(cookiespath))):(cov_1skb92i4ln().b[0][1]++,cookies);}},{title:"Preparing results folder",task:()=>{cov_1skb92i4ln().f[3]++;cov_1skb92i4ln().s[18]++;// if the folder for the tracerbench results file
// does not exist then create it
try{cov_1skb92i4ln().s[19]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1skb92i4ln().b[1][0]++;cov_1skb92i4ln().s[20]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1skb92i4ln().b[1][1]++;}}catch(error){cov_1skb92i4ln().s[21]++;this.error(error);}}},{title:"Validating & Cloning HAR file",task:async ctx=>{cov_1skb92i4ln().f[4]++;cov_1skb92i4ln().s[22]++;// validate har and clone it to trace.json which will be mutated
ctx.harJSON=await fs_extra_1.readJson(path_1.resolve(harpath));cov_1skb92i4ln().s[23]++;ctx.traceJSONPath=path_1.join(tbResultsFolder,"trace.json");cov_1skb92i4ln().s[24]++;fs_extra_1.writeFileSync(ctx.traceJSONPath,JSON.stringify(ctx.harJSON,null,2));// if no url get url from har otherwise set with cmd url
cov_1skb92i4ln().s[25]++;ctx.url=url.length?(cov_1skb92i4ln().b[2][0]++,url):(cov_1skb92i4ln().b[2][1]++,getURLFromHAR(ctx));function getURLFromHAR(ctx){cov_1skb92i4ln().f[5]++;cov_1skb92i4ln().s[26]++;try{const url=(cov_1skb92i4ln().s[27]++,ctx.harJSON.log.entries[0].request.url);cov_1skb92i4ln().s[28]++;return url;}catch(error){cov_1skb92i4ln().s[29]++;throw new Error(`${error}. Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}}}},{title:"Recording the live trace",task:async ctx=>{cov_1skb92i4ln().f[6]++;const{cookies,url}=(cov_1skb92i4ln().s[30]++,ctx);cov_1skb92i4ln().s[31]++;try{// run the liveTrace
const{traceEvents}=(cov_1skb92i4ln().s[32]++,await core_1.liveTrace(url,tbResultsFolder,cookies,conditions));cov_1skb92i4ln().s[33]++;ctx.traceEvents=traceEvents;}catch(error){cov_1skb92i4ln().s[34]++;this.error(`${error}`);}}},{title:"Analyzing the live trace",task:async ctx=>{cov_1skb92i4ln().f[7]++;const{traceEvents,harJSON}=(cov_1skb92i4ln().s[35]++,ctx);cov_1skb92i4ln().s[36]++;try{cov_1skb92i4ln().s[37]++;// analyze the liveTrace
ctx.analyzeResults=await core_1.analyze({traceEvents,harJSON});}catch(error){cov_1skb92i4ln().s[38]++;this.error(`${error}`);}}},{title:"Setting trace events",task:async ctx=>{cov_1skb92i4ln().f[8]++;const{traceEvents}=(cov_1skb92i4ln().s[39]++,ctx);// mutates this.trace
cov_1skb92i4ln().s[40]++;try{cov_1skb92i4ln().s[41]++;this.trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1skb92i4ln().s[42]++;this.error(`${error}`);}}}]));cov_1skb92i4ln().s[43]++;await tasks.run().catch(error=>{cov_1skb92i4ln().f[9]++;cov_1skb92i4ln().s[44]++;this.error(`${error}`);}).then(async ctx=>{cov_1skb92i4ln().f[10]++;cov_1skb92i4ln().s[45]++;// log logAnalyzeReports
this.logAnalyzeReports(ctx.analyzeResults);// log js-eval-time
cov_1skb92i4ln().s[46]++;this.logJSEvalTime();// log css-parse
cov_1skb92i4ln().s[47]++;this.logCSSEvalTime();// log user timings
cov_1skb92i4ln().s[48]++;if(!hideUsertimings){cov_1skb92i4ln().b[3][0]++;cov_1skb92i4ln().s[49]++;await this.markerTimings(ctx.traceJSONPath,ctx.url);}else{cov_1skb92i4ln().b[3][1]++;}});}logAnalyzeReports(analyzeResults){cov_1skb92i4ln().f[11]++;cov_1skb92i4ln().s[50]++;utils_1.logHeading("Hierarchy Reports");cov_1skb92i4ln().s[51]++;this.log(`${analyzeResults.node}`);cov_1skb92i4ln().s[52]++;analyzeResults.hierarchyReports.forEach(report=>{cov_1skb92i4ln().f[12]++;cov_1skb92i4ln().s[53]++;this.log(`${report}`);});}logJSEvalTime(){cov_1skb92i4ln().f[13]++;let totalJSDuration=(cov_1skb92i4ln().s[54]++,0);const jsEvalLogs=(cov_1skb92i4ln().s[55]++,[]);cov_1skb92i4ln().s[56]++;this.trace.filter(event=>{cov_1skb92i4ln().f[14]++;cov_1skb92i4ln().s[57]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1skb92i4ln().f[15]++;cov_1skb92i4ln().s[58]++;return event.args.data.url;}).forEach(event=>{cov_1skb92i4ln().f[16]++;const url=(cov_1skb92i4ln().s[59]++,event.args.data.url);const durationInMs=(cov_1skb92i4ln().s[60]++,event.dur/1000);cov_1skb92i4ln().s[61]++;totalJSDuration+=durationInMs;cov_1skb92i4ln().s[62]++;jsEvalLogs.push({totalDuration:totalJSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[63]++;utils_1.logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);// log js-eval-time
cov_1skb92i4ln().s[64]++;jsEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[17]++;cov_1skb92i4ln().s[65]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[18]++;cov_1skb92i4ln().s[66]++;this.log(utils_1.logBar(log));});}logCSSEvalTime(){cov_1skb92i4ln().f[19]++;let totalCSSDuration=(cov_1skb92i4ln().s[67]++,0);const cssEvalLogs=(cov_1skb92i4ln().s[68]++,[]);cov_1skb92i4ln().s[69]++;this.trace.filter(event=>{cov_1skb92i4ln().f[20]++;cov_1skb92i4ln().s[70]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1skb92i4ln().f[21]++;cov_1skb92i4ln().s[71]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1skb92i4ln().f[22]++;const url=(cov_1skb92i4ln().s[72]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1skb92i4ln().s[73]++,event.dur/1000);cov_1skb92i4ln().s[74]++;totalCSSDuration+=durationInMs;cov_1skb92i4ln().s[75]++;cssEvalLogs.push({totalDuration:totalCSSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[76]++;utils_1.logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);// log css-parse-time
cov_1skb92i4ln().s[77]++;cssEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[23]++;cov_1skb92i4ln().s[78]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[24]++;cov_1skb92i4ln().s[79]++;this.log(utils_1.logBar(log));});}// tracerbench marker-timings cmd moved here
async markerTimings(traceJSONPath,url){cov_1skb92i4ln().f[25]++;let frame;let startTime=(cov_1skb92i4ln().s[80]++,-1);let rawTraceData=(cov_1skb92i4ln().s[81]++,null);let customTrace;const markerLogs=(cov_1skb92i4ln().s[82]++,[]);cov_1skb92i4ln().s[83]++;if(!url){cov_1skb92i4ln().b[4][0]++;cov_1skb92i4ln().s[84]++;this.error(`Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}else{cov_1skb92i4ln().b[4][1]++;}cov_1skb92i4ln().s[85]++;try{cov_1skb92i4ln().s[86]++;rawTraceData=await fs_extra_1.readJson(path_1.resolve(traceJSONPath));}catch(e){cov_1skb92i4ln().s[87]++;this.error(e);}cov_1skb92i4ln().s[88]++;try{cov_1skb92i4ln().s[89]++;customTrace=utils_1.setTraceEvents(rawTraceData);}catch(e){cov_1skb92i4ln().s[90]++;this.error(e);}cov_1skb92i4ln().s[91]++;if(url.startsWith("http")){cov_1skb92i4ln().b[5][0]++;cov_1skb92i4ln().s[92]++;frame=utils_1.findFrame(customTrace,url);}else{cov_1skb92i4ln().b[5][1]++;cov_1skb92i4ln().s[93]++;frame=url;}cov_1skb92i4ln().s[94]++;if(!frame){cov_1skb92i4ln().b[6][0]++;cov_1skb92i4ln().s[95]++;this.error(`Could not extract frame from trace. Explicitly opt-out of usertimings via "--usertimings" boolean flag and rerun.`);}else{cov_1skb92i4ln().b[6][1]++;}cov_1skb92i4ln().s[96]++;customTrace.filter(event=>{cov_1skb92i4ln().f[26]++;cov_1skb92i4ln().s[97]++;return(cov_1skb92i4ln().b[7][0]++,utils_1.isMark(event))||(cov_1skb92i4ln().b[7][1]++,utils_1.isCommitLoad(event));}).sort(utils_1.byTime).forEach(event=>{cov_1skb92i4ln().f[27]++;cov_1skb92i4ln().s[98]++;if(utils_1.isFrameNavigationStart(frame,event,url)){cov_1skb92i4ln().b[8][0]++;cov_1skb92i4ln().s[99]++;startTime=event.ts;cov_1skb92i4ln().s[100]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[8][1]++;cov_1skb92i4ln().s[101]++;if((cov_1skb92i4ln().b[10][0]++,utils_1.isFrameMark(frame,event))&&(cov_1skb92i4ln().b[10][1]++,event.name!=="navigationStart")){cov_1skb92i4ln().b[9][0]++;cov_1skb92i4ln().s[102]++;if(startTime===-1){cov_1skb92i4ln().b[11][0]++;cov_1skb92i4ln().s[103]++;return;}else{cov_1skb92i4ln().b[11][1]++;}cov_1skb92i4ln().s[104]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[9][1]++;}}});cov_1skb92i4ln().s[105]++;this.logMarkerTimings(markerLogs);}buildMarkerLogs(event,startTime){cov_1skb92i4ln().f[28]++;cov_1skb92i4ln().s[106]++;return{name:event.name,sentanceCaseName:utils_1.convertToSentCase(event.name),duration:utils_1.formatToDuration(event.ts,startTime),startTime,bar:""};}logMarkerTimings(markerLogs){cov_1skb92i4ln().f[29]++;const totalDuration=(cov_1skb92i4ln().s[107]++,markerLogs[markerLogs.length-1].duration);cov_1skb92i4ln().s[108]++;utils_1.logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);cov_1skb92i4ln().s[109]++;markerLogs.forEach(log=>{cov_1skb92i4ln().f[30]++;cov_1skb92i4ln().s[110]++;this.log(utils_1.logBar({totalDuration,duration:log.duration,title:log.sentanceCaseName}));});}}cov_1skb92i4ln().s[111]++;exports.default=Profile;// include backwards compat to trace cmd
cov_1skb92i4ln().s[112]++;Profile.aliases=["trace"];cov_1skb92i4ln().s[113]++;Profile.description=`Parses a CPU profile and aggregates time across heuristics.`;cov_1skb92i4ln().s[114]++;Profile.args=[args_1.harpath];cov_1skb92i4ln().s[115]++;Profile.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true}),hideUsertimings:flags_1.hideUsertimings};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,