"use strict";function cov_hiy6j0wk4(){var path="/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts";var hash="501fb897e5952858d306550e6a982fb150f33bb8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:671}},"2":{start:{line:6,column:18},end:{line:6,column:43}},"3":{start:{line:7,column:15},end:{line:7,column:43}},"4":{start:{line:8,column:28},end:{line:8,column:74}},"5":{start:{line:9,column:26},end:{line:9,column:54}},"6":{start:{line:10,column:16},end:{line:10,column:34}},"7":{start:{line:18,column:0},end:{line:29,column:3}},"8":{start:{line:20,column:19},end:{line:20,column:65}},"9":{start:{line:23,column:8},end:{line:25,column:9}},"10":{start:{line:24,column:12},end:{line:24,column:22}},"11":{start:{line:27,column:8},end:{line:27,column:29}},"12":{start:{line:30,column:0},end:{line:33,column:3}},"13":{start:{line:34,column:0},end:{line:37,column:3}},"14":{start:{line:38,column:0},end:{line:40,column:3}},"15":{start:{line:41,column:0},end:{line:44,column:3}},"16":{start:{line:42,column:19},end:{line:42,column:67}},"17":{start:{line:45,column:0},end:{line:47,column:3}},"18":{start:{line:48,column:0},end:{line:51,column:3}},"19":{start:{line:52,column:0},end:{line:55,column:3}},"20":{start:{line:56,column:0},end:{line:59,column:3}},"21":{start:{line:60,column:0},end:{line:66,column:3}},"22":{start:{line:61,column:19},end:{line:61,column:77}},"23":{start:{line:64,column:8},end:{line:64,column:32}},"24":{start:{line:67,column:0},end:{line:73,column:3}},"25":{start:{line:68,column:19},end:{line:68,column:71}},"26":{start:{line:71,column:8},end:{line:71,column:32}},"27":{start:{line:74,column:0},end:{line:80,column:3}},"28":{start:{line:75,column:19},end:{line:75,column:69}},"29":{start:{line:78,column:8},end:{line:78,column:28}},"30":{start:{line:81,column:0},end:{line:84,column:3}},"31":{start:{line:82,column:19},end:{line:82,column:65}},"32":{start:{line:85,column:0},end:{line:88,column:3}},"33":{start:{line:86,column:19},end:{line:86,column:63}},"34":{start:{line:89,column:0},end:{line:92,column:3}},"35":{start:{line:90,column:19},end:{line:90,column:65}},"36":{start:{line:93,column:0},end:{line:99,column:3}},"37":{start:{line:94,column:19},end:{line:94,column:73}},"38":{start:{line:97,column:8},end:{line:97,column:45}},"39":{start:{line:100,column:0},end:{line:120,column:3}},"40":{start:{line:101,column:19},end:{line:101,column:66}},"41":{start:{line:104,column:28},end:{line:104,column:211}},"42":{start:{line:105,column:8},end:{line:117,column:9}},"43":{start:{line:107,column:12},end:{line:109,column:13}},"44":{start:{line:108,column:16},end:{line:108,column:46}},"45":{start:{line:111,column:12},end:{line:116,column:13}},"46":{start:{line:112,column:16},end:{line:112,column:82}},"47":{start:{line:115,column:16},end:{line:115,column:47}},"48":{start:{line:118,column:8},end:{line:118,column:98}},"49":{start:{line:121,column:0},end:{line:125,column:3}},"50":{start:{line:122,column:19},end:{line:122,column:65}},"51":{start:{line:126,column:0},end:{line:149,column:3}},"52":{start:{line:127,column:19},end:{line:127,column:65}},"53":{start:{line:147,column:8},end:{line:147,column:43}},"54":{start:{line:150,column:0},end:{line:153,column:3}},"55":{start:{line:151,column:19},end:{line:151,column:73}},"56":{start:{line:154,column:0},end:{line:157,column:3}},"57":{start:{line:155,column:19},end:{line:155,column:61}},"58":{start:{line:158,column:0},end:{line:161,column:3}},"59":{start:{line:159,column:19},end:{line:159,column:68}},"60":{start:{line:162,column:0},end:{line:165,column:3}},"61":{start:{line:163,column:19},end:{line:163,column:71}},"62":{start:{line:166,column:0},end:{line:178,column:3}},"63":{start:{line:167,column:19},end:{line:167,column:68}},"64":{start:{line:170,column:8},end:{line:176,column:9}},"65":{start:{line:171,column:22},end:{line:171,column:34}},"66":{start:{line:172,column:12},end:{line:174,column:13}},"67":{start:{line:173,column:16},end:{line:173,column:75}},"68":{start:{line:175,column:12},end:{line:175,column:60}},"69":{start:{line:179,column:0},end:{line:183,column:3}},"70":{start:{line:180,column:19},end:{line:180,column:71}},"71":{start:{line:182,column:56},end:{line:182,column:77}},"72":{start:{line:184,column:0},end:{line:188,column:3}},"73":{start:{line:185,column:19},end:{line:185,column:82}},"74":{start:{line:189,column:0},end:{line:192,column:3}},"75":{start:{line:191,column:19},end:{line:191,column:69}},"76":{start:{line:193,column:0},end:{line:195,column:3}},"77":{start:{line:196,column:0},end:{line:198,column:3}},"78":{start:{line:199,column:0},end:{line:202,column:3}},"79":{start:{line:200,column:19},end:{line:200,column:62}},"80":{start:{line:203,column:0},end:{line:205,column:3}},"81":{start:{line:206,column:0},end:{line:209,column:3}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:13},end:{line:20,column:14}},loc:{start:{line:20,column:19},end:{line:20,column:65}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:11},end:{line:21,column:12}},loc:{start:{line:21,column:19},end:{line:28,column:5}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:13},end:{line:42,column:14}},loc:{start:{line:42,column:19},end:{line:42,column:67}},line:42},"3":{name:"(anonymous_3)",decl:{start:{line:61,column:13},end:{line:61,column:14}},loc:{start:{line:61,column:19},end:{line:61,column:77}},line:61},"4":{name:"(anonymous_4)",decl:{start:{line:63,column:11},end:{line:63,column:12}},loc:{start:{line:63,column:19},end:{line:65,column:5}},line:63},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:13},end:{line:68,column:14}},loc:{start:{line:68,column:19},end:{line:68,column:71}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:70,column:11},end:{line:70,column:12}},loc:{start:{line:70,column:19},end:{line:72,column:5}},line:70},"7":{name:"(anonymous_7)",decl:{start:{line:75,column:13},end:{line:75,column:14}},loc:{start:{line:75,column:19},end:{line:75,column:69}},line:75},"8":{name:"(anonymous_8)",decl:{start:{line:77,column:11},end:{line:77,column:12}},loc:{start:{line:77,column:18},end:{line:79,column:5}},line:77},"9":{name:"(anonymous_9)",decl:{start:{line:82,column:13},end:{line:82,column:14}},loc:{start:{line:82,column:19},end:{line:82,column:65}},line:82},"10":{name:"(anonymous_10)",decl:{start:{line:86,column:13},end:{line:86,column:14}},loc:{start:{line:86,column:19},end:{line:86,column:63}},line:86},"11":{name:"(anonymous_11)",decl:{start:{line:90,column:13},end:{line:90,column:14}},loc:{start:{line:90,column:19},end:{line:90,column:65}},line:90},"12":{name:"(anonymous_12)",decl:{start:{line:94,column:13},end:{line:94,column:14}},loc:{start:{line:94,column:19},end:{line:94,column:73}},line:94},"13":{name:"(anonymous_13)",decl:{start:{line:96,column:11},end:{line:96,column:12}},loc:{start:{line:96,column:32},end:{line:98,column:5}},line:96},"14":{name:"(anonymous_14)",decl:{start:{line:101,column:13},end:{line:101,column:14}},loc:{start:{line:101,column:19},end:{line:101,column:66}},line:101},"15":{name:"(anonymous_15)",decl:{start:{line:103,column:11},end:{line:103,column:12}},loc:{start:{line:103,column:25},end:{line:119,column:5}},line:103},"16":{name:"(anonymous_16)",decl:{start:{line:122,column:13},end:{line:122,column:14}},loc:{start:{line:122,column:19},end:{line:122,column:65}},line:122},"17":{name:"(anonymous_17)",decl:{start:{line:127,column:13},end:{line:127,column:14}},loc:{start:{line:127,column:19},end:{line:127,column:65}},line:127},"18":{name:"(anonymous_18)",decl:{start:{line:146,column:11},end:{line:146,column:12}},loc:{start:{line:146,column:18},end:{line:148,column:5}},line:146},"19":{name:"(anonymous_19)",decl:{start:{line:151,column:13},end:{line:151,column:14}},loc:{start:{line:151,column:19},end:{line:151,column:73}},line:151},"20":{name:"(anonymous_20)",decl:{start:{line:155,column:13},end:{line:155,column:14}},loc:{start:{line:155,column:19},end:{line:155,column:61}},line:155},"21":{name:"(anonymous_21)",decl:{start:{line:159,column:13},end:{line:159,column:14}},loc:{start:{line:159,column:19},end:{line:159,column:68}},line:159},"22":{name:"(anonymous_22)",decl:{start:{line:163,column:13},end:{line:163,column:14}},loc:{start:{line:163,column:19},end:{line:163,column:71}},line:163},"23":{name:"(anonymous_23)",decl:{start:{line:167,column:13},end:{line:167,column:14}},loc:{start:{line:167,column:19},end:{line:167,column:68}},line:167},"24":{name:"(anonymous_24)",decl:{start:{line:169,column:11},end:{line:169,column:12}},loc:{start:{line:169,column:18},end:{line:177,column:5}},line:169},"25":{name:"(anonymous_25)",decl:{start:{line:180,column:13},end:{line:180,column:14}},loc:{start:{line:180,column:19},end:{line:180,column:71}},line:180},"26":{name:"(anonymous_26)",decl:{start:{line:182,column:43},end:{line:182,column:44}},loc:{start:{line:182,column:56},end:{line:182,column:77}},line:182},"27":{name:"(anonymous_27)",decl:{start:{line:185,column:13},end:{line:185,column:14}},loc:{start:{line:185,column:19},end:{line:185,column:82}},line:185},"28":{name:"(anonymous_28)",decl:{start:{line:191,column:13},end:{line:191,column:14}},loc:{start:{line:191,column:19},end:{line:191,column:69}},line:191},"29":{name:"(anonymous_29)",decl:{start:{line:200,column:13},end:{line:200,column:14}},loc:{start:{line:200,column:19},end:{line:200,column:62}},line:200}},branchMap:{"0":{loc:{start:{line:23,column:8},end:{line:25,column:9}},type:"if",locations:[{start:{line:23,column:8},end:{line:25,column:9}},{start:{line:23,column:8},end:{line:25,column:9}}],line:23},"1":{loc:{start:{line:105,column:8},end:{line:117,column:9}},type:"if",locations:[{start:{line:105,column:8},end:{line:117,column:9}},{start:{line:105,column:8},end:{line:117,column:9}}],line:105},"2":{loc:{start:{line:107,column:12},end:{line:109,column:13}},type:"if",locations:[{start:{line:107,column:12},end:{line:109,column:13}},{start:{line:107,column:12},end:{line:109,column:13}}],line:107},"3":{loc:{start:{line:111,column:12},end:{line:116,column:13}},type:"if",locations:[{start:{line:111,column:12},end:{line:116,column:13}},{start:{line:111,column:12},end:{line:116,column:13}}],line:111},"4":{loc:{start:{line:118,column:15},end:{line:118,column:97}},type:"cond-expr",locations:[{start:{line:118,column:39},end:{line:118,column:47}},{start:{line:118,column:50},end:{line:118,column:97}}],line:118},"5":{loc:{start:{line:170,column:8},end:{line:176,column:9}},type:"if",locations:[{start:{line:170,column:8},end:{line:176,column:9}},{start:{line:170,column:8},end:{line:176,column:9}}],line:170},"6":{loc:{start:{line:172,column:12},end:{line:174,column:13}},type:"if",locations:[{start:{line:172,column:12},end:{line:174,column:13}},{start:{line:172,column:12},end:{line:174,column:13}}],line:172}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint:disable:no-console*/\nimport { flags as oclifFlags } from \"@oclif/command\";\nimport * as Parser from \"@oclif/parser\";\nimport { networkConditions } from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\n\nimport {\n  fidelityLookup,\n  getDefaultValue,\n} from \"../command-config/default-flag-args\";\nimport deviceSettings, {\n  EmulateDeviceSettingCliOption,\n} from \"./device-settings\";\nimport { parseMarkers } from \"./utils\";\n/*\n! oclif oclifFlags.build#parse will only execute when the flag:string is passed directly\n! from the cli. thus when passed via the tbconfig.json or the defaultFlagArgs\n! the parse method will never execute\n! todo: mitigate above by either extending the flags oclif command calling parse\n! and type checking in all circumstances\n*/\nexport const isCIEnv = oclifFlags.build({\n  description: `Provides a drastically slimmed down stdout report for CI workflows. However does NOT hide analysis.`,\n  default: () => getDefaultValue(\"isCIEnv\"),\n  parse: (ci): boolean => {\n    // if boolean return\n    if (typeof ci === \"boolean\") {\n      return ci;\n    }\n    // if string return boolean value\n    return ci === \"true\";\n  },\n});\n\nexport const hideUsertimings: Parser.flags.IBooleanFlag<boolean> = oclifFlags.boolean(\n  {\n    description: `Hide stdout of user-timings.`,\n    default: false,\n  }\n);\n\nexport const runtimeStats: Parser.flags.IBooleanFlag<boolean> = oclifFlags.boolean(\n  {\n    description: `Compare command output deep-dive stats during run.`,\n    default: false,\n  }\n);\n\nexport const servers: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `Optional servers config for A/B testing with har-remix dist slicing with socks proxy. All paths within this config are relative.`,\n});\n\nexport const plotTitle: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"plotTitle\"),\n  description: `Specify the title of the report pdf/html files.`,\n});\n\nexport const config: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `Specify an alternative directory rather than the project root for the tbconfig.json. This explicit config will overwrite all.`,\n});\n\nexport const report: Parser.flags.IBooleanFlag<boolean> = oclifFlags.boolean({\n  description: `Generate a PDF report directly after running the compare command.`,\n  default: false,\n});\n\nexport const headless: Parser.flags.IBooleanFlag<boolean> = oclifFlags.boolean({\n  description: `Run with headless chrome flags`,\n  default: false,\n});\n\nexport const debug: Parser.flags.IBooleanFlag<boolean> = oclifFlags.boolean({\n  description: `Debug flag per command. Will output noisy command`,\n  default: false,\n});\n\nexport const regressionThreshold: oclifFlags.Definition<string> = oclifFlags.build(\n  {\n    default: () => getDefaultValue(\"regressionThreshold\"),\n    description: `The upper limit the experiment can regress slower in milliseconds. eg 50`,\n    parse: (ms): number => {\n      return parseInt(ms, 10);\n    },\n  }\n);\n\nexport const sampleTimeout: oclifFlags.Definition<number> = oclifFlags.build({\n  default: () => getDefaultValue(\"sampleTimeout\"),\n  description: `The number of seconds to wait for a sample.`,\n  parse: (ms): number => {\n    return parseInt(ms, 10);\n  },\n});\n\nexport const browserArgs: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"browserArgs\"),\n  description: `(Default Recommended) Additional chrome flags for the TracerBench render benchmark. TracerBench includes many non-configurable defaults in this category.`,\n  parse: (s): string[] => {\n    return s.split(\",\");\n  },\n});\n\nexport const appName: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"appName\"),\n  description: \"The name of your application\",\n});\n\nexport const event: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"event\"),\n  description: \"Slice time and see the events before and after the time slice\",\n});\n\nexport const methods: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"methods\"),\n  description: \"List of methods to aggregate\",\n});\n\nexport const cpuThrottleRate: oclifFlags.Definition<number> = oclifFlags.build({\n  default: () => getDefaultValue(\"cpuThrottleRate\"),\n  description: \"CPU throttle multiplier\",\n  parse: (cpuThrottleRate): number => {\n    return parseInt(cpuThrottleRate, 10);\n  },\n});\n\nexport const fidelity: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"fidelity\"),\n  description: `Directly correlates to the number of samples per trace. eg. ${Object.keys(\n    fidelityLookup\n  )} OR any number between 2-100`,\n  parse: (fidelity: string | number): number => {\n    const warnMessage = `Expected --fidelity=${fidelity} to be either a number or one of: ${Object.keys(\n      fidelityLookup\n    )}. Defaulting to ${getDefaultValue(\"fidelity\")}`;\n\n    if (typeof fidelity === \"string\") {\n      // integers are coming as string from oclif\n      if (Number.isInteger(parseInt(fidelity, 10))) {\n        return parseInt(fidelity, 10);\n      }\n      // is a string and is either test/low/med/high\n      if (Object.keys(fidelityLookup).includes(fidelity)) {\n        return parseInt((fidelityLookup as any)[fidelity], 10);\n      } else {\n        console.warn(`${warnMessage}`);\n      }\n    }\n    return fidelity === \"number\" ? fidelity : getDefaultValue(\"fidelity\");\n  },\n});\n\nexport const markers: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"markers\"),\n  description: \"User Timing Markers\",\n  parse: parseMarkers,\n});\n\nexport const network: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"network\"),\n  description: \"Simulated network conditions.\",\n  options: [\n    \"none\",\n    \"offline\",\n    \"dialup\",\n    \"slow-2g\",\n    \"2g\",\n    \"slow-edge\",\n    \"edge\",\n    \"slow-3g\",\n    \"dsl\",\n    \"3g\",\n    \"fast-3g\",\n    \"4g\",\n    \"cable\",\n    \"LTE\",\n    \"FIOS\",\n  ],\n  parse: (n: string): Protocol.Network.EmulateNetworkConditionsRequest => {\n    return networkConditions[n as keyof typeof networkConditions];\n  },\n});\n\nexport const tbResultsFolder: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"tbResultsFolder\"),\n  description: \"The output folder path for all tracerbench results\",\n});\n\nexport const url: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"url\"),\n  description: \"URL to visit for record-har, timings & trace commands\",\n});\n\nexport const controlURL: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"controlURL\"),\n  description: \"Control URL to visit for compare command\",\n});\n\nexport const experimentURL: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"experimentURL\"),\n  description: \"Experiment URL to visit for compare command\",\n});\n\nexport const socksPorts: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"socksPorts\"),\n  description:\n    \"Specify a socks proxy port as browser option for control and experiment\",\n  parse: (s: string): [number, number] | undefined => {\n    if (typeof s === \"string\") {\n      const a = s.split(\",\");\n      if (a.length > 2) {\n        console.error(`Maximium of two socks ports can be passed`);\n      }\n\n      return [parseInt(a[0], 10), parseInt(a[1], 10)] as [number, number];\n    }\n  },\n});\n\nexport const emulateDevice: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"emulateDevice\"),\n  description: `Emulate a mobile device screen size.`,\n  options: deviceSettings.map(\n    (setting: EmulateDeviceSettingCliOption) => `${setting.typeable}`\n  ),\n});\n\nexport const emulateDeviceOrientation: oclifFlags.Definition<string> = oclifFlags.build(\n  {\n    default: () => getDefaultValue(\"emulateDeviceOrientation\"),\n    description: `Expected to be either \"vertical\" or \"horizontal\". Dictates orientation of device screen.`,\n    options: [\"horizontal\", \"vertical\"],\n  }\n);\n\nexport const cookiespath: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `The path to a JSON file containing cookies to authenticate against the correlated URL`,\n  default: () => getDefaultValue(\"cookiespath\"),\n});\n\nexport const tbconfigpath: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `The path to a TracerBench configuration file (tbconfig.json)`,\n});\n\nexport const tracepath: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `The path to the generated trace.json file`,\n});\n\nexport const dest: oclifFlags.Definition<string> = oclifFlags.build({\n  default: () => getDefaultValue(\"dest\"),\n  description: `The destination path for the generated file`,\n});\n\nexport const filename: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `The filename for the generated file`,\n});\n\nexport const marker: oclifFlags.Definition<string> = oclifFlags.build({\n  description: `The last marker before ending a HAR recording`,\n  default: \"loadEventEnd\",\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"501fb897e5952858d306550e6a982fb150f33bb8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_hiy6j0wk4=function(){return actualCoverage;};}return actualCoverage;}cov_hiy6j0wk4();cov_hiy6j0wk4().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_hiy6j0wk4().s[1]++;exports.marker=exports.filename=exports.dest=exports.tracepath=exports.tbconfigpath=exports.cookiespath=exports.emulateDeviceOrientation=exports.emulateDevice=exports.socksPorts=exports.experimentURL=exports.controlURL=exports.url=exports.tbResultsFolder=exports.network=exports.markers=exports.fidelity=exports.cpuThrottleRate=exports.methods=exports.event=exports.appName=exports.browserArgs=exports.sampleTimeout=exports.regressionThreshold=exports.debug=exports.headless=exports.report=exports.config=exports.plotTitle=exports.servers=exports.runtimeStats=exports.hideUsertimings=exports.isCIEnv=void 0;/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint:disable:no-console*/const command_1=(cov_hiy6j0wk4().s[2]++,require("@oclif/command"));const core_1=(cov_hiy6j0wk4().s[3]++,require("@tracerbench/core"));const default_flag_args_1=(cov_hiy6j0wk4().s[4]++,require("../command-config/default-flag-args"));const device_settings_1=(cov_hiy6j0wk4().s[5]++,require("./device-settings"));const utils_1=(cov_hiy6j0wk4().s[6]++,require("./utils"));/*
! oclif oclifFlags.build#parse will only execute when the flag:string is passed directly
! from the cli. thus when passed via the tbconfig.json or the defaultFlagArgs
! the parse method will never execute
! todo: mitigate above by either extending the flags oclif command calling parse
! and type checking in all circumstances
*/cov_hiy6j0wk4().s[7]++;exports.isCIEnv=command_1.flags.build({description:`Provides a drastically slimmed down stdout report for CI workflows. However does NOT hide analysis.`,default:()=>{cov_hiy6j0wk4().f[0]++;cov_hiy6j0wk4().s[8]++;return default_flag_args_1.getDefaultValue("isCIEnv");},parse:ci=>{cov_hiy6j0wk4().f[1]++;cov_hiy6j0wk4().s[9]++;// if boolean return
if(typeof ci==="boolean"){cov_hiy6j0wk4().b[0][0]++;cov_hiy6j0wk4().s[10]++;return ci;}else{cov_hiy6j0wk4().b[0][1]++;}// if string return boolean value
cov_hiy6j0wk4().s[11]++;return ci==="true";}});cov_hiy6j0wk4().s[12]++;exports.hideUsertimings=command_1.flags.boolean({description:`Hide stdout of user-timings.`,default:false});cov_hiy6j0wk4().s[13]++;exports.runtimeStats=command_1.flags.boolean({description:`Compare command output deep-dive stats during run.`,default:false});cov_hiy6j0wk4().s[14]++;exports.servers=command_1.flags.build({description:`Optional servers config for A/B testing with har-remix dist slicing with socks proxy. All paths within this config are relative.`});cov_hiy6j0wk4().s[15]++;exports.plotTitle=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[2]++;cov_hiy6j0wk4().s[16]++;return default_flag_args_1.getDefaultValue("plotTitle");},description:`Specify the title of the report pdf/html files.`});cov_hiy6j0wk4().s[17]++;exports.config=command_1.flags.build({description:`Specify an alternative directory rather than the project root for the tbconfig.json. This explicit config will overwrite all.`});cov_hiy6j0wk4().s[18]++;exports.report=command_1.flags.boolean({description:`Generate a PDF report directly after running the compare command.`,default:false});cov_hiy6j0wk4().s[19]++;exports.headless=command_1.flags.boolean({description:`Run with headless chrome flags`,default:false});cov_hiy6j0wk4().s[20]++;exports.debug=command_1.flags.boolean({description:`Debug flag per command. Will output noisy command`,default:false});cov_hiy6j0wk4().s[21]++;exports.regressionThreshold=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[3]++;cov_hiy6j0wk4().s[22]++;return default_flag_args_1.getDefaultValue("regressionThreshold");},description:`The upper limit the experiment can regress slower in milliseconds. eg 50`,parse:ms=>{cov_hiy6j0wk4().f[4]++;cov_hiy6j0wk4().s[23]++;return parseInt(ms,10);}});cov_hiy6j0wk4().s[24]++;exports.sampleTimeout=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[5]++;cov_hiy6j0wk4().s[25]++;return default_flag_args_1.getDefaultValue("sampleTimeout");},description:`The number of seconds to wait for a sample.`,parse:ms=>{cov_hiy6j0wk4().f[6]++;cov_hiy6j0wk4().s[26]++;return parseInt(ms,10);}});cov_hiy6j0wk4().s[27]++;exports.browserArgs=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[7]++;cov_hiy6j0wk4().s[28]++;return default_flag_args_1.getDefaultValue("browserArgs");},description:`(Default Recommended) Additional chrome flags for the TracerBench render benchmark. TracerBench includes many non-configurable defaults in this category.`,parse:s=>{cov_hiy6j0wk4().f[8]++;cov_hiy6j0wk4().s[29]++;return s.split(",");}});cov_hiy6j0wk4().s[30]++;exports.appName=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[9]++;cov_hiy6j0wk4().s[31]++;return default_flag_args_1.getDefaultValue("appName");},description:"The name of your application"});cov_hiy6j0wk4().s[32]++;exports.event=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[10]++;cov_hiy6j0wk4().s[33]++;return default_flag_args_1.getDefaultValue("event");},description:"Slice time and see the events before and after the time slice"});cov_hiy6j0wk4().s[34]++;exports.methods=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[11]++;cov_hiy6j0wk4().s[35]++;return default_flag_args_1.getDefaultValue("methods");},description:"List of methods to aggregate"});cov_hiy6j0wk4().s[36]++;exports.cpuThrottleRate=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[12]++;cov_hiy6j0wk4().s[37]++;return default_flag_args_1.getDefaultValue("cpuThrottleRate");},description:"CPU throttle multiplier",parse:cpuThrottleRate=>{cov_hiy6j0wk4().f[13]++;cov_hiy6j0wk4().s[38]++;return parseInt(cpuThrottleRate,10);}});cov_hiy6j0wk4().s[39]++;exports.fidelity=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[14]++;cov_hiy6j0wk4().s[40]++;return default_flag_args_1.getDefaultValue("fidelity");},description:`Directly correlates to the number of samples per trace. eg. ${Object.keys(default_flag_args_1.fidelityLookup)} OR any number between 2-100`,parse:fidelity=>{cov_hiy6j0wk4().f[15]++;const warnMessage=(cov_hiy6j0wk4().s[41]++,`Expected --fidelity=${fidelity} to be either a number or one of: ${Object.keys(default_flag_args_1.fidelityLookup)}. Defaulting to ${default_flag_args_1.getDefaultValue("fidelity")}`);cov_hiy6j0wk4().s[42]++;if(typeof fidelity==="string"){cov_hiy6j0wk4().b[1][0]++;cov_hiy6j0wk4().s[43]++;// integers are coming as string from oclif
if(Number.isInteger(parseInt(fidelity,10))){cov_hiy6j0wk4().b[2][0]++;cov_hiy6j0wk4().s[44]++;return parseInt(fidelity,10);}else{cov_hiy6j0wk4().b[2][1]++;}// is a string and is either test/low/med/high
cov_hiy6j0wk4().s[45]++;if(Object.keys(default_flag_args_1.fidelityLookup).includes(fidelity)){cov_hiy6j0wk4().b[3][0]++;cov_hiy6j0wk4().s[46]++;return parseInt(default_flag_args_1.fidelityLookup[fidelity],10);}else{cov_hiy6j0wk4().b[3][1]++;cov_hiy6j0wk4().s[47]++;console.warn(`${warnMessage}`);}}else{cov_hiy6j0wk4().b[1][1]++;}cov_hiy6j0wk4().s[48]++;return fidelity==="number"?(cov_hiy6j0wk4().b[4][0]++,fidelity):(cov_hiy6j0wk4().b[4][1]++,default_flag_args_1.getDefaultValue("fidelity"));}});cov_hiy6j0wk4().s[49]++;exports.markers=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[16]++;cov_hiy6j0wk4().s[50]++;return default_flag_args_1.getDefaultValue("markers");},description:"User Timing Markers",parse:utils_1.parseMarkers});cov_hiy6j0wk4().s[51]++;exports.network=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[17]++;cov_hiy6j0wk4().s[52]++;return default_flag_args_1.getDefaultValue("network");},description:"Simulated network conditions.",options:["none","offline","dialup","slow-2g","2g","slow-edge","edge","slow-3g","dsl","3g","fast-3g","4g","cable","LTE","FIOS"],parse:n=>{cov_hiy6j0wk4().f[18]++;cov_hiy6j0wk4().s[53]++;return core_1.networkConditions[n];}});cov_hiy6j0wk4().s[54]++;exports.tbResultsFolder=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[19]++;cov_hiy6j0wk4().s[55]++;return default_flag_args_1.getDefaultValue("tbResultsFolder");},description:"The output folder path for all tracerbench results"});cov_hiy6j0wk4().s[56]++;exports.url=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[20]++;cov_hiy6j0wk4().s[57]++;return default_flag_args_1.getDefaultValue("url");},description:"URL to visit for record-har, timings & trace commands"});cov_hiy6j0wk4().s[58]++;exports.controlURL=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[21]++;cov_hiy6j0wk4().s[59]++;return default_flag_args_1.getDefaultValue("controlURL");},description:"Control URL to visit for compare command"});cov_hiy6j0wk4().s[60]++;exports.experimentURL=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[22]++;cov_hiy6j0wk4().s[61]++;return default_flag_args_1.getDefaultValue("experimentURL");},description:"Experiment URL to visit for compare command"});cov_hiy6j0wk4().s[62]++;exports.socksPorts=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[23]++;cov_hiy6j0wk4().s[63]++;return default_flag_args_1.getDefaultValue("socksPorts");},description:"Specify a socks proxy port as browser option for control and experiment",parse:s=>{cov_hiy6j0wk4().f[24]++;cov_hiy6j0wk4().s[64]++;if(typeof s==="string"){cov_hiy6j0wk4().b[5][0]++;const a=(cov_hiy6j0wk4().s[65]++,s.split(","));cov_hiy6j0wk4().s[66]++;if(a.length>2){cov_hiy6j0wk4().b[6][0]++;cov_hiy6j0wk4().s[67]++;console.error(`Maximium of two socks ports can be passed`);}else{cov_hiy6j0wk4().b[6][1]++;}cov_hiy6j0wk4().s[68]++;return[parseInt(a[0],10),parseInt(a[1],10)];}else{cov_hiy6j0wk4().b[5][1]++;}}});cov_hiy6j0wk4().s[69]++;exports.emulateDevice=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[25]++;cov_hiy6j0wk4().s[70]++;return default_flag_args_1.getDefaultValue("emulateDevice");},description:`Emulate a mobile device screen size.`,options:device_settings_1.default.map(setting=>{cov_hiy6j0wk4().f[26]++;cov_hiy6j0wk4().s[71]++;return`${setting.typeable}`;})});cov_hiy6j0wk4().s[72]++;exports.emulateDeviceOrientation=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[27]++;cov_hiy6j0wk4().s[73]++;return default_flag_args_1.getDefaultValue("emulateDeviceOrientation");},description:`Expected to be either "vertical" or "horizontal". Dictates orientation of device screen.`,options:["horizontal","vertical"]});cov_hiy6j0wk4().s[74]++;exports.cookiespath=command_1.flags.build({description:`The path to a JSON file containing cookies to authenticate against the correlated URL`,default:()=>{cov_hiy6j0wk4().f[28]++;cov_hiy6j0wk4().s[75]++;return default_flag_args_1.getDefaultValue("cookiespath");}});cov_hiy6j0wk4().s[76]++;exports.tbconfigpath=command_1.flags.build({description:`The path to a TracerBench configuration file (tbconfig.json)`});cov_hiy6j0wk4().s[77]++;exports.tracepath=command_1.flags.build({description:`The path to the generated trace.json file`});cov_hiy6j0wk4().s[78]++;exports.dest=command_1.flags.build({default:()=>{cov_hiy6j0wk4().f[29]++;cov_hiy6j0wk4().s[79]++;return default_flag_args_1.getDefaultValue("dest");},description:`The destination path for the generated file`});cov_hiy6j0wk4().s[80]++;exports.filename=command_1.flags.build({description:`The filename for the generated file`});cov_hiy6j0wk4().s[81]++;exports.marker=command_1.flags.build({description:`The last marker before ending a HAR recording`,default:"loadEventEnd"});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,