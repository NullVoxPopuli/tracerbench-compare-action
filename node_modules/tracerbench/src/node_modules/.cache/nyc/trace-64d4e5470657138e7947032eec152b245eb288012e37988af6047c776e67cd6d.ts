"use strict";function cov_1wmjbuuxyq(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts";var hash="22b1f45cba4828f4d6e3c900c5ecc689b222faf2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:15},end:{line:6,column:30}},"4":{start:{line:7,column:25},end:{line:7,column:53}},"5":{start:{line:8,column:15},end:{line:8,column:41}},"6":{start:{line:9,column:16},end:{line:9,column:43}},"7":{start:{line:10,column:16},end:{line:10,column:43}},"8":{start:{line:13,column:32},end:{line:13,column:49}},"9":{start:{line:14,column:89},end:{line:14,column:94}},"10":{start:{line:15,column:28},end:{line:15,column:32}},"11":{start:{line:16,column:22},end:{line:16,column:27}},"12":{start:{line:17,column:22},end:{line:24,column:9}},"13":{start:{line:25,column:24},end:{line:25,column:28}},"14":{start:{line:26,column:27},end:{line:29,column:9}},"15":{start:{line:30,column:8},end:{line:32,column:9}},"16":{start:{line:31,column:12},end:{line:31,column:77}},"17":{start:{line:35,column:8},end:{line:42,column:9}},"18":{start:{line:36,column:12},end:{line:38,column:13}},"19":{start:{line:37,column:16},end:{line:37,column:54}},"20":{start:{line:41,column:12},end:{line:41,column:30}},"21":{start:{line:44,column:24},end:{line:44,column:74}},"22":{start:{line:45,column:30},end:{line:45,column:72}},"23":{start:{line:46,column:8},end:{line:46,column:82}},"24":{start:{line:48,column:8},end:{line:55,column:9}},"25":{start:{line:49,column:12},end:{line:54,column:13}},"26":{start:{line:50,column:16},end:{line:50,column:57}},"27":{start:{line:53,column:16},end:{line:53,column:124}},"28":{start:{line:57,column:32},end:{line:57,column:97}},"29":{start:{line:58,column:31},end:{line:62,column:9}},"30":{start:{line:64,column:8},end:{line:64,column:45}},"31":{start:{line:67,column:30},end:{line:67,column:31}},"32":{start:{line:68,column:31},end:{line:68,column:32}},"33":{start:{line:69,column:27},end:{line:69,column:36}},"34":{start:{line:70,column:8},end:{line:75,column:9}},"35":{start:{line:71,column:12},end:{line:71,column:56}},"36":{start:{line:74,column:12},end:{line:74,column:35}},"37":{start:{line:76,column:8},end:{line:84,column:11}},"38":{start:{line:77,column:31},end:{line:77,column:62}},"39":{start:{line:78,column:31},end:{line:78,column:50}},"40":{start:{line:80,column:24},end:{line:80,column:43}},"41":{start:{line:81,column:33},end:{line:81,column:49}},"42":{start:{line:82,column:12},end:{line:82,column:44}},"43":{start:{line:83,column:12},end:{line:83,column:63}},"44":{start:{line:86,column:8},end:{line:86,column:88}},"45":{start:{line:88,column:8},end:{line:96,column:11}},"46":{start:{line:89,column:31},end:{line:89,column:69}},"47":{start:{line:90,column:31},end:{line:90,column:60}},"48":{start:{line:92,column:24},end:{line:92,column:53}},"49":{start:{line:93,column:33},end:{line:93,column:49}},"50":{start:{line:94,column:12},end:{line:94,column:45}},"51":{start:{line:95,column:12},end:{line:95,column:64}},"52":{start:{line:98,column:8},end:{line:98,column:90}},"53":{start:{line:100,column:8},end:{line:109,column:9}},"54":{start:{line:101,column:28},end:{line:101,column:70}},"55":{start:{line:102,column:12},end:{line:105,column:15}},"56":{start:{line:103,column:72},end:{line:103,column:86}},"57":{start:{line:104,column:16},end:{line:104,column:112}},"58":{start:{line:108,column:12},end:{line:108,column:30}},"59":{start:{line:110,column:8},end:{line:119,column:9}},"60":{start:{line:111,column:12},end:{line:111,column:56}},"61":{start:{line:112,column:30},end:{line:112,column:64}},"62":{start:{line:113,column:12},end:{line:115,column:15}},"63":{start:{line:114,column:16},end:{line:114,column:67}},"64":{start:{line:118,column:12},end:{line:118,column:35}},"65":{start:{line:120,column:8},end:{line:122,column:9}},"66":{start:{line:121,column:12},end:{line:121,column:57}},"67":{start:{line:126,column:27},end:{line:126,column:30}},"68":{start:{line:127,column:23},end:{line:127,column:46}},"69":{start:{line:128,column:20},end:{line:128,column:24}},"70":{start:{line:129,column:24},end:{line:129,column:26}},"71":{start:{line:130,column:27},end:{line:130,column:31}},"72":{start:{line:131,column:20},end:{line:131,column:24}},"73":{start:{line:132,column:8},end:{line:134,column:9}},"74":{start:{line:133,column:12},end:{line:133,column:73}},"75":{start:{line:135,column:8},end:{line:140,column:9}},"76":{start:{line:136,column:12},end:{line:136,column:80}},"77":{start:{line:139,column:12},end:{line:139,column:26}},"78":{start:{line:141,column:8},end:{line:146,column:9}},"79":{start:{line:142,column:12},end:{line:142,column:57}},"80":{start:{line:145,column:12},end:{line:145,column:26}},"81":{start:{line:147,column:8},end:{line:152,column:9}},"82":{start:{line:148,column:12},end:{line:148,column:57}},"83":{start:{line:151,column:12},end:{line:151,column:31}},"84":{start:{line:153,column:8},end:{line:155,column:9}},"85":{start:{line:154,column:12},end:{line:154,column:42}},"86":{start:{line:156,column:8},end:{line:182,column:11}},"87":{start:{line:157,column:31},end:{line:157,column:83}},"88":{start:{line:160,column:12},end:{line:181,column:13}},"89":{start:{line:161,column:16},end:{line:161,column:37}},"90":{start:{line:162,column:16},end:{line:162,column:97}},"91":{start:{line:164,column:17},end:{line:181,column:13}},"92":{start:{line:165,column:16},end:{line:167,column:17}},"93":{start:{line:166,column:20},end:{line:166,column:41}},"94":{start:{line:168,column:16},end:{line:168,column:97}},"95":{start:{line:170,column:17},end:{line:181,column:13}},"96":{start:{line:171,column:16},end:{line:174,column:17}},"97":{start:{line:172,column:39},end:{line:172,column:67}},"98":{start:{line:173,column:20},end:{line:173,column:101}},"99":{start:{line:176,column:17},end:{line:181,column:13}},"100":{start:{line:177,column:33},end:{line:177,column:43}},"101":{start:{line:178,column:16},end:{line:180,column:17}},"102":{start:{line:179,column:20},end:{line:179,column:127}},"103":{start:{line:185,column:0},end:{line:185,column:24}},"104":{start:{line:186,column:0},end:{line:186,column:82}},"105":{start:{line:187,column:0},end:{line:187,column:30}},"106":{start:{line:188,column:0},end:{line:195,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:16},end:{line:123,column:5}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:77,column:20},end:{line:77,column:21}},loc:{start:{line:77,column:31},end:{line:77,column:62}},line:77},"2":{name:"(anonymous_2)",decl:{start:{line:78,column:20},end:{line:78,column:21}},loc:{start:{line:78,column:31},end:{line:78,column:50}},line:78},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:21},end:{line:79,column:22}},loc:{start:{line:79,column:32},end:{line:84,column:9}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:89,column:20},end:{line:89,column:21}},loc:{start:{line:89,column:31},end:{line:89,column:69}},line:89},"5":{name:"(anonymous_5)",decl:{start:{line:90,column:20},end:{line:90,column:21}},loc:{start:{line:90,column:31},end:{line:90,column:60}},line:90},"6":{name:"(anonymous_6)",decl:{start:{line:91,column:21},end:{line:91,column:22}},loc:{start:{line:91,column:32},end:{line:96,column:9}},line:91},"7":{name:"(anonymous_7)",decl:{start:{line:102,column:36},end:{line:102,column:37}},loc:{start:{line:102,column:46},end:{line:105,column:13}},line:102},"8":{name:"(anonymous_8)",decl:{start:{line:113,column:30},end:{line:113,column:31}},loc:{start:{line:113,column:72},end:{line:115,column:13}},line:113},"9":{name:"(anonymous_9)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:40},end:{line:183,column:5}},line:125},"10":{name:"(anonymous_10)",decl:{start:{line:157,column:20},end:{line:157,column:21}},loc:{start:{line:157,column:31},end:{line:157,column:83}},line:157},"11":{name:"(anonymous_11)",decl:{start:{line:159,column:21},end:{line:159,column:22}},loc:{start:{line:159,column:32},end:{line:182,column:9}},line:159},"12":{name:"(anonymous_12)",decl:{start:{line:172,column:32},end:{line:172,column:33}},loc:{start:{line:172,column:39},end:{line:172,column:67}},line:172}},branchMap:{"0":{loc:{start:{line:30,column:8},end:{line:32,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:32,column:9}},{start:{line:30,column:8},end:{line:32,column:9}}],line:30},"1":{loc:{start:{line:36,column:12},end:{line:38,column:13}},type:"if",locations:[{start:{line:36,column:12},end:{line:38,column:13}},{start:{line:36,column:12},end:{line:38,column:13}}],line:36},"2":{loc:{start:{line:48,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:48,column:8},end:{line:55,column:9}},{start:{line:48,column:8},end:{line:55,column:9}}],line:48},"3":{loc:{start:{line:120,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:120,column:8},end:{line:122,column:9}},{start:{line:120,column:8},end:{line:122,column:9}}],line:120},"4":{loc:{start:{line:132,column:8},end:{line:134,column:9}},type:"if",locations:[{start:{line:132,column:8},end:{line:134,column:9}},{start:{line:132,column:8},end:{line:134,column:9}}],line:132},"5":{loc:{start:{line:132,column:12},end:{line:132,column:31}},type:"binary-expr",locations:[{start:{line:132,column:12},end:{line:132,column:23}},{start:{line:132,column:27},end:{line:132,column:31}}],line:132},"6":{loc:{start:{line:147,column:8},end:{line:152,column:9}},type:"if",locations:[{start:{line:147,column:8},end:{line:152,column:9}},{start:{line:147,column:8},end:{line:152,column:9}}],line:147},"7":{loc:{start:{line:153,column:8},end:{line:155,column:9}},type:"if",locations:[{start:{line:153,column:8},end:{line:155,column:9}},{start:{line:153,column:8},end:{line:155,column:9}}],line:153},"8":{loc:{start:{line:157,column:31},end:{line:157,column:83}},type:"binary-expr",locations:[{start:{line:157,column:31},end:{line:157,column:52}},{start:{line:157,column:56},end:{line:157,column:83}}],line:157},"9":{loc:{start:{line:160,column:12},end:{line:181,column:13}},type:"if",locations:[{start:{line:160,column:12},end:{line:181,column:13}},{start:{line:160,column:12},end:{line:181,column:13}}],line:160},"10":{loc:{start:{line:164,column:17},end:{line:181,column:13}},type:"if",locations:[{start:{line:164,column:17},end:{line:181,column:13}},{start:{line:164,column:17},end:{line:181,column:13}}],line:164},"11":{loc:{start:{line:165,column:16},end:{line:167,column:17}},type:"if",locations:[{start:{line:165,column:16},end:{line:167,column:17}},{start:{line:165,column:16},end:{line:167,column:17}}],line:165},"12":{loc:{start:{line:170,column:17},end:{line:181,column:13}},type:"if",locations:[{start:{line:170,column:17},end:{line:181,column:13}},{start:{line:170,column:17},end:{line:181,column:13}}],line:170},"13":{loc:{start:{line:171,column:16},end:{line:174,column:17}},type:"if",locations:[{start:{line:171,column:16},end:{line:174,column:17}},{start:{line:171,column:16},end:{line:174,column:17}}],line:171},"14":{loc:{start:{line:171,column:20},end:{line:172,column:68}},type:"binary-expr",locations:[{start:{line:171,column:20},end:{line:171,column:39}},{start:{line:172,column:20},end:{line:172,column:68}}],line:171},"15":{loc:{start:{line:176,column:17},end:{line:181,column:13}},type:"if",locations:[{start:{line:176,column:17},end:{line:181,column:13}},{start:{line:176,column:17},end:{line:181,column:13}}],line:176},"16":{loc:{start:{line:178,column:16},end:{line:180,column:17}},type:"if",locations:[{start:{line:178,column:16},end:{line:180,column:17}},{start:{line:178,column:16},end:{line:180,column:17}}],line:178}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport {\n  analyze,\n  IAnalyze,\n  IConditions,\n  ITraceEvent,\n  liveTrace,\n  loadTrace,\n} from \"@tracerbench/core\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  network,\n  tbResultsFolder,\n  url,\n  usertimings,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  collect,\n  findFrame,\n  format,\n  IEvent,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  isUserMark,\n  normalizeFnName,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\nexport default class Trace extends TBBaseCommand {\n  public static description = `Parses a CPU profile and aggregates time across heuristics.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    usertimings,\n  };\n\n  public async run() {\n    const { flags, args } = this.parse(Trace);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      usertimings,\n    } = flags;\n    const { harpath } = args;\n    let { url } = flags;\n    let cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const methods = [\"\"];\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n    if (cookiespath.length) {\n      cookies = await readJson(resolve(cookiespath));\n    }\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    try {\n      if (!existsSync(tbResultsFolder)) {\n        mkdirSync(tbResultsFolder);\n      }\n    } catch (error) {\n      this.error(error);\n    }\n    // validate har and clone it to trace.json which will be mutated\n    const harJSON = await readJson(resolve(harpath));\n    const traceJSONPath = join(tbResultsFolder, \"trace.json\");\n    writeFileSync(traceJSONPath, JSON.stringify(harJSON, null, 2));\n\n    // if no url get url from har\n    if (!url.length) {\n      try {\n        url = harJSON.log.entries[0].request.url;\n      } catch (error) {\n        this.error(\n          `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n        );\n      }\n    }\n\n    // run the liveTrace\n    const { traceEvents } = await liveTrace(\n      url,\n      tbResultsFolder,\n      cookies,\n      conditions\n    );\n\n    const analyzeOptions: IAnalyze = {\n      traceEvents,\n      traceHARJSON: harJSON,\n      methods,\n    };\n\n    // analyze the liveTrace\n    await analyze(analyzeOptions);\n\n    // js-eval-time\n    let trace: any;\n    let totalJSDuration = 0;\n    let totalCSSDuration = 0;\n\n    const methodsSet = new Set();\n\n    try {\n      trace = setTraceEvents(traceEvents);\n    } catch (error) {\n      this.error(`${error}`);\n    }\n\n    trace\n      .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = (event.dur as number) / 1000;\n        totalJSDuration += durationInMs;\n        this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);\n      });\n\n    // log js-eval-time\n    this.log(\n      `JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \\n\\n`\n    );\n\n    // css-parse\n    trace\n      .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);\n      });\n\n    // log css-parse-time\n    this.log(\n      `CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \\n\\n`\n    );\n\n    // list-functions\n    try {\n      const profile = loadTrace(trace).cpuProfile(-1, -1);\n      profile.nodeMap.forEach((node: any) => {\n        const { functionName, url, lineNumber, columnNumber } = node.callFrame;\n\n        methodsSet.add(\n          `${url}:${lineNumber}:${columnNumber}.${normalizeFnName(\n            functionName\n          )}`\n        );\n      });\n    } catch (error) {\n      this.error(error);\n    }\n\n    try {\n      trace = setTraceEvents(traceEvents);\n      const traceLoad = trace.filter(isCommitLoad);\n      traceLoad.forEach(\n        ({\n          args: {\n            data: { frame, url },\n          },\n        }: {\n          args: { data: { frame: any; url: any } };\n        }) => {\n          this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);\n        }\n      );\n    } catch (error) {\n      this.error(`${error}`);\n    }\n\n    if (usertimings) {\n      await this.markerTimings(traceJSONPath, url);\n    }\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(tracepath: string, url: string): Promise<void> {\n    const traceFrame: string = url;\n    const filter = collect(\"\", []);\n\n    let frame: any = null;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let trace: any = null;\n\n    if (!traceFrame && !url) {\n      this.error(`Either a traceFrame or url are required flags.`);\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(tracepath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      trace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (traceFrame.startsWith(\"http\")) {\n      frame = findFrame(trace, traceFrame);\n    } else {\n      frame = traceFrame;\n    }\n    if (!frame) {\n      this.error(`frame not found`);\n    }\n\n    trace\n      .filter((event: IEvent) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: any) => {\n        if (isFrameNavigationStart(frame, event)) {\n          startTime = event.ts;\n          this.log(\n            `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n          );\n        } else if (isFrameMark(frame, event)) {\n          if (startTime === -1) {\n            startTime = event.ts;\n          }\n          this.log(\n            `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n          );\n        } else if (isUserMark(event)) {\n          if (\n            filter.length === 0 ||\n            filter.some((f: any) => event.name.indexOf(f) !== -1)\n          ) {\n            this.log(\n              `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n            );\n          }\n        } else if (isCommitLoad(event)) {\n          const { data } = event.args;\n          if (data.frame === frame) {\n            this.log(\n              `Marker Timings: ${format(event.ts, startTime)} ${event.name} ${\n                data.frame\n              } ${data.url}`\n            );\n          }\n        }\n      });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"22b1f45cba4828f4d6e3c900c5ecc689b222faf2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1wmjbuuxyq=function(){return actualCoverage;};return actualCoverage;}cov_1wmjbuuxyq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/explicit-function-return-type */const core_1=(cov_1wmjbuuxyq().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1wmjbuuxyq().s[2]++,require("fs-extra"));const path_1=(cov_1wmjbuuxyq().s[3]++,require("path"));const command_config_1=(cov_1wmjbuuxyq().s[4]++,require("../command-config"));const args_1=(cov_1wmjbuuxyq().s[5]++,require("../helpers/args"));const flags_1=(cov_1wmjbuuxyq().s[6]++,require("../helpers/flags"));const utils_1=(cov_1wmjbuuxyq().s[7]++,require("../helpers/utils"));class Trace extends(command_config_1.TBBaseCommand){async run(){cov_1wmjbuuxyq().f[0]++;const{flags,args}=(cov_1wmjbuuxyq().s[8]++,this.parse(Trace));const{cpuThrottleRate,cookiespath,tbResultsFolder,network,usertimings}=(cov_1wmjbuuxyq().s[9]++,flags);const{harpath}=(cov_1wmjbuuxyq().s[10]++,args);let{url}=(cov_1wmjbuuxyq().s[11]++,flags);let cookies=(cov_1wmjbuuxyq().s[12]++,[{name:"",value:"",domain:"",path:""}]);const methods=(cov_1wmjbuuxyq().s[13]++,[""]);const conditions=(cov_1wmjbuuxyq().s[14]++,{cpu:cpuThrottleRate,network});cov_1wmjbuuxyq().s[15]++;if(cookiespath.length){cov_1wmjbuuxyq().b[0][0]++;cov_1wmjbuuxyq().s[16]++;cookies=await fs_extra_1.readJson(path_1.resolve(cookiespath));}else{cov_1wmjbuuxyq().b[0][1]++;}// if the folder for the tracerbench results file
// does not exist then create it
cov_1wmjbuuxyq().s[17]++;try{cov_1wmjbuuxyq().s[18]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1wmjbuuxyq().b[1][0]++;cov_1wmjbuuxyq().s[19]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1wmjbuuxyq().b[1][1]++;}}catch(error){cov_1wmjbuuxyq().s[20]++;this.error(error);}// validate har and clone it to trace.json which will be mutated
const harJSON=(cov_1wmjbuuxyq().s[21]++,await fs_extra_1.readJson(path_1.resolve(harpath)));const traceJSONPath=(cov_1wmjbuuxyq().s[22]++,path_1.join(tbResultsFolder,"trace.json"));cov_1wmjbuuxyq().s[23]++;fs_extra_1.writeFileSync(traceJSONPath,JSON.stringify(harJSON,null,2));// if no url get url from har
cov_1wmjbuuxyq().s[24]++;if(!url.length){cov_1wmjbuuxyq().b[2][0]++;cov_1wmjbuuxyq().s[25]++;try{cov_1wmjbuuxyq().s[26]++;url=harJSON.log.entries[0].request.url;}catch(error){cov_1wmjbuuxyq().s[27]++;this.error(`${error}. Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}}else{cov_1wmjbuuxyq().b[2][1]++;}// run the liveTrace
const{traceEvents}=(cov_1wmjbuuxyq().s[28]++,await core_1.liveTrace(url,tbResultsFolder,cookies,conditions));const analyzeOptions=(cov_1wmjbuuxyq().s[29]++,{traceEvents,traceHARJSON:harJSON,methods});// analyze the liveTrace
cov_1wmjbuuxyq().s[30]++;await core_1.analyze(analyzeOptions);// js-eval-time
let trace;let totalJSDuration=(cov_1wmjbuuxyq().s[31]++,0);let totalCSSDuration=(cov_1wmjbuuxyq().s[32]++,0);const methodsSet=(cov_1wmjbuuxyq().s[33]++,new Set());cov_1wmjbuuxyq().s[34]++;try{cov_1wmjbuuxyq().s[35]++;trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1wmjbuuxyq().s[36]++;this.error(`${error}`);}cov_1wmjbuuxyq().s[37]++;trace.filter(event=>{cov_1wmjbuuxyq().f[1]++;cov_1wmjbuuxyq().s[38]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1wmjbuuxyq().f[2]++;cov_1wmjbuuxyq().s[39]++;return event.args.data.url;}).forEach(event=>{cov_1wmjbuuxyq().f[3]++;const url=(cov_1wmjbuuxyq().s[40]++,event.args.data.url);const durationInMs=(cov_1wmjbuuxyq().s[41]++,event.dur/1000);cov_1wmjbuuxyq().s[42]++;totalJSDuration+=durationInMs;cov_1wmjbuuxyq().s[43]++;this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);});// log js-eval-time
cov_1wmjbuuxyq().s[44]++;this.log(`JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \n\n`);// css-parse
cov_1wmjbuuxyq().s[45]++;trace.filter(event=>{cov_1wmjbuuxyq().f[4]++;cov_1wmjbuuxyq().s[46]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1wmjbuuxyq().f[5]++;cov_1wmjbuuxyq().s[47]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1wmjbuuxyq().f[6]++;const url=(cov_1wmjbuuxyq().s[48]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1wmjbuuxyq().s[49]++,event.dur/1000);cov_1wmjbuuxyq().s[50]++;totalCSSDuration+=durationInMs;cov_1wmjbuuxyq().s[51]++;this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);});// log css-parse-time
cov_1wmjbuuxyq().s[52]++;this.log(`CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \n\n`);// list-functions
cov_1wmjbuuxyq().s[53]++;try{const profile=(cov_1wmjbuuxyq().s[54]++,core_1.loadTrace(trace).cpuProfile(-1,-1));cov_1wmjbuuxyq().s[55]++;profile.nodeMap.forEach(node=>{cov_1wmjbuuxyq().f[7]++;const{functionName,url,lineNumber,columnNumber}=(cov_1wmjbuuxyq().s[56]++,node.callFrame);cov_1wmjbuuxyq().s[57]++;methodsSet.add(`${url}:${lineNumber}:${columnNumber}.${utils_1.normalizeFnName(functionName)}`);});}catch(error){cov_1wmjbuuxyq().s[58]++;this.error(error);}cov_1wmjbuuxyq().s[59]++;try{cov_1wmjbuuxyq().s[60]++;trace=utils_1.setTraceEvents(traceEvents);const traceLoad=(cov_1wmjbuuxyq().s[61]++,trace.filter(utils_1.isCommitLoad));cov_1wmjbuuxyq().s[62]++;traceLoad.forEach(({args:{data:{frame,url}}})=>{cov_1wmjbuuxyq().f[8]++;cov_1wmjbuuxyq().s[63]++;this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);});}catch(error){cov_1wmjbuuxyq().s[64]++;this.error(`${error}`);}cov_1wmjbuuxyq().s[65]++;if(usertimings){cov_1wmjbuuxyq().b[3][0]++;cov_1wmjbuuxyq().s[66]++;await this.markerTimings(traceJSONPath,url);}else{cov_1wmjbuuxyq().b[3][1]++;}}// tracerbench marker-timings cmd moved here
async markerTimings(tracepath,url){cov_1wmjbuuxyq().f[9]++;const traceFrame=(cov_1wmjbuuxyq().s[67]++,url);const filter=(cov_1wmjbuuxyq().s[68]++,utils_1.collect("",[]));let frame=(cov_1wmjbuuxyq().s[69]++,null);let startTime=(cov_1wmjbuuxyq().s[70]++,-1);let rawTraceData=(cov_1wmjbuuxyq().s[71]++,null);let trace=(cov_1wmjbuuxyq().s[72]++,null);cov_1wmjbuuxyq().s[73]++;if((cov_1wmjbuuxyq().b[5][0]++,!traceFrame)&&(cov_1wmjbuuxyq().b[5][1]++,!url)){cov_1wmjbuuxyq().b[4][0]++;cov_1wmjbuuxyq().s[74]++;this.error(`Either a traceFrame or url are required flags.`);}else{cov_1wmjbuuxyq().b[4][1]++;}cov_1wmjbuuxyq().s[75]++;try{cov_1wmjbuuxyq().s[76]++;rawTraceData=await fs_extra_1.readJson(path_1.resolve(tracepath));}catch(e){cov_1wmjbuuxyq().s[77]++;this.error(e);}cov_1wmjbuuxyq().s[78]++;try{cov_1wmjbuuxyq().s[79]++;trace=utils_1.setTraceEvents(rawTraceData);}catch(e){cov_1wmjbuuxyq().s[80]++;this.error(e);}cov_1wmjbuuxyq().s[81]++;if(traceFrame.startsWith("http")){cov_1wmjbuuxyq().b[6][0]++;cov_1wmjbuuxyq().s[82]++;frame=utils_1.findFrame(trace,traceFrame);}else{cov_1wmjbuuxyq().b[6][1]++;cov_1wmjbuuxyq().s[83]++;frame=traceFrame;}cov_1wmjbuuxyq().s[84]++;if(!frame){cov_1wmjbuuxyq().b[7][0]++;cov_1wmjbuuxyq().s[85]++;this.error(`frame not found`);}else{cov_1wmjbuuxyq().b[7][1]++;}cov_1wmjbuuxyq().s[86]++;trace.filter(event=>{cov_1wmjbuuxyq().f[10]++;cov_1wmjbuuxyq().s[87]++;return(cov_1wmjbuuxyq().b[8][0]++,utils_1.isMark(event))||(cov_1wmjbuuxyq().b[8][1]++,utils_1.isCommitLoad(event));}).sort(utils_1.byTime).forEach(event=>{cov_1wmjbuuxyq().f[11]++;cov_1wmjbuuxyq().s[88]++;if(utils_1.isFrameNavigationStart(frame,event)){cov_1wmjbuuxyq().b[9][0]++;cov_1wmjbuuxyq().s[89]++;startTime=event.ts;cov_1wmjbuuxyq().s[90]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1wmjbuuxyq().b[9][1]++;cov_1wmjbuuxyq().s[91]++;if(utils_1.isFrameMark(frame,event)){cov_1wmjbuuxyq().b[10][0]++;cov_1wmjbuuxyq().s[92]++;if(startTime===-1){cov_1wmjbuuxyq().b[11][0]++;cov_1wmjbuuxyq().s[93]++;startTime=event.ts;}else{cov_1wmjbuuxyq().b[11][1]++;}cov_1wmjbuuxyq().s[94]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1wmjbuuxyq().b[10][1]++;cov_1wmjbuuxyq().s[95]++;if(utils_1.isUserMark(event)){cov_1wmjbuuxyq().b[12][0]++;cov_1wmjbuuxyq().s[96]++;if((cov_1wmjbuuxyq().b[14][0]++,filter.length===0)||(cov_1wmjbuuxyq().b[14][1]++,filter.some(f=>{cov_1wmjbuuxyq().f[12]++;cov_1wmjbuuxyq().s[97]++;return event.name.indexOf(f)!==-1;}))){cov_1wmjbuuxyq().b[13][0]++;cov_1wmjbuuxyq().s[98]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1wmjbuuxyq().b[13][1]++;}}else{cov_1wmjbuuxyq().b[12][1]++;cov_1wmjbuuxyq().s[99]++;if(utils_1.isCommitLoad(event)){cov_1wmjbuuxyq().b[15][0]++;const{data}=(cov_1wmjbuuxyq().s[100]++,event.args);cov_1wmjbuuxyq().s[101]++;if(data.frame===frame){cov_1wmjbuuxyq().b[16][0]++;cov_1wmjbuuxyq().s[102]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name} ${data.frame} ${data.url}`);}else{cov_1wmjbuuxyq().b[16][1]++;}}else{cov_1wmjbuuxyq().b[15][1]++;}}}}});}}cov_1wmjbuuxyq().s[103]++;exports.default=Trace;cov_1wmjbuuxyq().s[104]++;Trace.description=`Parses a CPU profile and aggregates time across heuristics.`;cov_1wmjbuuxyq().s[105]++;Trace.args=[args_1.harpath];cov_1wmjbuuxyq().s[106]++;Trace.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true}),usertimings:flags_1.usertimings};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,