"use strict";function cov_gjn95tcx8(){var path="/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts";var hash="5a7581abc9e630a451f9b40fd65dd8fdebdebdca";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:197}},"2":{start:{line:5,column:16},end:{line:5,column:45}},"3":{start:{line:6,column:19},end:{line:6,column:38}},"4":{start:{line:7,column:19},end:{line:7,column:40}},"5":{start:{line:8,column:13},end:{line:8,column:28}},"6":{start:{line:9,column:28},end:{line:9,column:74}},"7":{start:{line:10,column:16},end:{line:10,column:34}},"8":{start:{line:11,column:0},end:{line:11,column:36}},"9":{start:{line:12,column:23},end:{line:12,column:76}},"10":{start:{line:13,column:22},end:{line:13,column:82}},"11":{start:{line:14,column:20},end:{line:14,column:73}},"12":{start:{line:15,column:29},end:{line:15,column:87}},"13":{start:{line:16,column:31},end:{line:16,column:91}},"14":{start:{line:17,column:18},end:{line:17,column:65}},"15":{start:{line:18,column:17},end:{line:18,column:63}},"16":{start:{line:19,column:34},end:{line:19,column:87}},"17":{start:{line:20,column:36},end:{line:20,column:91}},"18":{start:{line:21,column:26},end:{line:21,column:70}},"19":{start:{line:22,column:0},end:{line:24,column:80}},"20":{start:{line:25,column:0},end:{line:25,column:79}},"21":{start:{line:26,column:0},end:{line:26,column:76}},"22":{start:{line:30,column:0},end:{line:32,column:3}},"23":{start:{line:31,column:4},end:{line:31,column:63}},"24":{start:{line:31,column:43},end:{line:31,column:61}},"25":{start:{line:36,column:0},end:{line:38,column:3}},"26":{start:{line:37,column:4},end:{line:37,column:31}},"27":{start:{line:42,column:0},end:{line:44,column:3}},"28":{start:{line:43,column:4},end:{line:43,column:25}},"29":{start:{line:48,column:0},end:{line:52,column:3}},"30":{start:{line:49,column:19},end:{line:49,column:51}},"31":{start:{line:50,column:4},end:{line:50,column:33}},"32":{start:{line:50,column:26},end:{line:50,column:31}},"33":{start:{line:51,column:4},end:{line:51,column:28}},"34":{start:{line:60,column:54},end:{line:60,column:64}},"35":{start:{line:61,column:20},end:{line:61,column:52}},"36":{start:{line:62,column:4},end:{line:69,column:7}},"37":{start:{line:63,column:8},end:{line:63,column:77}},"38":{start:{line:64,column:8},end:{line:68,column:11}},"39":{start:{line:65,column:27},end:{line:65,column:57}},"40":{start:{line:66,column:12},end:{line:66,column:45}},"41":{start:{line:67,column:12},end:{line:67,column:46}},"42":{start:{line:70,column:4},end:{line:70,column:19}},"43":{start:{line:72,column:0},end:{line:72,column:46}},"44":{start:{line:82,column:25},end:{line:88,column:5}},"45":{start:{line:89,column:4},end:{line:98,column:5}},"46":{start:{line:90,column:8},end:{line:97,column:11}},"47":{start:{line:91,column:12},end:{line:96,column:13}},"48":{start:{line:92,column:16},end:{line:92,column:64}},"49":{start:{line:95,column:16},end:{line:95,column:67}},"50":{start:{line:101,column:4},end:{line:103,column:5}},"51":{start:{line:102,column:8},end:{line:102,column:43}},"52":{start:{line:104,column:4},end:{line:104,column:24}},"53":{start:{line:106,column:0},end:{line:106,column:38}},"54":{start:{line:115,column:32},end:{line:115,column:92}},"55":{start:{line:115,column:39},end:{line:115,column:92}},"56":{start:{line:116,column:33},end:{line:116,column:92}},"57":{start:{line:117,column:36},end:{line:117,column:98}},"58":{start:{line:118,column:19},end:{line:118,column:96}},"59":{start:{line:118,column:67},end:{line:118,column:95}},"60":{start:{line:119,column:4},end:{line:123,column:6}},"61":{start:{line:121,column:54},end:{line:121,column:77}},"62":{start:{line:122,column:57},end:{line:122,column:83}},"63":{start:{line:125,column:0},end:{line:125,column:60}},"64":{start:{line:136,column:18},end:{line:140,column:6}},"65":{start:{line:141,column:29},end:{line:143,column:82}},"66":{start:{line:144,column:4},end:{line:171,column:6}},"67":{start:{line:173,column:0},end:{line:173,column:42}},"68":{start:{line:178,column:21},end:{line:178,column:23}},"69":{start:{line:179,column:21},end:{line:179,column:22}},"70":{start:{line:180,column:4},end:{line:188,column:5}},"71":{start:{line:181,column:8},end:{line:187,column:9}},"72":{start:{line:182,column:12},end:{line:182,column:28}},"73":{start:{line:186,column:12},end:{line:186,column:39}},"74":{start:{line:189,column:4},end:{line:193,column:5}},"75":{start:{line:190,column:8},end:{line:192,column:9}},"76":{start:{line:191,column:12},end:{line:191,column:28}},"77":{start:{line:194,column:4},end:{line:194,column:13}},"78":{start:{line:196,column:0},end:{line:196,column:34}},"79":{start:{line:198,column:33},end:{line:198,column:71}},"80":{start:{line:199,column:36},end:{line:199,column:77}},"81":{start:{line:200,column:22},end:{line:200,column:99}},"82":{start:{line:200,column:70},end:{line:200,column:98}},"83":{start:{line:201,column:28},end:{line:201,column:162}},"84":{start:{line:202,column:29},end:{line:208,column:6}},"85":{start:{line:203,column:30},end:{line:203,column:57}},"86":{start:{line:204,column:33},end:{line:204,column:63}},"87":{start:{line:205,column:35},end:{line:205,column:90}},"88":{start:{line:206,column:8},end:{line:206,column:58}},"89":{start:{line:207,column:8},end:{line:207,column:34}},"90":{start:{line:209,column:4},end:{line:209,column:51}},"91":{start:{line:210,column:4},end:{line:210,column:49}},"92":{start:{line:212,column:0},end:{line:212,column:50}},"93":{start:{line:214,column:25},end:{line:214,column:92}},"94":{start:{line:215,column:50},end:{line:215,column:112}},"95":{start:{line:216,column:21},end:{line:216,column:60}},"96":{start:{line:217,column:4},end:{line:224,column:7}},"97":{start:{line:226,column:0},end:{line:226,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:37},end:{line:30,column:38}},loc:{start:{line:30,column:46},end:{line:32,column:1}},line:30},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:36},end:{line:31,column:37}},loc:{start:{line:31,column:43},end:{line:31,column:61}},line:31},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:38},end:{line:36,column:39}},loc:{start:{line:36,column:52},end:{line:38,column:1}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:33},end:{line:42,column:34}},loc:{start:{line:42,column:42},end:{line:44,column:1}},line:42},"4":{name:"(anonymous_4)",decl:{start:{line:48,column:37},end:{line:48,column:38}},loc:{start:{line:48,column:63},end:{line:52,column:1}},line:48},"5":{name:"(anonymous_5)",decl:{start:{line:50,column:16},end:{line:50,column:17}},loc:{start:{line:50,column:26},end:{line:50,column:31}},line:50},"6":{name:"bucketPhaseValues",decl:{start:{line:60,column:9},end:{line:60,column:26}},loc:{start:{line:60,column:66},end:{line:71,column:1}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:60,column:47},end:{line:60,column:48}},loc:{start:{line:60,column:54},end:{line:60,column:64}},line:60},"8":{name:"(anonymous_8)",decl:{start:{line:62,column:20},end:{line:62,column:21}},loc:{start:{line:62,column:32},end:{line:69,column:5}},line:62},"9":{name:"(anonymous_9)",decl:{start:{line:64,column:30},end:{line:64,column:31}},loc:{start:{line:64,column:45},end:{line:68,column:9}},line:64},"10":{name:"resolveTitles",decl:{start:{line:81,column:9},end:{line:81,column:22}},loc:{start:{line:81,column:53},end:{line:105,column:1}},line:81},"11":{name:"(anonymous_11)",decl:{start:{line:90,column:52},end:{line:90,column:53}},loc:{start:{line:90,column:74},end:{line:97,column:9}},line:90},"12":{name:"buildCumulativeChartData",decl:{start:{line:114,column:9},end:{line:114,column:33}},loc:{start:{line:114,column:63},end:{line:124,column:1}},line:114},"13":{name:"(anonymous_13)",decl:{start:{line:115,column:32},end:{line:115,column:33}},loc:{start:{line:115,column:39},end:{line:115,column:92}},line:115},"14":{name:"(anonymous_14)",decl:{start:{line:118,column:60},end:{line:118,column:61}},loc:{start:{line:118,column:67},end:{line:118,column:95}},line:118},"15":{name:"(anonymous_15)",decl:{start:{line:121,column:47},end:{line:121,column:48}},loc:{start:{line:121,column:54},end:{line:121,column:77}},line:121},"16":{name:"(anonymous_16)",decl:{start:{line:122,column:50},end:{line:122,column:51}},loc:{start:{line:122,column:57},end:{line:122,column:83}},line:122},"17":{name:"formatPhaseData",decl:{start:{line:135,column:9},end:{line:135,column:24}},loc:{start:{line:135,column:69},end:{line:172,column:1}},line:135},"18":{name:"phaseSorter",decl:{start:{line:177,column:9},end:{line:177,column:20}},loc:{start:{line:177,column:27},end:{line:195,column:1}},line:177},"19":{name:"generateDataForHTML",decl:{start:{line:197,column:9},end:{line:197,column:28}},loc:{start:{line:197,column:72},end:{line:211,column:1}},line:197},"20":{name:"(anonymous_20)",decl:{start:{line:200,column:63},end:{line:200,column:64}},loc:{start:{line:200,column:70},end:{line:200,column:98}},line:200},"21":{name:"(anonymous_21)",decl:{start:{line:202,column:43},end:{line:202,column:44}},loc:{start:{line:202,column:54},end:{line:208,column:5}},line:202},"22":{name:"createConsumableHTML",decl:{start:{line:213,column:9},end:{line:213,column:29}},loc:{start:{line:213,column:80},end:{line:225,column:1}},line:213}},branchMap:{"0":{loc:{start:{line:60,column:36},end:{line:60,column:64}},type:"default-arg",locations:[{start:{line:60,column:47},end:{line:60,column:64}}],line:60},"1":{loc:{start:{line:65,column:27},end:{line:65,column:57}},type:"binary-expr",locations:[{start:{line:65,column:27},end:{line:65,column:51}},{start:{line:65,column:55},end:{line:65,column:57}}],line:65},"2":{loc:{start:{line:84,column:19},end:{line:86,column:59}},type:"cond-expr",locations:[{start:{line:85,column:14},end:{line:85,column:32}},{start:{line:86,column:14},end:{line:86,column:59}}],line:84},"3":{loc:{start:{line:89,column:4},end:{line:98,column:5}},type:"if",locations:[{start:{line:89,column:4},end:{line:98,column:5}},{start:{line:89,column:4},end:{line:98,column:5}}],line:89},"4":{loc:{start:{line:91,column:12},end:{line:96,column:13}},type:"if",locations:[{start:{line:91,column:12},end:{line:96,column:13}},{start:{line:91,column:12},end:{line:96,column:13}}],line:91},"5":{loc:{start:{line:101,column:4},end:{line:103,column:5}},type:"if",locations:[{start:{line:101,column:4},end:{line:103,column:5}},{start:{line:101,column:4},end:{line:103,column:5}}],line:101},"6":{loc:{start:{line:141,column:29},end:{line:143,column:82}},type:"binary-expr",locations:[{start:{line:141,column:30},end:{line:141,column:62}},{start:{line:141,column:66},end:{line:141,column:98}},{start:{line:142,column:9},end:{line:142,column:41}},{start:{line:142,column:45},end:{line:142,column:77}},{start:{line:143,column:9},end:{line:143,column:43}},{start:{line:143,column:47},end:{line:143,column:81}}],line:141},"7":{loc:{start:{line:180,column:4},end:{line:188,column:5}},type:"if",locations:[{start:{line:180,column:4},end:{line:188,column:5}},{start:{line:180,column:4},end:{line:188,column:5}}],line:180},"8":{loc:{start:{line:181,column:8},end:{line:187,column:9}},type:"if",locations:[{start:{line:181,column:8},end:{line:187,column:9}},{start:{line:181,column:8},end:{line:187,column:9}}],line:181},"9":{loc:{start:{line:189,column:4},end:{line:193,column:5}},type:"if",locations:[{start:{line:189,column:4},end:{line:193,column:5}},{start:{line:189,column:4},end:{line:193,column:5}}],line:189},"10":{loc:{start:{line:190,column:8},end:{line:192,column:9}},type:"if",locations:[{start:{line:190,column:8},end:{line:192,column:9}},{start:{line:190,column:8},end:{line:192,column:9}}],line:190}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Stats } from \"@tracerbench/stats\";\nimport { readFileSync } from \"fs-extra\";\nimport * as Handlebars from \"handlebars\";\nimport * as path from \"path\";\n\nimport { ITBConfig } from \"../command-config\";\nimport { defaultFlagArgs } from \"../command-config/default-flag-args\";\nimport { convertMicrosecondsToMS } from \"./utils\";\n\nexport interface Sample {\n  duration: number;\n  js: number;\n  phases: Array<{\n    phase: string;\n    start: number;\n    duration: number;\n  }>;\n  gc: any;\n  blinkGC: any;\n}\n\nexport interface ITracerBenchTraceResult {\n  meta: {\n    browserVersion: string;\n    cpus: string[];\n  };\n  samples: Sample[];\n  set: string;\n}\n\nexport interface IFormatedSamples {\n  min: number;\n  q1: number;\n  median: number;\n  q3: number;\n  max: number;\n  outliers: number[];\n  samplesMS: number[];\n}\n\nexport interface HTMLSectionRenderData {\n  isSignificant: boolean;\n  ciMin: number;\n  ciMax: number;\n  hlDiff: number;\n  phase: string;\n  identifierHash: string;\n  sampleCount: number;\n  servers: any;\n  controlFormatedSamples: string;\n  experimentFormatedSamples: string;\n}\n\ninterface ValuesByPhase {\n  [key: string]: number[];\n}\n\nexport const PAGE_LOAD_TIME = \"duration\";\n\nconst CHART_CSS_PATH = path.join(__dirname, \"../static/chart-bootstrap.css\");\nconst CHART_JS_PATH = path.join(\n  __dirname,\n  \"../static/chartjs-2.9.3-chart.min.js\"\n);\nconst REPORT_PATH = path.join(__dirname, \"../static/report-template.hbs\");\nconst PHASE_DETAIL_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-detail-partial.hbs\"\n);\nconst PHASE_CHART_JS_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-chart-js-partial.hbs\"\n);\n\nconst CHART_CSS = readFileSync(CHART_CSS_PATH, \"utf8\");\nconst CHART_JS = readFileSync(CHART_JS_PATH, \"utf8\");\nconst PHASE_DETAIL_TEMPLATE_RAW = readFileSync(PHASE_DETAIL_PARTIAL, \"utf8\");\nconst PHASE_CHART_JS_TEMPLATE_RAW = readFileSync(\n  PHASE_CHART_JS_PARTIAL,\n  \"utf8\"\n);\nlet REPORT_TEMPLATE_RAW = readFileSync(REPORT_PATH, \"utf8\");\n\nREPORT_TEMPLATE_RAW = REPORT_TEMPLATE_RAW.toString()\n  .replace(\n    \"{{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}\",\n    `<style>${CHART_CSS}</style>`\n  )\n  .replace(\"{{!-- TRACERBENCH-CHART-JS --}}\", `<script>${CHART_JS}</script>`);\n\nHandlebars.registerPartial(\"phaseChartJSSection\", PHASE_CHART_JS_TEMPLATE_RAW);\nHandlebars.registerPartial(\"phaseDetailSection\", PHASE_DETAIL_TEMPLATE_RAW);\n/**\n * Camel case helper\n */\nHandlebars.registerHelper(\"toCamel\", (val) => {\n  return val.replace(/-([a-z])/g, (g: string) => g[1].toUpperCase());\n});\n\n/**\n * Negative means slower\n */\nHandlebars.registerHelper(\"isFaster\", (analysis) => {\n  return analysis.hlDiff > 0;\n});\n\n/**\n * Absolute number helper\n */\nHandlebars.registerHelper(\"abs\", (num) => {\n  return Math.abs(num);\n});\n\n/**\n * Sort the given numbers by their absolute values\n */\nHandlebars.registerHelper(\"absSort\", (num1, num2, position) => {\n  const sorted = [Math.abs(num1), Math.abs(num2)];\n  sorted.sort((a, b) => a - b);\n  return sorted[position];\n});\n\n/**\n * Extract the phases and page load time latency into sorted buckets by phase\n *\n * @param samples - Array of \"sample\" objects\n * @param valueGen - Calls this function to extract the value from the phase. A\n *   \"phase\" is passed containing duration and start\n */\nexport function bucketPhaseValues(\n  samples: Sample[],\n  valueGen: any = (a: any) => a.duration\n): ValuesByPhase {\n  const buckets: { [key: string]: number[] } = { [PAGE_LOAD_TIME]: [] };\n\n  samples.forEach((sample: Sample) => {\n    buckets[PAGE_LOAD_TIME].push(sample[PAGE_LOAD_TIME]);\n\n    sample.phases.forEach((phaseData) => {\n      const bucket = buckets[phaseData.phase] || [];\n      bucket.push(valueGen(phaseData));\n      buckets[phaseData.phase] = bucket;\n    });\n  });\n\n  return buckets;\n}\n\nexport interface ParsedTitleConfigs {\n  servers: Array<{ name: string }>;\n  plotTitle: string | undefined;\n  browserVersion: string;\n}\n\n/**\n * Override the default server and plot title attributes\n *\n * @param tbConfig - Concerned only about the \"servers\" and \"plotTitle\"\n *   attribute\n * @param version - Browser version\n * @param plotTitle - Optional explicit title from cli flag\n */\nexport function resolveTitles(\n  tbConfig: Partial<ITBConfig>,\n  version: string,\n  plotTitle?: string\n): ParsedTitleConfigs {\n  const reportTitles = {\n    servers: [{ name: \"Control\" }, { name: \"Experiment\" }],\n    plotTitle: tbConfig.plotTitle\n      ? tbConfig.plotTitle\n      : defaultFlagArgs.plotTitle,\n    browserVersion: version,\n  };\n\n  if (tbConfig.servers) {\n    reportTitles.servers = tbConfig.servers.map((titleConfig, idx) => {\n      if (idx === 0) {\n        return { name: `Control: ${titleConfig.name}` };\n      } else {\n        return { name: `Experiment: ${titleConfig.name}` };\n      }\n    });\n  }\n\n  // if passing an explicit plotTitle via cli flag this trumps\n  // the tbConfig.plotTitle and defaults\n  if (plotTitle) {\n    reportTitles.plotTitle = plotTitle;\n  }\n\n  return reportTitles;\n}\n\n/**\n * Generate the HTML render data for the cumulative chart. Ensure to convert to\n * milliseconds for presentation\n *\n * @param controlData - Samples of the benchmark of control server\n * @param experimentData - Samples of the benchmark experiment server\n */\nexport function buildCumulativeChartData(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult\n): { [key: string]: string } {\n  const cumulativeValueFunc = (a: { [key: string]: number }): number =>\n    convertMicrosecondsToMS(a.start + a.duration);\n\n  const valuesByPhaseControl = bucketPhaseValues(\n    controlData.samples,\n    cumulativeValueFunc\n  );\n  const valuesByPhaseExperiment = bucketPhaseValues(\n    experimentData.samples,\n    cumulativeValueFunc\n  );\n  const phases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  return {\n    categories: JSON.stringify(phases),\n    controlData: JSON.stringify(phases.map((k) => valuesByPhaseControl[k])),\n    experimentData: JSON.stringify(\n      phases.map((k) => valuesByPhaseExperiment[k])\n    ),\n  };\n}\n\n/**\n * Call the stats helper functions to generate the confidence interval and\n * Hodges\u2013Lehmann estimator. Format the data into HTMLSectionRenderData\n * structure.\n *\n * @param controlValues - Values for the control for the phase\n * @param experimentValues - Values for the experiment for the phase\n * @param phaseName - Name of the phase the values represent\n */\nexport function formatPhaseData(\n  controlValues: number[],\n  experimentValues: number[],\n  phaseName: string\n): HTMLSectionRenderData {\n  const stats = new Stats({\n    control: controlValues,\n    experiment: experimentValues,\n    name: \"output\",\n  });\n  const isNotSignificant =\n    (stats.confidenceInterval.min < 0 && 0 < stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min > 0 && 0 > stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min === 0 && stats.confidenceInterval.max === 0);\n\n  return {\n    phase: phaseName,\n    identifierHash: phaseName,\n    isSignificant: !isNotSignificant,\n    sampleCount: stats.sampleCount.control,\n    ciMin: stats.confidenceInterval.min,\n    ciMax: stats.confidenceInterval.max,\n    hlDiff: stats.estimator,\n    servers: undefined,\n    controlFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.control.min,\n      q1: stats.sevenFigureSummary.control[25],\n      median: stats.sevenFigureSummary.control[50],\n      q3: stats.sevenFigureSummary.control[75],\n      max: stats.sevenFigureSummary.control.max,\n      outliers: stats.outliers.control.outliers,\n      samplesMS: stats.controlMS,\n    }),\n    experimentFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.experiment.min,\n      q1: stats.sevenFigureSummary.experiment[25],\n      median: stats.sevenFigureSummary.experiment[50],\n      q3: stats.sevenFigureSummary.experiment[75],\n      max: stats.sevenFigureSummary.experiment.max,\n      outliers: stats.outliers.experiment.outliers,\n      samplesMS: stats.experimentMS,\n    }),\n  };\n}\n\n/**\n * Prioritize the phase that has the largest difference in regression first.\n */\nexport function phaseSorter(\n  a: HTMLSectionRenderData,\n  b: HTMLSectionRenderData\n): number {\n  const A_ON_TOP = -1;\n  const B_ON_TOP = 1;\n\n  if (a.isSignificant) {\n    if (!b.isSignificant) {\n      return A_ON_TOP;\n    } else {\n      // If both are significant prefer slowest one\n      return a.hlDiff - b.hlDiff;\n    }\n  }\n\n  if (b.isSignificant) {\n    if (!a.isSignificant) {\n      return B_ON_TOP;\n    }\n  }\n\n  return 0;\n}\n\nexport function generateDataForHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  reportTitles: ParsedTitleConfigs\n): {\n  durationSection: HTMLSectionRenderData;\n  subPhaseSections: HTMLSectionRenderData[];\n} {\n  const valuesByPhaseControl = bucketPhaseValues(controlData.samples);\n  const valuesByPhaseExperiment = bucketPhaseValues(experimentData.samples);\n  const subPhases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  const durationSection = formatPhaseData(\n    valuesByPhaseControl[PAGE_LOAD_TIME],\n    valuesByPhaseExperiment[PAGE_LOAD_TIME],\n    PAGE_LOAD_TIME\n  );\n\n  const subPhaseSections: HTMLSectionRenderData[] = subPhases.map((phase) => {\n    const controlValues = valuesByPhaseControl[phase];\n    const experimentValues = valuesByPhaseExperiment[phase];\n    const renderDataForPhase = formatPhaseData(\n      controlValues,\n      experimentValues,\n      phase\n    );\n\n    renderDataForPhase.servers = reportTitles.servers;\n    return renderDataForPhase as HTMLSectionRenderData;\n  });\n\n  durationSection.servers = reportTitles.servers;\n  return { durationSection, subPhaseSections };\n}\n\nexport default function createConsumableHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  tbConfig: ITBConfig,\n  plotTitle?: string\n): string {\n  const reportTitles = resolveTitles(\n    tbConfig,\n    controlData.meta.browserVersion,\n    plotTitle\n  );\n  const { durationSection, subPhaseSections } = generateDataForHTML(\n    controlData,\n    experimentData,\n    reportTitles\n  );\n\n  const template = Handlebars.compile(REPORT_TEMPLATE_RAW);\n\n  return template({\n    cumulativeChartData: buildCumulativeChartData(controlData, experimentData),\n    durationSection,\n    reportTitles,\n    subPhaseSections,\n    configsSJSONString: JSON.stringify(tbConfig, null, 4),\n    sectionFormattedDataJson: JSON.stringify(subPhaseSections),\n  });\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5a7581abc9e630a451f9b40fd65dd8fdebdebdca"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_gjn95tcx8=function(){return actualCoverage;};}return actualCoverage;}cov_gjn95tcx8();cov_gjn95tcx8().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_gjn95tcx8().s[1]++;exports.generateDataForHTML=exports.phaseSorter=exports.formatPhaseData=exports.buildCumulativeChartData=exports.resolveTitles=exports.bucketPhaseValues=exports.PAGE_LOAD_TIME=void 0;/* eslint-disable @typescript-eslint/no-explicit-any */const stats_1=(cov_gjn95tcx8().s[2]++,require("@tracerbench/stats"));const fs_extra_1=(cov_gjn95tcx8().s[3]++,require("fs-extra"));const Handlebars=(cov_gjn95tcx8().s[4]++,require("handlebars"));const path=(cov_gjn95tcx8().s[5]++,require("path"));const default_flag_args_1=(cov_gjn95tcx8().s[6]++,require("../command-config/default-flag-args"));const utils_1=(cov_gjn95tcx8().s[7]++,require("./utils"));cov_gjn95tcx8().s[8]++;exports.PAGE_LOAD_TIME="duration";const CHART_CSS_PATH=(cov_gjn95tcx8().s[9]++,path.join(__dirname,"../static/chart-bootstrap.css"));const CHART_JS_PATH=(cov_gjn95tcx8().s[10]++,path.join(__dirname,"../static/chartjs-2.9.3-chart.min.js"));const REPORT_PATH=(cov_gjn95tcx8().s[11]++,path.join(__dirname,"../static/report-template.hbs"));const PHASE_DETAIL_PARTIAL=(cov_gjn95tcx8().s[12]++,path.join(__dirname,"../static/phase-detail-partial.hbs"));const PHASE_CHART_JS_PARTIAL=(cov_gjn95tcx8().s[13]++,path.join(__dirname,"../static/phase-chart-js-partial.hbs"));const CHART_CSS=(cov_gjn95tcx8().s[14]++,fs_extra_1.readFileSync(CHART_CSS_PATH,"utf8"));const CHART_JS=(cov_gjn95tcx8().s[15]++,fs_extra_1.readFileSync(CHART_JS_PATH,"utf8"));const PHASE_DETAIL_TEMPLATE_RAW=(cov_gjn95tcx8().s[16]++,fs_extra_1.readFileSync(PHASE_DETAIL_PARTIAL,"utf8"));const PHASE_CHART_JS_TEMPLATE_RAW=(cov_gjn95tcx8().s[17]++,fs_extra_1.readFileSync(PHASE_CHART_JS_PARTIAL,"utf8"));let REPORT_TEMPLATE_RAW=(cov_gjn95tcx8().s[18]++,fs_extra_1.readFileSync(REPORT_PATH,"utf8"));cov_gjn95tcx8().s[19]++;REPORT_TEMPLATE_RAW=REPORT_TEMPLATE_RAW.toString().replace("{{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}",`<style>${CHART_CSS}</style>`).replace("{{!-- TRACERBENCH-CHART-JS --}}",`<script>${CHART_JS}</script>`);cov_gjn95tcx8().s[20]++;Handlebars.registerPartial("phaseChartJSSection",PHASE_CHART_JS_TEMPLATE_RAW);cov_gjn95tcx8().s[21]++;Handlebars.registerPartial("phaseDetailSection",PHASE_DETAIL_TEMPLATE_RAW);/**
 * Camel case helper
 */cov_gjn95tcx8().s[22]++;Handlebars.registerHelper("toCamel",val=>{cov_gjn95tcx8().f[0]++;cov_gjn95tcx8().s[23]++;return val.replace(/-([a-z])/g,g=>{cov_gjn95tcx8().f[1]++;cov_gjn95tcx8().s[24]++;return g[1].toUpperCase();});});/**
 * Negative means slower
 */cov_gjn95tcx8().s[25]++;Handlebars.registerHelper("isFaster",analysis=>{cov_gjn95tcx8().f[2]++;cov_gjn95tcx8().s[26]++;return analysis.hlDiff>0;});/**
 * Absolute number helper
 */cov_gjn95tcx8().s[27]++;Handlebars.registerHelper("abs",num=>{cov_gjn95tcx8().f[3]++;cov_gjn95tcx8().s[28]++;return Math.abs(num);});/**
 * Sort the given numbers by their absolute values
 */cov_gjn95tcx8().s[29]++;Handlebars.registerHelper("absSort",(num1,num2,position)=>{cov_gjn95tcx8().f[4]++;const sorted=(cov_gjn95tcx8().s[30]++,[Math.abs(num1),Math.abs(num2)]);cov_gjn95tcx8().s[31]++;sorted.sort((a,b)=>{cov_gjn95tcx8().f[5]++;cov_gjn95tcx8().s[32]++;return a-b;});cov_gjn95tcx8().s[33]++;return sorted[position];});/**
 * Extract the phases and page load time latency into sorted buckets by phase
 *
 * @param samples - Array of "sample" objects
 * @param valueGen - Calls this function to extract the value from the phase. A
 *   "phase" is passed containing duration and start
 */function bucketPhaseValues(samples,valueGen=(cov_gjn95tcx8().b[0][0]++,a=>{cov_gjn95tcx8().f[7]++;cov_gjn95tcx8().s[34]++;return a.duration;})){cov_gjn95tcx8().f[6]++;const buckets=(cov_gjn95tcx8().s[35]++,{[exports.PAGE_LOAD_TIME]:[]});cov_gjn95tcx8().s[36]++;samples.forEach(sample=>{cov_gjn95tcx8().f[8]++;cov_gjn95tcx8().s[37]++;buckets[exports.PAGE_LOAD_TIME].push(sample[exports.PAGE_LOAD_TIME]);cov_gjn95tcx8().s[38]++;sample.phases.forEach(phaseData=>{cov_gjn95tcx8().f[9]++;const bucket=(cov_gjn95tcx8().s[39]++,(cov_gjn95tcx8().b[1][0]++,buckets[phaseData.phase])||(cov_gjn95tcx8().b[1][1]++,[]));cov_gjn95tcx8().s[40]++;bucket.push(valueGen(phaseData));cov_gjn95tcx8().s[41]++;buckets[phaseData.phase]=bucket;});});cov_gjn95tcx8().s[42]++;return buckets;}cov_gjn95tcx8().s[43]++;exports.bucketPhaseValues=bucketPhaseValues;/**
 * Override the default server and plot title attributes
 *
 * @param tbConfig - Concerned only about the "servers" and "plotTitle"
 *   attribute
 * @param version - Browser version
 * @param plotTitle - Optional explicit title from cli flag
 */function resolveTitles(tbConfig,version,plotTitle){cov_gjn95tcx8().f[10]++;const reportTitles=(cov_gjn95tcx8().s[44]++,{servers:[{name:"Control"},{name:"Experiment"}],plotTitle:tbConfig.plotTitle?(cov_gjn95tcx8().b[2][0]++,tbConfig.plotTitle):(cov_gjn95tcx8().b[2][1]++,default_flag_args_1.defaultFlagArgs.plotTitle),browserVersion:version});cov_gjn95tcx8().s[45]++;if(tbConfig.servers){cov_gjn95tcx8().b[3][0]++;cov_gjn95tcx8().s[46]++;reportTitles.servers=tbConfig.servers.map((titleConfig,idx)=>{cov_gjn95tcx8().f[11]++;cov_gjn95tcx8().s[47]++;if(idx===0){cov_gjn95tcx8().b[4][0]++;cov_gjn95tcx8().s[48]++;return{name:`Control: ${titleConfig.name}`};}else{cov_gjn95tcx8().b[4][1]++;cov_gjn95tcx8().s[49]++;return{name:`Experiment: ${titleConfig.name}`};}});}else{cov_gjn95tcx8().b[3][1]++;}// if passing an explicit plotTitle via cli flag this trumps
// the tbConfig.plotTitle and defaults
cov_gjn95tcx8().s[50]++;if(plotTitle){cov_gjn95tcx8().b[5][0]++;cov_gjn95tcx8().s[51]++;reportTitles.plotTitle=plotTitle;}else{cov_gjn95tcx8().b[5][1]++;}cov_gjn95tcx8().s[52]++;return reportTitles;}cov_gjn95tcx8().s[53]++;exports.resolveTitles=resolveTitles;/**
 * Generate the HTML render data for the cumulative chart. Ensure to convert to
 * milliseconds for presentation
 *
 * @param controlData - Samples of the benchmark of control server
 * @param experimentData - Samples of the benchmark experiment server
 */function buildCumulativeChartData(controlData,experimentData){cov_gjn95tcx8().f[12]++;cov_gjn95tcx8().s[54]++;const cumulativeValueFunc=a=>{cov_gjn95tcx8().f[13]++;cov_gjn95tcx8().s[55]++;return utils_1.convertMicrosecondsToMS(a.start+a.duration);};const valuesByPhaseControl=(cov_gjn95tcx8().s[56]++,bucketPhaseValues(controlData.samples,cumulativeValueFunc));const valuesByPhaseExperiment=(cov_gjn95tcx8().s[57]++,bucketPhaseValues(experimentData.samples,cumulativeValueFunc));const phases=(cov_gjn95tcx8().s[58]++,Object.keys(valuesByPhaseControl).filter(k=>{cov_gjn95tcx8().f[14]++;cov_gjn95tcx8().s[59]++;return k!==exports.PAGE_LOAD_TIME;}));cov_gjn95tcx8().s[60]++;return{categories:JSON.stringify(phases),controlData:JSON.stringify(phases.map(k=>{cov_gjn95tcx8().f[15]++;cov_gjn95tcx8().s[61]++;return valuesByPhaseControl[k];})),experimentData:JSON.stringify(phases.map(k=>{cov_gjn95tcx8().f[16]++;cov_gjn95tcx8().s[62]++;return valuesByPhaseExperiment[k];}))};}cov_gjn95tcx8().s[63]++;exports.buildCumulativeChartData=buildCumulativeChartData;/**
 * Call the stats helper functions to generate the confidence interval and
 * Hodges–Lehmann estimator. Format the data into HTMLSectionRenderData
 * structure.
 *
 * @param controlValues - Values for the control for the phase
 * @param experimentValues - Values for the experiment for the phase
 * @param phaseName - Name of the phase the values represent
 */function formatPhaseData(controlValues,experimentValues,phaseName){cov_gjn95tcx8().f[17]++;const stats=(cov_gjn95tcx8().s[64]++,new stats_1.Stats({control:controlValues,experiment:experimentValues,name:"output"}));const isNotSignificant=(cov_gjn95tcx8().s[65]++,(cov_gjn95tcx8().b[6][0]++,stats.confidenceInterval.min<0)&&(cov_gjn95tcx8().b[6][1]++,0<stats.confidenceInterval.max)||(cov_gjn95tcx8().b[6][2]++,stats.confidenceInterval.min>0)&&(cov_gjn95tcx8().b[6][3]++,0>stats.confidenceInterval.max)||(cov_gjn95tcx8().b[6][4]++,stats.confidenceInterval.min===0)&&(cov_gjn95tcx8().b[6][5]++,stats.confidenceInterval.max===0));cov_gjn95tcx8().s[66]++;return{phase:phaseName,identifierHash:phaseName,isSignificant:!isNotSignificant,sampleCount:stats.sampleCount.control,ciMin:stats.confidenceInterval.min,ciMax:stats.confidenceInterval.max,hlDiff:stats.estimator,servers:undefined,controlFormatedSamples:JSON.stringify({min:stats.sevenFigureSummary.control.min,q1:stats.sevenFigureSummary.control[25],median:stats.sevenFigureSummary.control[50],q3:stats.sevenFigureSummary.control[75],max:stats.sevenFigureSummary.control.max,outliers:stats.outliers.control.outliers,samplesMS:stats.controlMS}),experimentFormatedSamples:JSON.stringify({min:stats.sevenFigureSummary.experiment.min,q1:stats.sevenFigureSummary.experiment[25],median:stats.sevenFigureSummary.experiment[50],q3:stats.sevenFigureSummary.experiment[75],max:stats.sevenFigureSummary.experiment.max,outliers:stats.outliers.experiment.outliers,samplesMS:stats.experimentMS})};}cov_gjn95tcx8().s[67]++;exports.formatPhaseData=formatPhaseData;/**
 * Prioritize the phase that has the largest difference in regression first.
 */function phaseSorter(a,b){cov_gjn95tcx8().f[18]++;const A_ON_TOP=(cov_gjn95tcx8().s[68]++,-1);const B_ON_TOP=(cov_gjn95tcx8().s[69]++,1);cov_gjn95tcx8().s[70]++;if(a.isSignificant){cov_gjn95tcx8().b[7][0]++;cov_gjn95tcx8().s[71]++;if(!b.isSignificant){cov_gjn95tcx8().b[8][0]++;cov_gjn95tcx8().s[72]++;return A_ON_TOP;}else{cov_gjn95tcx8().b[8][1]++;cov_gjn95tcx8().s[73]++;// If both are significant prefer slowest one
return a.hlDiff-b.hlDiff;}}else{cov_gjn95tcx8().b[7][1]++;}cov_gjn95tcx8().s[74]++;if(b.isSignificant){cov_gjn95tcx8().b[9][0]++;cov_gjn95tcx8().s[75]++;if(!a.isSignificant){cov_gjn95tcx8().b[10][0]++;cov_gjn95tcx8().s[76]++;return B_ON_TOP;}else{cov_gjn95tcx8().b[10][1]++;}}else{cov_gjn95tcx8().b[9][1]++;}cov_gjn95tcx8().s[77]++;return 0;}cov_gjn95tcx8().s[78]++;exports.phaseSorter=phaseSorter;function generateDataForHTML(controlData,experimentData,reportTitles){cov_gjn95tcx8().f[19]++;const valuesByPhaseControl=(cov_gjn95tcx8().s[79]++,bucketPhaseValues(controlData.samples));const valuesByPhaseExperiment=(cov_gjn95tcx8().s[80]++,bucketPhaseValues(experimentData.samples));const subPhases=(cov_gjn95tcx8().s[81]++,Object.keys(valuesByPhaseControl).filter(k=>{cov_gjn95tcx8().f[20]++;cov_gjn95tcx8().s[82]++;return k!==exports.PAGE_LOAD_TIME;}));const durationSection=(cov_gjn95tcx8().s[83]++,formatPhaseData(valuesByPhaseControl[exports.PAGE_LOAD_TIME],valuesByPhaseExperiment[exports.PAGE_LOAD_TIME],exports.PAGE_LOAD_TIME));const subPhaseSections=(cov_gjn95tcx8().s[84]++,subPhases.map(phase=>{cov_gjn95tcx8().f[21]++;const controlValues=(cov_gjn95tcx8().s[85]++,valuesByPhaseControl[phase]);const experimentValues=(cov_gjn95tcx8().s[86]++,valuesByPhaseExperiment[phase]);const renderDataForPhase=(cov_gjn95tcx8().s[87]++,formatPhaseData(controlValues,experimentValues,phase));cov_gjn95tcx8().s[88]++;renderDataForPhase.servers=reportTitles.servers;cov_gjn95tcx8().s[89]++;return renderDataForPhase;}));cov_gjn95tcx8().s[90]++;durationSection.servers=reportTitles.servers;cov_gjn95tcx8().s[91]++;return{durationSection,subPhaseSections};}cov_gjn95tcx8().s[92]++;exports.generateDataForHTML=generateDataForHTML;function createConsumableHTML(controlData,experimentData,tbConfig,plotTitle){cov_gjn95tcx8().f[22]++;const reportTitles=(cov_gjn95tcx8().s[93]++,resolveTitles(tbConfig,controlData.meta.browserVersion,plotTitle));const{durationSection,subPhaseSections}=(cov_gjn95tcx8().s[94]++,generateDataForHTML(controlData,experimentData,reportTitles));const template=(cov_gjn95tcx8().s[95]++,Handlebars.compile(REPORT_TEMPLATE_RAW));cov_gjn95tcx8().s[96]++;return template({cumulativeChartData:buildCumulativeChartData(controlData,experimentData),durationSection,reportTitles,subPhaseSections,configsSJSONString:JSON.stringify(tbConfig,null,4),sectionFormattedDataJson:JSON.stringify(subPhaseSections)});}cov_gjn95tcx8().s[97]++;exports.default=createConsumableHTML;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,