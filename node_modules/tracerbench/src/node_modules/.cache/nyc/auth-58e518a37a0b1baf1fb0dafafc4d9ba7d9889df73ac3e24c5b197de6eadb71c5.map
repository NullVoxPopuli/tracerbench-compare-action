{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/record-har/auth.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/record-har/auth.ts"],"names":[],"mappings":";;AAAA,6CAA6C;AAC7C,4CAA+C;AAE/C,uCAAyC;AACzC,+BAAqC;AAErC,yDAAgE;AAChE,8EAAuE;AACvE,+CAQ6B;AAY7B,MAAqB,aAAc,SAAQ,8BAAa;IAY/C,KAAK,CAAC,IAAI;QACf,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,0BAAS,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,IAAI;aAC/D,YAAoC,CAAC;QACxC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;QAExC,sDAAsD;QACtD,IAAI,QAAQ,EAAE;YACZ,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;gBACtC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,iCAAa,CAAC;gBACnC,CAAC,CAAC,iCAAa,CAAC;SACnB;QAED,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,iBAAU,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QAEvE,MAAM,WAAW,GAAG,cAAO,CAAC,WAAI,CAAC,IAAI,EAAE,GAAG,QAAQ,OAAO,CAAC,CAAC,CAAC;QAE5D,wBAAa,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,GAAG,CAAC,0BAA0B,WAAW,EAAE,CAAC,CAAC;QAElD,OAAO,OAAO,CAAC;IACjB,CAAC;;AAvCH,gCAwCC;AAvCe,yBAAW,GACvB,mFAAmF,CAAC;AACxE,mBAAK,GAAG;IACpB,GAAG,EAAE,WAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChD,IAAI,EAAE,YAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IACxD,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAC1D,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,MAAM,EAAE,cAAM,EAAE;IAChB,QAAQ,EAAR,gBAAQ;CACT,CAAC","sourcesContent":["/* eslint-disable filenames/match-exported */\nimport { authClient } from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\nimport { writeFileSync } from \"fs-extra\";\nimport { join, resolve } from \"path\";\n\nimport { getConfig, TBBaseCommand } from \"../../command-config\";\nimport { headlessFlags } from \"../../command-config/default-flag-args\";\nimport {\n  config,\n  dest,\n  filename,\n  headless,\n  password,\n  url,\n  username,\n} from \"../../helpers/flags\";\n\ntype RecordHARAuthOptions = {\n  url: string;\n  dest: string;\n  filename: string;\n  username: string;\n  config: string;\n  headless: boolean;\n  password: string;\n};\n\nexport default class RecordHARAuth extends TBBaseCommand {\n  public static description =\n    \"Authenticate with a given login URL, username, password and retrieve auth cookies\";\n  public static flags = {\n    url: url({ required: true, default: undefined }),\n    dest: dest({ required: true, default: `process.cwd()` }),\n    filename: filename({ required: true, default: \"cookies\" }),\n    username: username({ required: true }),\n    password: password({ required: true }),\n    config: config(),\n    headless,\n  };\n  public async init(): Promise<void> {\n    const { flags } = this.parse(RecordHARAuth);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n  }\n\n  public async run(): Promise<Protocol.Network.CookieParam[]> {\n    const { headless, url, username, password, filename, dest } = this\n      .parsedConfig as RecordHARAuthOptions;\n    let { browserArgs } = this.parsedConfig;\n\n    // if headless flag is true include the headless flags\n    if (headless) {\n      browserArgs = Array.isArray(browserArgs)\n        ? browserArgs.concat(headlessFlags)\n        : headlessFlags;\n    }\n\n    // login to the url provided and retrieve the cookies\n    const cookies = await authClient(url, username, password, browserArgs);\n\n    const cookiesPath = resolve(join(dest, `${filename}.json`));\n\n    writeFileSync(cookiesPath, JSON.stringify(cookies));\n\n    this.log(`  âœ” Cookies retrieved: ${cookiesPath}`);\n\n    return cookies;\n  }\n}\n"]}