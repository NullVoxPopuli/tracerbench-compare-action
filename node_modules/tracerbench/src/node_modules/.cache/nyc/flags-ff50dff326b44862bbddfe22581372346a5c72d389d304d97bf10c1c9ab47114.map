{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/helpers/flags.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint:disable:no-console*/\nimport { flags as oclifFlags } from \"@oclif/command\";\nimport { networkConditions } from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\n\nimport {\n  fidelityLookup,\n  getDefaultValue,\n} from \"../command-config/default-flag-args\";\nimport deviceSettings, {\n  EmulateDeviceSettingCliOption,\n} from \"./device-settings\";\nimport { parseMarkers } from \"./utils\";\n/*\n! oclif oclifFlags.build#parse will only execute when the flag:string is passed directly\n! from the cli. thus when passed via the tbconfig.json or the defaultFlagArgs\n! the parse method will never execute\n! todo: mitigate above by either extending the flags oclif command calling parse\n! and type checking in all circumstances\n*/\nexport const isCIEnv = oclifFlags.build({\n  description: `Provides a drastically slimmed down stdout report for CI workflows. However does NOT hide analysis.`,\n  default: () => getDefaultValue(\"isCIEnv\"),\n  parse: (ci): boolean => {\n    // if boolean return\n    if (typeof ci === \"boolean\") {\n      return ci;\n    }\n    // if string return boolean value\n    return ci === \"true\";\n  },\n});\n\nexport const hideUsertimings = oclifFlags.boolean({\n  description: `Hide stdout of user-timings.`,\n  default: false,\n});\n\nexport const runtimeStats = oclifFlags.boolean({\n  description: `Compare command output deep-dive stats during run.`,\n  default: false,\n});\n\nexport const servers = oclifFlags.build({\n  description: `Optional servers config for A/B testing with har-remix dist slicing with socks proxy. All paths within this config are relative.`,\n});\n\nexport const plotTitle = oclifFlags.build({\n  default: () => getDefaultValue(\"plotTitle\"),\n  description: `Specify the title of the report pdf/html files.`,\n});\n\nexport const config = oclifFlags.build({\n  description: `Specify an alternative directory rather than the project root for the tbconfig.json. This explicit config will overwrite all.`,\n});\n\nexport const report = oclifFlags.boolean({\n  description: `Generate a PDF report directly after running the compare command.`,\n  default: false,\n});\n\nexport const headless = oclifFlags.boolean({\n  description: `Run with headless chrome flags`,\n  default: false,\n});\n\nexport const debug = oclifFlags.boolean({\n  description: `Debug flag per command. Will output noisy command`,\n  default: false,\n});\n\nexport const regressionThreshold: oclifFlags.Definition<\n  string | number\n> = oclifFlags.build({\n  default: () => getDefaultValue(\"regressionThreshold\"),\n  description: `The upper limit the experiment can regress slower in milliseconds. eg 50`,\n  parse: (ms): number => {\n    return parseInt(ms, 10);\n  },\n});\n\nexport const sampleTimeout: oclifFlags.Definition<number> = oclifFlags.build({\n  default: () => getDefaultValue(\"sampleTimeout\"),\n  description: `The number of seconds to wait for a sample.`,\n  parse: (ms): number => {\n    return parseInt(ms, 10);\n  },\n});\n\nexport const browserArgs = oclifFlags.build({\n  default: () => getDefaultValue(\"browserArgs\"),\n  description: `(Default Recommended) Additional chrome flags for the TracerBench render benchmark. TracerBench includes many non-configurable defaults in this category.`,\n  parse: (s): string[] => {\n    return s.split(\",\");\n  },\n});\n\nexport const appName = oclifFlags.build({\n  default: () => getDefaultValue(\"appName\"),\n  description: \"The name of your application\",\n});\n\nexport const event = oclifFlags.build({\n  default: () => getDefaultValue(\"event\"),\n  description: \"Slice time and see the events before and after the time slice\",\n});\n\nexport const methods = oclifFlags.build({\n  default: () => getDefaultValue(\"methods\"),\n  description: \"List of methods to aggregate\",\n});\n\nexport const cpuThrottleRate: oclifFlags.Definition<number> = oclifFlags.build({\n  default: () => getDefaultValue(\"cpuThrottleRate\"),\n  description: \"CPU throttle multiplier\",\n  parse: (cpuThrottleRate): number => {\n    return parseInt(cpuThrottleRate, 10);\n  },\n});\n\nexport const fidelity = oclifFlags.build({\n  default: () => getDefaultValue(\"fidelity\"),\n  description: `Directly correlates to the number of samples per trace. eg. ${Object.keys(\n    fidelityLookup\n  )} OR any number between 2-100`,\n  parse: (fidelity: string | number): number => {\n    const warnMessage = `Expected --fidelity=${fidelity} to be either a number or one of: ${Object.keys(\n      fidelityLookup\n    )}. Defaulting to ${getDefaultValue(\"fidelity\")}`;\n\n    if (typeof fidelity === \"string\") {\n      // integers are coming as string from oclif\n      if (Number.isInteger(parseInt(fidelity, 10))) {\n        return parseInt(fidelity, 10);\n      }\n      // is a string and is either test/low/med/high\n      if (Object.keys(fidelityLookup).includes(fidelity)) {\n        return parseInt((fidelityLookup as any)[fidelity], 10);\n      } else {\n        console.warn(`${warnMessage}`);\n      }\n    }\n    return fidelity === \"number\" ? fidelity : getDefaultValue(\"fidelity\");\n  },\n});\n\nexport const markers = oclifFlags.build({\n  default: () => getDefaultValue(\"markers\"),\n  description: \"User Timing Markers\",\n  parse: parseMarkers,\n});\n\nexport const network = oclifFlags.build({\n  default: () => getDefaultValue(\"network\"),\n  description: \"Simulated network conditions.\",\n  options: [\n    \"none\",\n    \"offline\",\n    \"dialup\",\n    \"slow-2g\",\n    \"2g\",\n    \"slow-edge\",\n    \"edge\",\n    \"slow-3g\",\n    \"dsl\",\n    \"3g\",\n    \"fast-3g\",\n    \"4g\",\n    \"cable\",\n    \"LTE\",\n    \"FIOS\",\n  ],\n  parse: (n: string): Protocol.Network.EmulateNetworkConditionsRequest => {\n    return networkConditions[n as keyof typeof networkConditions];\n  },\n});\n\nexport const tbResultsFolder = oclifFlags.build({\n  default: () => getDefaultValue(\"tbResultsFolder\"),\n  description: \"The output folder path for all tracerbench results\",\n});\n\nexport const url = oclifFlags.build({\n  default: () => getDefaultValue(\"url\"),\n  description: \"URL to visit for record-har, auth, timings & trace commands\",\n});\n\nexport const controlURL = oclifFlags.build({\n  default: () => getDefaultValue(\"controlURL\"),\n  description: \"Control URL to visit for compare command\",\n});\n\nexport const experimentURL = oclifFlags.build({\n  default: () => getDefaultValue(\"experimentURL\"),\n  description: \"Experiment URL to visit for compare command\",\n});\n\nexport const socksPorts = oclifFlags.build({\n  default: () => getDefaultValue(\"socksPorts\"),\n  description:\n    \"Specify a socks proxy port as browser option for control and experiment\",\n  parse: (s: string): [number, number] | undefined => {\n    if (typeof s === \"string\") {\n      const a = s.split(\",\");\n      if (a.length > 2) {\n        console.error(`Maximium of two socks ports can be passed`);\n      }\n\n      return [parseInt(a[0], 10), parseInt(a[1], 10)] as [number, number];\n    }\n  },\n});\n\nexport const emulateDevice = oclifFlags.build({\n  default: () => getDefaultValue(\"emulateDevice\"),\n  description: `Emulate a mobile device screen size.`,\n  options: deviceSettings.map(\n    (setting: EmulateDeviceSettingCliOption) => `${setting.typeable}`\n  ),\n});\n\nexport const emulateDeviceOrientation = oclifFlags.build({\n  default: () => getDefaultValue(\"emulateDeviceOrientation\"),\n  description: `Expected to be either \"vertical\" or \"horizontal\". Dictates orientation of device screen.`,\n  options: [\"horizontal\", \"vertical\"],\n});\n\nexport const cookiespath = oclifFlags.build({\n  description: `The path to a JSON file containing cookies to authenticate against the correlated URL`,\n  default: () => getDefaultValue(\"cookiespath\"),\n});\n\nexport const tbconfigpath = oclifFlags.build({\n  description: `The path to a TracerBench configuration file (tbconfig.json)`,\n});\n\nexport const tracepath = oclifFlags.build({\n  description: `The path to the generated trace.json file`,\n});\n\nexport const dest = oclifFlags.build({\n  default: () => getDefaultValue(\"dest\"),\n  description: `The destination path for the generated file`,\n});\n\nexport const filename = oclifFlags.build({\n  description: `The filename for the generated file`,\n});\n\nexport const marker = oclifFlags.build({\n  description: `The last marker before ending a HAR recording`,\n  default: \"loadEventEnd\",\n});\n\nexport const username = oclifFlags.build({\n  description: `The username to login to the form`,\n  required: true,\n});\n\nexport const password = oclifFlags.build({\n  description: `The password to login to the form`,\n  required: true,\n});\n"]}