"use strict";function cov_1wmjbuuxyq(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts";var hash="fca4ac2751a8e9f531e6bf4a4505be64c6ea16ab";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:13},end:{line:6,column:28}},"4":{start:{line:7,column:25},end:{line:7,column:53}},"5":{start:{line:8,column:16},end:{line:8,column:43}},"6":{start:{line:9,column:16},end:{line:9,column:43}},"7":{start:{line:12,column:26},end:{line:12,column:43}},"8":{start:{line:13,column:111},end:{line:13,column:116}},"9":{start:{line:14,column:24},end:{line:14,column:28}},"10":{start:{line:15,column:28},end:{line:15,column:80}},"11":{start:{line:16,column:25},end:{line:16,column:46}},"12":{start:{line:17,column:29},end:{line:17,column:64}},"13":{start:{line:18,column:27},end:{line:21,column:9}},"14":{start:{line:24,column:8},end:{line:31,column:9}},"15":{start:{line:25,column:12},end:{line:27,column:13}},"16":{start:{line:26,column:16},end:{line:26,column:54}},"17":{start:{line:30,column:12},end:{line:30,column:30}},"18":{start:{line:33,column:8},end:{line:33,column:114}},"19":{start:{line:35,column:32},end:{line:35,column:101}},"20":{start:{line:36,column:31},end:{line:40,column:9}},"21":{start:{line:42,column:8},end:{line:42,column:45}},"22":{start:{line:43,column:8},end:{line:106,column:9}},"23":{start:{line:46,column:34},end:{line:46,column:35}},"24":{start:{line:47,column:35},end:{line:47,column:36}},"25":{start:{line:48,column:28},end:{line:48,column:37}},"26":{start:{line:49,column:12},end:{line:54,column:13}},"27":{start:{line:50,column:16},end:{line:50,column:60}},"28":{start:{line:53,column:16},end:{line:53,column:39}},"29":{start:{line:55,column:12},end:{line:63,column:15}},"30":{start:{line:56,column:35},end:{line:56,column:66}},"31":{start:{line:57,column:35},end:{line:57,column:54}},"32":{start:{line:59,column:28},end:{line:59,column:47}},"33":{start:{line:60,column:37},end:{line:60,column:53}},"34":{start:{line:61,column:16},end:{line:61,column:48}},"35":{start:{line:62,column:16},end:{line:62,column:67}},"36":{start:{line:65,column:12},end:{line:65,column:92}},"37":{start:{line:67,column:12},end:{line:75,column:15}},"38":{start:{line:68,column:35},end:{line:68,column:73}},"39":{start:{line:69,column:35},end:{line:69,column:64}},"40":{start:{line:71,column:28},end:{line:71,column:57}},"41":{start:{line:72,column:37},end:{line:72,column:53}},"42":{start:{line:73,column:16},end:{line:73,column:49}},"43":{start:{line:74,column:16},end:{line:74,column:68}},"44":{start:{line:77,column:12},end:{line:77,column:94}},"45":{start:{line:79,column:12},end:{line:95,column:13}},"46":{start:{line:80,column:32},end:{line:80,column:74}},"47":{start:{line:81,column:16},end:{line:91,column:17}},"48":{start:{line:82,column:20},end:{line:85,column:23}},"49":{start:{line:83,column:81},end:{line:83,column:95}},"50":{start:{line:84,column:24},end:{line:84,column:117}},"51":{start:{line:88,column:20},end:{line:90,column:23}},"52":{start:{line:89,column:24},end:{line:89,column:90}},"53":{start:{line:94,column:16},end:{line:94,column:34}},"54":{start:{line:96,column:12},end:{line:105,column:13}},"55":{start:{line:97,column:16},end:{line:97,column:60}},"56":{start:{line:98,column:34},end:{line:98,column:68}},"57":{start:{line:99,column:16},end:{line:101,column:19}},"58":{start:{line:100,column:20},end:{line:100,column:71}},"59":{start:{line:104,column:16},end:{line:104,column:39}},"60":{start:{line:109,column:0},end:{line:109,column:24}},"61":{start:{line:110,column:0},end:{line:110,column:125}},"62":{start:{line:111,column:0},end:{line:121,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:16},end:{line:107,column:5}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:56,column:24},end:{line:56,column:25}},loc:{start:{line:56,column:35},end:{line:56,column:66}},line:56},"2":{name:"(anonymous_2)",decl:{start:{line:57,column:24},end:{line:57,column:25}},loc:{start:{line:57,column:35},end:{line:57,column:54}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:58,column:25},end:{line:58,column:26}},loc:{start:{line:58,column:36},end:{line:63,column:13}},line:58},"4":{name:"(anonymous_4)",decl:{start:{line:68,column:24},end:{line:68,column:25}},loc:{start:{line:68,column:35},end:{line:68,column:73}},line:68},"5":{name:"(anonymous_5)",decl:{start:{line:69,column:24},end:{line:69,column:25}},loc:{start:{line:69,column:35},end:{line:69,column:64}},line:69},"6":{name:"(anonymous_6)",decl:{start:{line:70,column:25},end:{line:70,column:26}},loc:{start:{line:70,column:36},end:{line:75,column:13}},line:70},"7":{name:"(anonymous_7)",decl:{start:{line:82,column:44},end:{line:82,column:45}},loc:{start:{line:82,column:54},end:{line:85,column:21}},line:82},"8":{name:"(anonymous_8)",decl:{start:{line:88,column:44},end:{line:88,column:45}},loc:{start:{line:88,column:54},end:{line:90,column:21}},line:88},"9":{name:"(anonymous_9)",decl:{start:{line:99,column:34},end:{line:99,column:35}},loc:{start:{line:99,column:76},end:{line:101,column:17}},line:99}},branchMap:{"0":{loc:{start:{line:25,column:12},end:{line:27,column:13}},type:"if",locations:[{start:{line:25,column:12},end:{line:27,column:13}},{start:{line:25,column:12},end:{line:27,column:13}}],line:25},"1":{loc:{start:{line:43,column:8},end:{line:106,column:9}},type:"if",locations:[{start:{line:43,column:8},end:{line:106,column:9}},{start:{line:43,column:8},end:{line:106,column:9}}],line:43},"2":{loc:{start:{line:81,column:16},end:{line:91,column:17}},type:"if",locations:[{start:{line:81,column:16},end:{line:91,column:17}},{start:{line:81,column:16},end:{line:91,column:17}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/trace.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport {\n  analyze,\n  IAnalyze,\n  IConditions,\n  ITraceEvent,\n  liveTrace,\n  loadTrace,\n} from \"@tracerbench/core\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  harpath,\n  insights,\n  iterations,\n  locations,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  isCommitLoad,\n  normalizeFnName,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\nexport default class Trace extends TBBaseCommand {\n  public static description = `Parses a CPU profile and aggregates time across heuristics. Can be vertically sliced with event names.`;\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    harpath: harpath({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    iterations: iterations({ required: true }),\n    locations: locations(),\n    insights,\n  };\n\n  public async run() {\n    const { flags } = this.parse(Trace);\n    const {\n      url,\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      insights,\n      locations,\n      network,\n      harpath,\n    } = flags;\n\n    const methods = [\"\"];\n    const cookiesJSON = await readJson(path.resolve(cookiespath));\n    const traceHAR = path.resolve(harpath);\n    const traceHARJSON = await readJson(traceHAR);\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    try {\n      if (!existsSync(tbResultsFolder)) {\n        mkdirSync(tbResultsFolder);\n      }\n    } catch (error) {\n      this.error(error);\n    }\n    // write the trace.json\n    writeFileSync(\n      path.join(tbResultsFolder, \"trace.json\"),\n      JSON.stringify(traceHARJSON, null, 2)\n    );\n\n    // run the liveTrace\n    const { traceEvents } = await liveTrace(\n      url,\n      tbResultsFolder,\n      cookiesJSON,\n      conditions\n    );\n\n    const analyzeOptions: IAnalyze = {\n      traceEvents,\n      traceHARJSON,\n      methods,\n    };\n\n    // analyze the liveTrace\n    await analyze(analyzeOptions);\n\n    if (insights) {\n      // js-eval-time\n      let trace: any;\n      let totalJSDuration = 0;\n      let totalCSSDuration = 0;\n\n      const methods = new Set();\n\n      try {\n        trace = setTraceEvents(traceEvents);\n      } catch (error) {\n        this.error(`${error}`);\n      }\n\n      trace\n        .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n        .filter((event: any) => event.args.data.url)\n        .forEach((event: any) => {\n          const url = event.args.data.url;\n          const durationInMs = (event.dur as number) / 1000;\n          totalJSDuration += durationInMs;\n          this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);\n        });\n\n      // log js-eval-time\n      this.log(\n        `JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \\n\\n`\n      );\n\n      // css-parse\n      trace\n        .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n        .filter((event: any) => event.args.data.styleSheetUrl)\n        .forEach((event: any) => {\n          const url = event.args.data.styleSheetUrl;\n          const durationInMs = event.dur / 1000;\n          totalCSSDuration += durationInMs;\n          this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);\n        });\n\n      // log css-parse-time\n      this.log(\n        `CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \\n\\n`\n      );\n\n      // list-functions\n      try {\n        const profile = loadTrace(trace).cpuProfile(-1, -1);\n        if (locations) {\n          profile.nodeMap.forEach((node: any) => {\n            const {\n              functionName,\n              url,\n              lineNumber,\n              columnNumber,\n            } = node.callFrame;\n\n            methods.add(\n              `${url}:${lineNumber}:${columnNumber}.${normalizeFnName(\n                functionName\n              )}`\n            );\n          });\n        } else {\n          profile.nodeMap.forEach((node: any) => {\n            methods.add(normalizeFnName(node.callFrame.functionName));\n          });\n        }\n      } catch (error) {\n        this.error(error);\n      }\n\n      try {\n        trace = setTraceEvents(traceEvents);\n        const traceLoad = trace.filter(isCommitLoad);\n        traceLoad.forEach(\n          ({\n            args: {\n              data: { frame, url },\n            },\n          }: {\n            args: { data: { frame: any; url: any } };\n          }) => {\n            this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);\n          }\n        );\n      } catch (error) {\n        this.error(`${error}`);\n      }\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fca4ac2751a8e9f531e6bf4a4505be64c6ea16ab"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1wmjbuuxyq=function(){return actualCoverage;};return actualCoverage;}cov_1wmjbuuxyq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/explicit-function-return-type */const core_1=(cov_1wmjbuuxyq().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1wmjbuuxyq().s[2]++,require("fs-extra"));const path=(cov_1wmjbuuxyq().s[3]++,require("path"));const command_config_1=(cov_1wmjbuuxyq().s[4]++,require("../command-config"));const flags_1=(cov_1wmjbuuxyq().s[5]++,require("../helpers/flags"));const utils_1=(cov_1wmjbuuxyq().s[6]++,require("../helpers/utils"));class Trace extends(command_config_1.TBBaseCommand){async run(){cov_1wmjbuuxyq().f[0]++;const{flags}=(cov_1wmjbuuxyq().s[7]++,this.parse(Trace));const{url,cpuThrottleRate,cookiespath,tbResultsFolder,insights,locations,network,harpath}=(cov_1wmjbuuxyq().s[8]++,flags);const methods=(cov_1wmjbuuxyq().s[9]++,[""]);const cookiesJSON=(cov_1wmjbuuxyq().s[10]++,await fs_extra_1.readJson(path.resolve(cookiespath)));const traceHAR=(cov_1wmjbuuxyq().s[11]++,path.resolve(harpath));const traceHARJSON=(cov_1wmjbuuxyq().s[12]++,await fs_extra_1.readJson(traceHAR));const conditions=(cov_1wmjbuuxyq().s[13]++,{cpu:cpuThrottleRate,network});// if the folder for the tracerbench results file
// does not exist then create it
cov_1wmjbuuxyq().s[14]++;try{cov_1wmjbuuxyq().s[15]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1wmjbuuxyq().b[0][0]++;cov_1wmjbuuxyq().s[16]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1wmjbuuxyq().b[0][1]++;}}catch(error){cov_1wmjbuuxyq().s[17]++;this.error(error);}// write the trace.json
cov_1wmjbuuxyq().s[18]++;fs_extra_1.writeFileSync(path.join(tbResultsFolder,"trace.json"),JSON.stringify(traceHARJSON,null,2));// run the liveTrace
const{traceEvents}=(cov_1wmjbuuxyq().s[19]++,await core_1.liveTrace(url,tbResultsFolder,cookiesJSON,conditions));const analyzeOptions=(cov_1wmjbuuxyq().s[20]++,{traceEvents,traceHARJSON,methods});// analyze the liveTrace
cov_1wmjbuuxyq().s[21]++;await core_1.analyze(analyzeOptions);cov_1wmjbuuxyq().s[22]++;if(insights){cov_1wmjbuuxyq().b[1][0]++;// js-eval-time
let trace;let totalJSDuration=(cov_1wmjbuuxyq().s[23]++,0);let totalCSSDuration=(cov_1wmjbuuxyq().s[24]++,0);const methods=(cov_1wmjbuuxyq().s[25]++,new Set());cov_1wmjbuuxyq().s[26]++;try{cov_1wmjbuuxyq().s[27]++;trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1wmjbuuxyq().s[28]++;this.error(`${error}`);}cov_1wmjbuuxyq().s[29]++;trace.filter(event=>{cov_1wmjbuuxyq().f[1]++;cov_1wmjbuuxyq().s[30]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1wmjbuuxyq().f[2]++;cov_1wmjbuuxyq().s[31]++;return event.args.data.url;}).forEach(event=>{cov_1wmjbuuxyq().f[3]++;const url=(cov_1wmjbuuxyq().s[32]++,event.args.data.url);const durationInMs=(cov_1wmjbuuxyq().s[33]++,event.dur/1000);cov_1wmjbuuxyq().s[34]++;totalJSDuration+=durationInMs;cov_1wmjbuuxyq().s[35]++;this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);});// log js-eval-time
cov_1wmjbuuxyq().s[36]++;this.log(`JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \n\n`);// css-parse
cov_1wmjbuuxyq().s[37]++;trace.filter(event=>{cov_1wmjbuuxyq().f[4]++;cov_1wmjbuuxyq().s[38]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1wmjbuuxyq().f[5]++;cov_1wmjbuuxyq().s[39]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1wmjbuuxyq().f[6]++;const url=(cov_1wmjbuuxyq().s[40]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1wmjbuuxyq().s[41]++,event.dur/1000);cov_1wmjbuuxyq().s[42]++;totalCSSDuration+=durationInMs;cov_1wmjbuuxyq().s[43]++;this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);});// log css-parse-time
cov_1wmjbuuxyq().s[44]++;this.log(`CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \n\n`);// list-functions
cov_1wmjbuuxyq().s[45]++;try{const profile=(cov_1wmjbuuxyq().s[46]++,core_1.loadTrace(trace).cpuProfile(-1,-1));cov_1wmjbuuxyq().s[47]++;if(locations){cov_1wmjbuuxyq().b[2][0]++;cov_1wmjbuuxyq().s[48]++;profile.nodeMap.forEach(node=>{cov_1wmjbuuxyq().f[7]++;const{functionName,url,lineNumber,columnNumber}=(cov_1wmjbuuxyq().s[49]++,node.callFrame);cov_1wmjbuuxyq().s[50]++;methods.add(`${url}:${lineNumber}:${columnNumber}.${utils_1.normalizeFnName(functionName)}`);});}else{cov_1wmjbuuxyq().b[2][1]++;cov_1wmjbuuxyq().s[51]++;profile.nodeMap.forEach(node=>{cov_1wmjbuuxyq().f[8]++;cov_1wmjbuuxyq().s[52]++;methods.add(utils_1.normalizeFnName(node.callFrame.functionName));});}}catch(error){cov_1wmjbuuxyq().s[53]++;this.error(error);}cov_1wmjbuuxyq().s[54]++;try{cov_1wmjbuuxyq().s[55]++;trace=utils_1.setTraceEvents(traceEvents);const traceLoad=(cov_1wmjbuuxyq().s[56]++,trace.filter(utils_1.isCommitLoad));cov_1wmjbuuxyq().s[57]++;traceLoad.forEach(({args:{data:{frame,url}}})=>{cov_1wmjbuuxyq().f[9]++;cov_1wmjbuuxyq().s[58]++;this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);});}catch(error){cov_1wmjbuuxyq().s[59]++;this.error(`${error}`);}}else{cov_1wmjbuuxyq().b[1][1]++;}}}cov_1wmjbuuxyq().s[60]++;exports.default=Trace;cov_1wmjbuuxyq().s[61]++;Trace.description=`Parses a CPU profile and aggregates time across heuristics. Can be vertically sliced with event names.`;cov_1wmjbuuxyq().s[62]++;Trace.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),harpath:flags_1.harpath({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true}),iterations:flags_1.iterations({required:true}),locations:flags_1.locations(),insights:flags_1.insights};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,