"use strict";function cov_gjn95tcx8(){var path="/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts";var hash="f8b45a64cd53699fa310f372305c5e73280e0569";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:16},end:{line:4,column:45}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:19},end:{line:6,column:40}},"4":{start:{line:7,column:13},end:{line:7,column:28}},"5":{start:{line:8,column:28},end:{line:8,column:74}},"6":{start:{line:9,column:16},end:{line:9,column:34}},"7":{start:{line:10,column:0},end:{line:10,column:36}},"8":{start:{line:11,column:23},end:{line:11,column:76}},"9":{start:{line:12,column:22},end:{line:12,column:82}},"10":{start:{line:13,column:20},end:{line:13,column:73}},"11":{start:{line:14,column:29},end:{line:14,column:87}},"12":{start:{line:15,column:31},end:{line:15,column:91}},"13":{start:{line:16,column:18},end:{line:16,column:65}},"14":{start:{line:17,column:17},end:{line:17,column:63}},"15":{start:{line:18,column:34},end:{line:18,column:87}},"16":{start:{line:19,column:36},end:{line:19,column:91}},"17":{start:{line:20,column:26},end:{line:20,column:70}},"18":{start:{line:21,column:0},end:{line:23,column:80}},"19":{start:{line:24,column:0},end:{line:24,column:79}},"20":{start:{line:25,column:0},end:{line:25,column:76}},"21":{start:{line:29,column:0},end:{line:31,column:3}},"22":{start:{line:30,column:4},end:{line:30,column:63}},"23":{start:{line:30,column:43},end:{line:30,column:61}},"24":{start:{line:35,column:0},end:{line:37,column:3}},"25":{start:{line:36,column:4},end:{line:36,column:31}},"26":{start:{line:41,column:0},end:{line:43,column:3}},"27":{start:{line:42,column:4},end:{line:42,column:25}},"28":{start:{line:47,column:0},end:{line:51,column:3}},"29":{start:{line:48,column:19},end:{line:48,column:51}},"30":{start:{line:49,column:4},end:{line:49,column:33}},"31":{start:{line:49,column:26},end:{line:49,column:31}},"32":{start:{line:50,column:4},end:{line:50,column:28}},"33":{start:{line:59,column:54},end:{line:59,column:64}},"34":{start:{line:60,column:20},end:{line:60,column:52}},"35":{start:{line:61,column:4},end:{line:68,column:7}},"36":{start:{line:62,column:8},end:{line:62,column:77}},"37":{start:{line:63,column:8},end:{line:67,column:11}},"38":{start:{line:64,column:27},end:{line:64,column:57}},"39":{start:{line:65,column:12},end:{line:65,column:45}},"40":{start:{line:66,column:12},end:{line:66,column:46}},"41":{start:{line:69,column:4},end:{line:69,column:19}},"42":{start:{line:71,column:0},end:{line:71,column:46}},"43":{start:{line:80,column:25},end:{line:84,column:5}},"44":{start:{line:85,column:4},end:{line:94,column:5}},"45":{start:{line:86,column:8},end:{line:93,column:11}},"46":{start:{line:87,column:12},end:{line:92,column:13}},"47":{start:{line:88,column:16},end:{line:88,column:64}},"48":{start:{line:91,column:16},end:{line:91,column:67}},"49":{start:{line:95,column:4},end:{line:97,column:5}},"50":{start:{line:96,column:8},end:{line:96,column:52}},"51":{start:{line:98,column:4},end:{line:98,column:24}},"52":{start:{line:100,column:0},end:{line:100,column:38}},"53":{start:{line:109,column:32},end:{line:109,column:92}},"54":{start:{line:109,column:39},end:{line:109,column:92}},"55":{start:{line:110,column:33},end:{line:110,column:92}},"56":{start:{line:111,column:36},end:{line:111,column:98}},"57":{start:{line:112,column:19},end:{line:112,column:96}},"58":{start:{line:112,column:67},end:{line:112,column:95}},"59":{start:{line:113,column:4},end:{line:117,column:6}},"60":{start:{line:115,column:54},end:{line:115,column:77}},"61":{start:{line:116,column:57},end:{line:116,column:83}},"62":{start:{line:119,column:0},end:{line:119,column:60}},"63":{start:{line:130,column:18},end:{line:134,column:6}},"64":{start:{line:135,column:29},end:{line:137,column:82}},"65":{start:{line:138,column:4},end:{line:165,column:6}},"66":{start:{line:167,column:0},end:{line:167,column:42}},"67":{start:{line:172,column:21},end:{line:172,column:23}},"68":{start:{line:173,column:21},end:{line:173,column:22}},"69":{start:{line:174,column:4},end:{line:182,column:5}},"70":{start:{line:175,column:8},end:{line:181,column:9}},"71":{start:{line:176,column:12},end:{line:176,column:28}},"72":{start:{line:180,column:12},end:{line:180,column:39}},"73":{start:{line:183,column:4},end:{line:187,column:5}},"74":{start:{line:184,column:8},end:{line:186,column:9}},"75":{start:{line:185,column:12},end:{line:185,column:28}},"76":{start:{line:188,column:4},end:{line:188,column:13}},"77":{start:{line:190,column:0},end:{line:190,column:34}},"78":{start:{line:192,column:33},end:{line:192,column:71}},"79":{start:{line:193,column:36},end:{line:193,column:77}},"80":{start:{line:194,column:22},end:{line:194,column:99}},"81":{start:{line:194,column:70},end:{line:194,column:98}},"82":{start:{line:195,column:28},end:{line:195,column:162}},"83":{start:{line:196,column:29},end:{line:202,column:6}},"84":{start:{line:197,column:30},end:{line:197,column:57}},"85":{start:{line:198,column:33},end:{line:198,column:63}},"86":{start:{line:199,column:35},end:{line:199,column:90}},"87":{start:{line:200,column:8},end:{line:200,column:58}},"88":{start:{line:201,column:8},end:{line:201,column:34}},"89":{start:{line:203,column:4},end:{line:203,column:51}},"90":{start:{line:204,column:4},end:{line:204,column:49}},"91":{start:{line:206,column:0},end:{line:206,column:50}},"92":{start:{line:208,column:25},end:{line:208,column:81}},"93":{start:{line:209,column:50},end:{line:209,column:112}},"94":{start:{line:210,column:21},end:{line:210,column:60}},"95":{start:{line:211,column:4},end:{line:218,column:7}},"96":{start:{line:220,column:0},end:{line:220,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:37},end:{line:29,column:38}},loc:{start:{line:29,column:46},end:{line:31,column:1}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:30,column:36},end:{line:30,column:37}},loc:{start:{line:30,column:43},end:{line:30,column:61}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:38},end:{line:35,column:39}},loc:{start:{line:35,column:52},end:{line:37,column:1}},line:35},"3":{name:"(anonymous_3)",decl:{start:{line:41,column:33},end:{line:41,column:34}},loc:{start:{line:41,column:42},end:{line:43,column:1}},line:41},"4":{name:"(anonymous_4)",decl:{start:{line:47,column:37},end:{line:47,column:38}},loc:{start:{line:47,column:63},end:{line:51,column:1}},line:47},"5":{name:"(anonymous_5)",decl:{start:{line:49,column:16},end:{line:49,column:17}},loc:{start:{line:49,column:26},end:{line:49,column:31}},line:49},"6":{name:"bucketPhaseValues",decl:{start:{line:59,column:9},end:{line:59,column:26}},loc:{start:{line:59,column:66},end:{line:70,column:1}},line:59},"7":{name:"(anonymous_7)",decl:{start:{line:59,column:47},end:{line:59,column:48}},loc:{start:{line:59,column:54},end:{line:59,column:64}},line:59},"8":{name:"(anonymous_8)",decl:{start:{line:61,column:20},end:{line:61,column:21}},loc:{start:{line:61,column:32},end:{line:68,column:5}},line:61},"9":{name:"(anonymous_9)",decl:{start:{line:63,column:30},end:{line:63,column:31}},loc:{start:{line:63,column:45},end:{line:67,column:9}},line:63},"10":{name:"resolveTitles",decl:{start:{line:79,column:9},end:{line:79,column:22}},loc:{start:{line:79,column:42},end:{line:99,column:1}},line:79},"11":{name:"(anonymous_11)",decl:{start:{line:86,column:52},end:{line:86,column:53}},loc:{start:{line:86,column:74},end:{line:93,column:9}},line:86},"12":{name:"buildCumulativeChartData",decl:{start:{line:108,column:9},end:{line:108,column:33}},loc:{start:{line:108,column:63},end:{line:118,column:1}},line:108},"13":{name:"(anonymous_13)",decl:{start:{line:109,column:32},end:{line:109,column:33}},loc:{start:{line:109,column:39},end:{line:109,column:92}},line:109},"14":{name:"(anonymous_14)",decl:{start:{line:112,column:60},end:{line:112,column:61}},loc:{start:{line:112,column:67},end:{line:112,column:95}},line:112},"15":{name:"(anonymous_15)",decl:{start:{line:115,column:47},end:{line:115,column:48}},loc:{start:{line:115,column:54},end:{line:115,column:77}},line:115},"16":{name:"(anonymous_16)",decl:{start:{line:116,column:50},end:{line:116,column:51}},loc:{start:{line:116,column:57},end:{line:116,column:83}},line:116},"17":{name:"formatPhaseData",decl:{start:{line:129,column:9},end:{line:129,column:24}},loc:{start:{line:129,column:69},end:{line:166,column:1}},line:129},"18":{name:"phaseSorter",decl:{start:{line:171,column:9},end:{line:171,column:20}},loc:{start:{line:171,column:27},end:{line:189,column:1}},line:171},"19":{name:"generateDataForHTML",decl:{start:{line:191,column:9},end:{line:191,column:28}},loc:{start:{line:191,column:72},end:{line:205,column:1}},line:191},"20":{name:"(anonymous_20)",decl:{start:{line:194,column:63},end:{line:194,column:64}},loc:{start:{line:194,column:70},end:{line:194,column:98}},line:194},"21":{name:"(anonymous_21)",decl:{start:{line:196,column:43},end:{line:196,column:44}},loc:{start:{line:196,column:54},end:{line:202,column:5}},line:196},"22":{name:"createConsumableHTML",decl:{start:{line:207,column:9},end:{line:207,column:29}},loc:{start:{line:207,column:69},end:{line:219,column:1}},line:207}},branchMap:{"0":{loc:{start:{line:59,column:36},end:{line:59,column:64}},type:"default-arg",locations:[{start:{line:59,column:47},end:{line:59,column:64}}],line:59},"1":{loc:{start:{line:64,column:27},end:{line:64,column:57}},type:"binary-expr",locations:[{start:{line:64,column:27},end:{line:64,column:51}},{start:{line:64,column:55},end:{line:64,column:57}}],line:64},"2":{loc:{start:{line:85,column:4},end:{line:94,column:5}},type:"if",locations:[{start:{line:85,column:4},end:{line:94,column:5}},{start:{line:85,column:4},end:{line:94,column:5}}],line:85},"3":{loc:{start:{line:87,column:12},end:{line:92,column:13}},type:"if",locations:[{start:{line:87,column:12},end:{line:92,column:13}},{start:{line:87,column:12},end:{line:92,column:13}}],line:87},"4":{loc:{start:{line:95,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:95,column:4},end:{line:97,column:5}},{start:{line:95,column:4},end:{line:97,column:5}}],line:95},"5":{loc:{start:{line:135,column:29},end:{line:137,column:82}},type:"binary-expr",locations:[{start:{line:135,column:30},end:{line:135,column:62}},{start:{line:135,column:66},end:{line:135,column:98}},{start:{line:136,column:9},end:{line:136,column:41}},{start:{line:136,column:45},end:{line:136,column:77}},{start:{line:137,column:9},end:{line:137,column:43}},{start:{line:137,column:47},end:{line:137,column:81}}],line:135},"6":{loc:{start:{line:174,column:4},end:{line:182,column:5}},type:"if",locations:[{start:{line:174,column:4},end:{line:182,column:5}},{start:{line:174,column:4},end:{line:182,column:5}}],line:174},"7":{loc:{start:{line:175,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:175,column:8},end:{line:181,column:9}},{start:{line:175,column:8},end:{line:181,column:9}}],line:175},"8":{loc:{start:{line:183,column:4},end:{line:187,column:5}},type:"if",locations:[{start:{line:183,column:4},end:{line:187,column:5}},{start:{line:183,column:4},end:{line:187,column:5}}],line:183},"9":{loc:{start:{line:184,column:8},end:{line:186,column:9}},type:"if",locations:[{start:{line:184,column:8},end:{line:186,column:9}},{start:{line:184,column:8},end:{line:186,column:9}}],line:184}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts"],names:[],mappings:";;AAAA,uDAAuD;AACvD,8CAA2C;AAC3C,uCAAwC;AACxC,yCAAyC;AACzC,6BAA6B;AAG7B,2EAAsE;AACtE,mCAAkD;AAkDrC,QAAA,cAAc,GAAG,UAAU,CAAC;AAEzC,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,+BAA+B,CAAC,CAAC;AAC7E,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAC7B,SAAS,EACT,sCAAsC,CACvC,CAAC;AACF,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,+BAA+B,CAAC,CAAC;AAC1E,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CACpC,SAAS,EACT,oCAAoC,CACrC,CAAC;AACF,MAAM,sBAAsB,GAAG,IAAI,CAAC,IAAI,CACtC,SAAS,EACT,sCAAsC,CACvC,CAAC;AAEF,MAAM,SAAS,GAAG,uBAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACvD,MAAM,QAAQ,GAAG,uBAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AACrD,MAAM,yBAAyB,GAAG,uBAAY,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;AAC7E,MAAM,2BAA2B,GAAG,uBAAY,CAC9C,sBAAsB,EACtB,MAAM,CACP,CAAC;AACF,IAAI,mBAAmB,GAAG,uBAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAE5D,mBAAmB,GAAG,mBAAmB,CAAC,QAAQ,EAAE;KACjD,OAAO,CACN,4CAA4C,EAC5C,UAAU,SAAS,UAAU,CAC9B;KACA,OAAO,CAAC,iCAAiC,EAAE,WAAW,QAAQ,WAAW,CAAC,CAAC;AAE9E,UAAU,CAAC,eAAe,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;AAC/E,UAAU,CAAC,eAAe,CAAC,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;AAC5E;;GAEG;AACH,UAAU,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;IAC3C,OAAO,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,UAAU,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;IACjD,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,UAAU,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;IACvC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,UAAU,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;IAC5D,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7B,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC;AAEH;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAC/B,OAAiB,EACjB,WAAgB,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ;IAEtC,MAAM,OAAO,GAAgC,EAAE,CAAC,sBAAc,CAAC,EAAE,EAAE,EAAE,CAAC;IAEtE,OAAO,CAAC,OAAO,CAAC,CAAC,MAAc,EAAE,EAAE;QACjC,OAAO,CAAC,sBAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAc,CAAC,CAAC,CAAC;QAErD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YAClC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AAjBD,8CAiBC;AAQD;;;;;;GAMG;AACH,SAAgB,aAAa,CAC3B,QAA4B,EAC5B,OAAe;IAEf,MAAM,YAAY,GAAG;QACnB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;QACtD,SAAS,EAAE,mCAAe,CAAC,SAAS;QACpC,cAAc,EAAE,OAAO;KACxB,CAAC;IAEF,IAAI,QAAQ,CAAC,OAAO,EAAE;QACpB,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE;YAC/D,IAAI,GAAG,KAAK,CAAC,EAAE;gBACb,OAAO,EAAE,IAAI,EAAE,YAAY,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;aACjD;iBAAM;gBACL,OAAO,EAAE,IAAI,EAAE,eAAe,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;aACpD;QACH,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;KAC7C;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAzBD,sCAyBC;AAED;;;;;;GAMG;AACH,SAAgB,wBAAwB,CACtC,WAAoC,EACpC,cAAuC;IAEvC,MAAM,mBAAmB,GAAG,CAAC,CAA4B,EAAU,EAAE,CACnE,+BAAuB,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;IAEhD,MAAM,oBAAoB,GAAG,iBAAiB,CAC5C,WAAW,CAAC,OAAO,EACnB,mBAAmB,CACpB,CAAC;IACF,MAAM,uBAAuB,GAAG,iBAAiB,CAC/C,cAAc,CAAC,OAAO,EACtB,mBAAmB,CACpB,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,sBAAc,CAC5B,CAAC;IAEF,OAAO;QACL,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAClC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,cAAc,EAAE,IAAI,CAAC,SAAS,CAC5B,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAC9C;KACF,CAAC;AACJ,CAAC;AA1BD,4DA0BC;AAED;;;;;;;;GAQG;AACH,SAAgB,eAAe,CAC7B,aAAuB,EACvB,gBAA0B,EAC1B,SAAiB;IAEjB,MAAM,KAAK,GAAG,IAAI,aAAK,CAAC;QACtB,OAAO,EAAE,aAAa;QACtB,UAAU,EAAE,gBAAgB;QAC5B,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IACH,MAAM,gBAAgB,GACpB,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC;QACtE,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC;QACtE,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAE7E,OAAO;QACL,KAAK,EAAE,SAAS;QAChB,cAAc,EAAE,SAAS;QACzB,aAAa,EAAE,CAAC,gBAAgB;QAChC,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,OAAO;QACtC,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,GAAG;QACnC,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,GAAG;QACnC,MAAM,EAAE,KAAK,CAAC,SAAS;QACvB,OAAO,EAAE,SAAS;QAClB,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC;YACrC,GAAG,EAAE,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG;YACzC,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACxC,MAAM,EAAE,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5C,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACxC,GAAG,EAAE,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG;YACzC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ;YACzC,SAAS,EAAE,KAAK,CAAC,SAAS;SAC3B,CAAC;QACF,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC;YACxC,GAAG,EAAE,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG;YAC5C,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC3C,MAAM,EAAE,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC/C,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC3C,GAAG,EAAE,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG;YAC5C,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ;YAC5C,SAAS,EAAE,KAAK,CAAC,YAAY;SAC9B,CAAC;KACH,CAAC;AACJ,CAAC;AA3CD,0CA2CC;AAED;;GAEG;AACH,SAAgB,WAAW,CACzB,CAAwB,EACxB,CAAwB;IAExB,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,CAAC;IAEnB,IAAI,CAAC,CAAC,aAAa,EAAE;QACnB,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE;YACpB,OAAO,QAAQ,CAAC;SACjB;aAAM;YACL,6CAA6C;YAC7C,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;SAC5B;KACF;IAED,IAAI,CAAC,CAAC,aAAa,EAAE;QACnB,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE;YACpB,OAAO,QAAQ,CAAC;SACjB;KACF;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAvBD,kCAuBC;AAED,SAAgB,mBAAmB,CACjC,WAAoC,EACpC,cAAuC,EACvC,YAAgC;IAKhC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACpE,MAAM,uBAAuB,GAAG,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAC1E,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,MAAM,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,sBAAc,CAC5B,CAAC;IAEF,MAAM,eAAe,GAAG,eAAe,CACrC,oBAAoB,CAAC,sBAAc,CAAC,EACpC,uBAAuB,CAAC,sBAAc,CAAC,EACvC,sBAAc,CACf,CAAC;IAEF,MAAM,gBAAgB,GAA4B,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACxE,MAAM,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAClD,MAAM,gBAAgB,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACxD,MAAM,kBAAkB,GAAG,eAAe,CACxC,aAAa,EACb,gBAAgB,EAChB,KAAK,CACN,CAAC;QAEF,kBAAkB,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;QAClD,OAAO,kBAA2C,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;IAC/C,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,CAAC;AAC/C,CAAC;AAnCD,kDAmCC;AAED,SAAwB,oBAAoB,CAC1C,WAAoC,EACpC,cAAuC,EACvC,QAAmB;IAEnB,MAAM,YAAY,GAAG,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9E,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,GAAG,mBAAmB,CAC/D,WAAW,EACX,cAAc,EACd,YAAY,CACb,CAAC;IAEF,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAEzD,OAAO,QAAQ,CAAC;QACd,mBAAmB,EAAE,wBAAwB,CAAC,WAAW,EAAE,cAAc,CAAC;QAC1E,eAAe;QACf,YAAY;QACZ,gBAAgB;QAChB,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACrD,wBAAwB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;KAC3D,CAAC,CAAC;AACL,CAAC;AAtBD,uCAsBC",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Stats } from \"@tracerbench/stats\";\nimport { readFileSync } from \"fs-extra\";\nimport * as Handlebars from \"handlebars\";\nimport * as path from \"path\";\n\nimport { ITBConfig } from \"../command-config\";\nimport { defaultFlagArgs } from \"../command-config/default-flag-args\";\nimport { convertMicrosecondsToMS } from \"./utils\";\n\nexport interface Sample {\n  duration: number;\n  js: number;\n  phases: Array<{\n    phase: string;\n    start: number;\n    duration: number;\n  }>;\n  gc: any;\n  blinkGC: any;\n}\n\nexport interface ITracerBenchTraceResult {\n  meta: {\n    browserVersion: string;\n    cpus: string[];\n  };\n  samples: Sample[];\n  set: string;\n}\n\nexport interface IFormatedSamples {\n  min: number;\n  q1: number;\n  median: number;\n  q3: number;\n  max: number;\n  outliers: number[];\n  samplesMS: number[];\n}\n\nexport interface HTMLSectionRenderData {\n  isSignificant: boolean;\n  ciMin: number;\n  ciMax: number;\n  hlDiff: number;\n  phase: string;\n  identifierHash: string;\n  sampleCount: number;\n  servers: any;\n  controlFormatedSamples: string;\n  experimentFormatedSamples: string;\n}\n\ninterface ValuesByPhase {\n  [key: string]: number[];\n}\n\nexport const PAGE_LOAD_TIME = \"duration\";\n\nconst CHART_CSS_PATH = path.join(__dirname, \"../static/chart-bootstrap.css\");\nconst CHART_JS_PATH = path.join(\n  __dirname,\n  \"../static/chartjs-2.9.3-chart.min.js\"\n);\nconst REPORT_PATH = path.join(__dirname, \"../static/report-template.hbs\");\nconst PHASE_DETAIL_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-detail-partial.hbs\"\n);\nconst PHASE_CHART_JS_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-chart-js-partial.hbs\"\n);\n\nconst CHART_CSS = readFileSync(CHART_CSS_PATH, \"utf8\");\nconst CHART_JS = readFileSync(CHART_JS_PATH, \"utf8\");\nconst PHASE_DETAIL_TEMPLATE_RAW = readFileSync(PHASE_DETAIL_PARTIAL, \"utf8\");\nconst PHASE_CHART_JS_TEMPLATE_RAW = readFileSync(\n  PHASE_CHART_JS_PARTIAL,\n  \"utf8\"\n);\nlet REPORT_TEMPLATE_RAW = readFileSync(REPORT_PATH, \"utf8\");\n\nREPORT_TEMPLATE_RAW = REPORT_TEMPLATE_RAW.toString()\n  .replace(\n    \"{{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}\",\n    `<style>${CHART_CSS}</style>`\n  )\n  .replace(\"{{!-- TRACERBENCH-CHART-JS --}}\", `<script>${CHART_JS}</script>`);\n\nHandlebars.registerPartial(\"phaseChartJSSection\", PHASE_CHART_JS_TEMPLATE_RAW);\nHandlebars.registerPartial(\"phaseDetailSection\", PHASE_DETAIL_TEMPLATE_RAW);\n/**\n * Camel case helper\n */\nHandlebars.registerHelper(\"toCamel\", (val) => {\n  return val.replace(/-([a-z])/g, (g: string) => g[1].toUpperCase());\n});\n\n/**\n * Negative means slower\n */\nHandlebars.registerHelper(\"isFaster\", (analysis) => {\n  return analysis.hlDiff > 0;\n});\n\n/**\n * Absolute number helper\n */\nHandlebars.registerHelper(\"abs\", (num) => {\n  return Math.abs(num);\n});\n\n/**\n * Sort the given numbers by their absolute values\n */\nHandlebars.registerHelper(\"absSort\", (num1, num2, position) => {\n  const sorted = [Math.abs(num1), Math.abs(num2)];\n  sorted.sort((a, b) => a - b);\n  return sorted[position];\n});\n\n/**\n * Extract the phases and page load time latency into sorted buckets by phase\n *\n * @param samples - Array of \"sample\" objects\n * @param valueGen - Calls this function to extract the value from the phase. A\n *   \"phase\" is passed containing duration and start\n */\nexport function bucketPhaseValues(\n  samples: Sample[],\n  valueGen: any = (a: any) => a.duration\n): ValuesByPhase {\n  const buckets: { [key: string]: number[] } = { [PAGE_LOAD_TIME]: [] };\n\n  samples.forEach((sample: Sample) => {\n    buckets[PAGE_LOAD_TIME].push(sample[PAGE_LOAD_TIME]);\n\n    sample.phases.forEach((phaseData) => {\n      const bucket = buckets[phaseData.phase] || [];\n      bucket.push(valueGen(phaseData));\n      buckets[phaseData.phase] = bucket;\n    });\n  });\n\n  return buckets;\n}\n\nexport interface ParsedTitleConfigs {\n  servers: Array<{ name: string }>;\n  plotTitle: string | undefined;\n  browserVersion: string;\n}\n\n/**\n * Override the default server and plot title attributes\n *\n * @param tbConfig - Concerned only about the \"servers\" and \"plotTitle\"\n *   attribute\n * @param version - Browser version\n */\nexport function resolveTitles(\n  tbConfig: Partial<ITBConfig>,\n  version: string\n): ParsedTitleConfigs {\n  const reportTitles = {\n    servers: [{ name: \"Control\" }, { name: \"Experiment\" }],\n    plotTitle: defaultFlagArgs.plotTitle,\n    browserVersion: version,\n  };\n\n  if (tbConfig.servers) {\n    reportTitles.servers = tbConfig.servers.map((titleConfig, idx) => {\n      if (idx === 0) {\n        return { name: `Control: ${titleConfig.name}` };\n      } else {\n        return { name: `Experiment: ${titleConfig.name}` };\n      }\n    });\n  }\n\n  if (tbConfig.plotTitle) {\n    reportTitles.plotTitle = tbConfig.plotTitle;\n  }\n\n  return reportTitles;\n}\n\n/**\n * Generate the HTML render data for the cumulative chart. Ensure to convert to\n * milliseconds for presentation\n *\n * @param controlData - Samples of the benchmark of control server\n * @param experimentData - Samples of the benchmark experiment server\n */\nexport function buildCumulativeChartData(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult\n): { [key: string]: string } {\n  const cumulativeValueFunc = (a: { [key: string]: number }): number =>\n    convertMicrosecondsToMS(a.start + a.duration);\n\n  const valuesByPhaseControl = bucketPhaseValues(\n    controlData.samples,\n    cumulativeValueFunc\n  );\n  const valuesByPhaseExperiment = bucketPhaseValues(\n    experimentData.samples,\n    cumulativeValueFunc\n  );\n  const phases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  return {\n    categories: JSON.stringify(phases),\n    controlData: JSON.stringify(phases.map((k) => valuesByPhaseControl[k])),\n    experimentData: JSON.stringify(\n      phases.map((k) => valuesByPhaseExperiment[k])\n    ),\n  };\n}\n\n/**\n * Call the stats helper functions to generate the confidence interval and\n * Hodges\u2013Lehmann estimator. Format the data into HTMLSectionRenderData\n * structure.\n *\n * @param controlValues - Values for the control for the phase\n * @param experimentValues - Values for the experiment for the phase\n * @param phaseName - Name of the phase the values represent\n */\nexport function formatPhaseData(\n  controlValues: number[],\n  experimentValues: number[],\n  phaseName: string\n): HTMLSectionRenderData {\n  const stats = new Stats({\n    control: controlValues,\n    experiment: experimentValues,\n    name: \"output\",\n  });\n  const isNotSignificant =\n    (stats.confidenceInterval.min < 0 && 0 < stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min > 0 && 0 > stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min === 0 && stats.confidenceInterval.max === 0);\n\n  return {\n    phase: phaseName,\n    identifierHash: phaseName,\n    isSignificant: !isNotSignificant,\n    sampleCount: stats.sampleCount.control,\n    ciMin: stats.confidenceInterval.min,\n    ciMax: stats.confidenceInterval.max,\n    hlDiff: stats.estimator,\n    servers: undefined,\n    controlFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.control.min,\n      q1: stats.sevenFigureSummary.control[25],\n      median: stats.sevenFigureSummary.control[50],\n      q3: stats.sevenFigureSummary.control[75],\n      max: stats.sevenFigureSummary.control.max,\n      outliers: stats.outliers.control.outliers,\n      samplesMS: stats.controlMS,\n    }),\n    experimentFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.experiment.min,\n      q1: stats.sevenFigureSummary.experiment[25],\n      median: stats.sevenFigureSummary.experiment[50],\n      q3: stats.sevenFigureSummary.experiment[75],\n      max: stats.sevenFigureSummary.experiment.max,\n      outliers: stats.outliers.experiment.outliers,\n      samplesMS: stats.experimentMS,\n    }),\n  };\n}\n\n/**\n * Prioritize the phase that has the largest difference in regression first.\n */\nexport function phaseSorter(\n  a: HTMLSectionRenderData,\n  b: HTMLSectionRenderData\n): number {\n  const A_ON_TOP = -1;\n  const B_ON_TOP = 1;\n\n  if (a.isSignificant) {\n    if (!b.isSignificant) {\n      return A_ON_TOP;\n    } else {\n      // If both are significant prefer slowest one\n      return a.hlDiff - b.hlDiff;\n    }\n  }\n\n  if (b.isSignificant) {\n    if (!a.isSignificant) {\n      return B_ON_TOP;\n    }\n  }\n\n  return 0;\n}\n\nexport function generateDataForHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  reportTitles: ParsedTitleConfigs\n): {\n  durationSection: HTMLSectionRenderData;\n  subPhaseSections: HTMLSectionRenderData[];\n} {\n  const valuesByPhaseControl = bucketPhaseValues(controlData.samples);\n  const valuesByPhaseExperiment = bucketPhaseValues(experimentData.samples);\n  const subPhases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  const durationSection = formatPhaseData(\n    valuesByPhaseControl[PAGE_LOAD_TIME],\n    valuesByPhaseExperiment[PAGE_LOAD_TIME],\n    PAGE_LOAD_TIME\n  );\n\n  const subPhaseSections: HTMLSectionRenderData[] = subPhases.map((phase) => {\n    const controlValues = valuesByPhaseControl[phase];\n    const experimentValues = valuesByPhaseExperiment[phase];\n    const renderDataForPhase = formatPhaseData(\n      controlValues,\n      experimentValues,\n      phase\n    );\n\n    renderDataForPhase.servers = reportTitles.servers;\n    return renderDataForPhase as HTMLSectionRenderData;\n  });\n\n  durationSection.servers = reportTitles.servers;\n  return { durationSection, subPhaseSections };\n}\n\nexport default function createConsumableHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  tbConfig: ITBConfig\n): string {\n  const reportTitles = resolveTitles(tbConfig, controlData.meta.browserVersion);\n  const { durationSection, subPhaseSections } = generateDataForHTML(\n    controlData,\n    experimentData,\n    reportTitles\n  );\n\n  const template = Handlebars.compile(REPORT_TEMPLATE_RAW);\n\n  return template({\n    cumulativeChartData: buildCumulativeChartData(controlData, experimentData),\n    durationSection,\n    reportTitles,\n    subPhaseSections,\n    configsSJSONString: JSON.stringify(tbConfig, null, 4),\n    sectionFormattedDataJson: JSON.stringify(subPhaseSections),\n  });\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f8b45a64cd53699fa310f372305c5e73280e0569"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_gjn95tcx8=function(){return actualCoverage;};return actualCoverage;}cov_gjn95tcx8().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/no-explicit-any */const stats_1=(cov_gjn95tcx8().s[1]++,require("@tracerbench/stats"));const fs_extra_1=(cov_gjn95tcx8().s[2]++,require("fs-extra"));const Handlebars=(cov_gjn95tcx8().s[3]++,require("handlebars"));const path=(cov_gjn95tcx8().s[4]++,require("path"));const default_flag_args_1=(cov_gjn95tcx8().s[5]++,require("../command-config/default-flag-args"));const utils_1=(cov_gjn95tcx8().s[6]++,require("./utils"));cov_gjn95tcx8().s[7]++;exports.PAGE_LOAD_TIME="duration";const CHART_CSS_PATH=(cov_gjn95tcx8().s[8]++,path.join(__dirname,"../static/chart-bootstrap.css"));const CHART_JS_PATH=(cov_gjn95tcx8().s[9]++,path.join(__dirname,"../static/chartjs-2.9.3-chart.min.js"));const REPORT_PATH=(cov_gjn95tcx8().s[10]++,path.join(__dirname,"../static/report-template.hbs"));const PHASE_DETAIL_PARTIAL=(cov_gjn95tcx8().s[11]++,path.join(__dirname,"../static/phase-detail-partial.hbs"));const PHASE_CHART_JS_PARTIAL=(cov_gjn95tcx8().s[12]++,path.join(__dirname,"../static/phase-chart-js-partial.hbs"));const CHART_CSS=(cov_gjn95tcx8().s[13]++,fs_extra_1.readFileSync(CHART_CSS_PATH,"utf8"));const CHART_JS=(cov_gjn95tcx8().s[14]++,fs_extra_1.readFileSync(CHART_JS_PATH,"utf8"));const PHASE_DETAIL_TEMPLATE_RAW=(cov_gjn95tcx8().s[15]++,fs_extra_1.readFileSync(PHASE_DETAIL_PARTIAL,"utf8"));const PHASE_CHART_JS_TEMPLATE_RAW=(cov_gjn95tcx8().s[16]++,fs_extra_1.readFileSync(PHASE_CHART_JS_PARTIAL,"utf8"));let REPORT_TEMPLATE_RAW=(cov_gjn95tcx8().s[17]++,fs_extra_1.readFileSync(REPORT_PATH,"utf8"));cov_gjn95tcx8().s[18]++;REPORT_TEMPLATE_RAW=REPORT_TEMPLATE_RAW.toString().replace("{{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}",`<style>${CHART_CSS}</style>`).replace("{{!-- TRACERBENCH-CHART-JS --}}",`<script>${CHART_JS}</script>`);cov_gjn95tcx8().s[19]++;Handlebars.registerPartial("phaseChartJSSection",PHASE_CHART_JS_TEMPLATE_RAW);cov_gjn95tcx8().s[20]++;Handlebars.registerPartial("phaseDetailSection",PHASE_DETAIL_TEMPLATE_RAW);/**
 * Camel case helper
 */cov_gjn95tcx8().s[21]++;Handlebars.registerHelper("toCamel",val=>{cov_gjn95tcx8().f[0]++;cov_gjn95tcx8().s[22]++;return val.replace(/-([a-z])/g,g=>{cov_gjn95tcx8().f[1]++;cov_gjn95tcx8().s[23]++;return g[1].toUpperCase();});});/**
 * Negative means slower
 */cov_gjn95tcx8().s[24]++;Handlebars.registerHelper("isFaster",analysis=>{cov_gjn95tcx8().f[2]++;cov_gjn95tcx8().s[25]++;return analysis.hlDiff>0;});/**
 * Absolute number helper
 */cov_gjn95tcx8().s[26]++;Handlebars.registerHelper("abs",num=>{cov_gjn95tcx8().f[3]++;cov_gjn95tcx8().s[27]++;return Math.abs(num);});/**
 * Sort the given numbers by their absolute values
 */cov_gjn95tcx8().s[28]++;Handlebars.registerHelper("absSort",(num1,num2,position)=>{cov_gjn95tcx8().f[4]++;const sorted=(cov_gjn95tcx8().s[29]++,[Math.abs(num1),Math.abs(num2)]);cov_gjn95tcx8().s[30]++;sorted.sort((a,b)=>{cov_gjn95tcx8().f[5]++;cov_gjn95tcx8().s[31]++;return a-b;});cov_gjn95tcx8().s[32]++;return sorted[position];});/**
 * Extract the phases and page load time latency into sorted buckets by phase
 *
 * @param samples - Array of "sample" objects
 * @param valueGen - Calls this function to extract the value from the phase. A
 *   "phase" is passed containing duration and start
 */function bucketPhaseValues(samples,valueGen=(cov_gjn95tcx8().b[0][0]++,a=>{cov_gjn95tcx8().f[7]++;cov_gjn95tcx8().s[33]++;return a.duration;})){cov_gjn95tcx8().f[6]++;const buckets=(cov_gjn95tcx8().s[34]++,{[exports.PAGE_LOAD_TIME]:[]});cov_gjn95tcx8().s[35]++;samples.forEach(sample=>{cov_gjn95tcx8().f[8]++;cov_gjn95tcx8().s[36]++;buckets[exports.PAGE_LOAD_TIME].push(sample[exports.PAGE_LOAD_TIME]);cov_gjn95tcx8().s[37]++;sample.phases.forEach(phaseData=>{cov_gjn95tcx8().f[9]++;const bucket=(cov_gjn95tcx8().s[38]++,(cov_gjn95tcx8().b[1][0]++,buckets[phaseData.phase])||(cov_gjn95tcx8().b[1][1]++,[]));cov_gjn95tcx8().s[39]++;bucket.push(valueGen(phaseData));cov_gjn95tcx8().s[40]++;buckets[phaseData.phase]=bucket;});});cov_gjn95tcx8().s[41]++;return buckets;}cov_gjn95tcx8().s[42]++;exports.bucketPhaseValues=bucketPhaseValues;/**
 * Override the default server and plot title attributes
 *
 * @param tbConfig - Concerned only about the "servers" and "plotTitle"
 *   attribute
 * @param version - Browser version
 */function resolveTitles(tbConfig,version){cov_gjn95tcx8().f[10]++;const reportTitles=(cov_gjn95tcx8().s[43]++,{servers:[{name:"Control"},{name:"Experiment"}],plotTitle:default_flag_args_1.defaultFlagArgs.plotTitle,browserVersion:version});cov_gjn95tcx8().s[44]++;if(tbConfig.servers){cov_gjn95tcx8().b[2][0]++;cov_gjn95tcx8().s[45]++;reportTitles.servers=tbConfig.servers.map((titleConfig,idx)=>{cov_gjn95tcx8().f[11]++;cov_gjn95tcx8().s[46]++;if(idx===0){cov_gjn95tcx8().b[3][0]++;cov_gjn95tcx8().s[47]++;return{name:`Control: ${titleConfig.name}`};}else{cov_gjn95tcx8().b[3][1]++;cov_gjn95tcx8().s[48]++;return{name:`Experiment: ${titleConfig.name}`};}});}else{cov_gjn95tcx8().b[2][1]++;}cov_gjn95tcx8().s[49]++;if(tbConfig.plotTitle){cov_gjn95tcx8().b[4][0]++;cov_gjn95tcx8().s[50]++;reportTitles.plotTitle=tbConfig.plotTitle;}else{cov_gjn95tcx8().b[4][1]++;}cov_gjn95tcx8().s[51]++;return reportTitles;}cov_gjn95tcx8().s[52]++;exports.resolveTitles=resolveTitles;/**
 * Generate the HTML render data for the cumulative chart. Ensure to convert to
 * milliseconds for presentation
 *
 * @param controlData - Samples of the benchmark of control server
 * @param experimentData - Samples of the benchmark experiment server
 */function buildCumulativeChartData(controlData,experimentData){cov_gjn95tcx8().f[12]++;cov_gjn95tcx8().s[53]++;const cumulativeValueFunc=a=>{cov_gjn95tcx8().f[13]++;cov_gjn95tcx8().s[54]++;return utils_1.convertMicrosecondsToMS(a.start+a.duration);};const valuesByPhaseControl=(cov_gjn95tcx8().s[55]++,bucketPhaseValues(controlData.samples,cumulativeValueFunc));const valuesByPhaseExperiment=(cov_gjn95tcx8().s[56]++,bucketPhaseValues(experimentData.samples,cumulativeValueFunc));const phases=(cov_gjn95tcx8().s[57]++,Object.keys(valuesByPhaseControl).filter(k=>{cov_gjn95tcx8().f[14]++;cov_gjn95tcx8().s[58]++;return k!==exports.PAGE_LOAD_TIME;}));cov_gjn95tcx8().s[59]++;return{categories:JSON.stringify(phases),controlData:JSON.stringify(phases.map(k=>{cov_gjn95tcx8().f[15]++;cov_gjn95tcx8().s[60]++;return valuesByPhaseControl[k];})),experimentData:JSON.stringify(phases.map(k=>{cov_gjn95tcx8().f[16]++;cov_gjn95tcx8().s[61]++;return valuesByPhaseExperiment[k];}))};}cov_gjn95tcx8().s[62]++;exports.buildCumulativeChartData=buildCumulativeChartData;/**
 * Call the stats helper functions to generate the confidence interval and
 * Hodges–Lehmann estimator. Format the data into HTMLSectionRenderData
 * structure.
 *
 * @param controlValues - Values for the control for the phase
 * @param experimentValues - Values for the experiment for the phase
 * @param phaseName - Name of the phase the values represent
 */function formatPhaseData(controlValues,experimentValues,phaseName){cov_gjn95tcx8().f[17]++;const stats=(cov_gjn95tcx8().s[63]++,new stats_1.Stats({control:controlValues,experiment:experimentValues,name:"output"}));const isNotSignificant=(cov_gjn95tcx8().s[64]++,(cov_gjn95tcx8().b[5][0]++,stats.confidenceInterval.min<0)&&(cov_gjn95tcx8().b[5][1]++,0<stats.confidenceInterval.max)||(cov_gjn95tcx8().b[5][2]++,stats.confidenceInterval.min>0)&&(cov_gjn95tcx8().b[5][3]++,0>stats.confidenceInterval.max)||(cov_gjn95tcx8().b[5][4]++,stats.confidenceInterval.min===0)&&(cov_gjn95tcx8().b[5][5]++,stats.confidenceInterval.max===0));cov_gjn95tcx8().s[65]++;return{phase:phaseName,identifierHash:phaseName,isSignificant:!isNotSignificant,sampleCount:stats.sampleCount.control,ciMin:stats.confidenceInterval.min,ciMax:stats.confidenceInterval.max,hlDiff:stats.estimator,servers:undefined,controlFormatedSamples:JSON.stringify({min:stats.sevenFigureSummary.control.min,q1:stats.sevenFigureSummary.control[25],median:stats.sevenFigureSummary.control[50],q3:stats.sevenFigureSummary.control[75],max:stats.sevenFigureSummary.control.max,outliers:stats.outliers.control.outliers,samplesMS:stats.controlMS}),experimentFormatedSamples:JSON.stringify({min:stats.sevenFigureSummary.experiment.min,q1:stats.sevenFigureSummary.experiment[25],median:stats.sevenFigureSummary.experiment[50],q3:stats.sevenFigureSummary.experiment[75],max:stats.sevenFigureSummary.experiment.max,outliers:stats.outliers.experiment.outliers,samplesMS:stats.experimentMS})};}cov_gjn95tcx8().s[66]++;exports.formatPhaseData=formatPhaseData;/**
 * Prioritize the phase that has the largest difference in regression first.
 */function phaseSorter(a,b){cov_gjn95tcx8().f[18]++;const A_ON_TOP=(cov_gjn95tcx8().s[67]++,-1);const B_ON_TOP=(cov_gjn95tcx8().s[68]++,1);cov_gjn95tcx8().s[69]++;if(a.isSignificant){cov_gjn95tcx8().b[6][0]++;cov_gjn95tcx8().s[70]++;if(!b.isSignificant){cov_gjn95tcx8().b[7][0]++;cov_gjn95tcx8().s[71]++;return A_ON_TOP;}else{cov_gjn95tcx8().b[7][1]++;cov_gjn95tcx8().s[72]++;// If both are significant prefer slowest one
return a.hlDiff-b.hlDiff;}}else{cov_gjn95tcx8().b[6][1]++;}cov_gjn95tcx8().s[73]++;if(b.isSignificant){cov_gjn95tcx8().b[8][0]++;cov_gjn95tcx8().s[74]++;if(!a.isSignificant){cov_gjn95tcx8().b[9][0]++;cov_gjn95tcx8().s[75]++;return B_ON_TOP;}else{cov_gjn95tcx8().b[9][1]++;}}else{cov_gjn95tcx8().b[8][1]++;}cov_gjn95tcx8().s[76]++;return 0;}cov_gjn95tcx8().s[77]++;exports.phaseSorter=phaseSorter;function generateDataForHTML(controlData,experimentData,reportTitles){cov_gjn95tcx8().f[19]++;const valuesByPhaseControl=(cov_gjn95tcx8().s[78]++,bucketPhaseValues(controlData.samples));const valuesByPhaseExperiment=(cov_gjn95tcx8().s[79]++,bucketPhaseValues(experimentData.samples));const subPhases=(cov_gjn95tcx8().s[80]++,Object.keys(valuesByPhaseControl).filter(k=>{cov_gjn95tcx8().f[20]++;cov_gjn95tcx8().s[81]++;return k!==exports.PAGE_LOAD_TIME;}));const durationSection=(cov_gjn95tcx8().s[82]++,formatPhaseData(valuesByPhaseControl[exports.PAGE_LOAD_TIME],valuesByPhaseExperiment[exports.PAGE_LOAD_TIME],exports.PAGE_LOAD_TIME));const subPhaseSections=(cov_gjn95tcx8().s[83]++,subPhases.map(phase=>{cov_gjn95tcx8().f[21]++;const controlValues=(cov_gjn95tcx8().s[84]++,valuesByPhaseControl[phase]);const experimentValues=(cov_gjn95tcx8().s[85]++,valuesByPhaseExperiment[phase]);const renderDataForPhase=(cov_gjn95tcx8().s[86]++,formatPhaseData(controlValues,experimentValues,phase));cov_gjn95tcx8().s[87]++;renderDataForPhase.servers=reportTitles.servers;cov_gjn95tcx8().s[88]++;return renderDataForPhase;}));cov_gjn95tcx8().s[89]++;durationSection.servers=reportTitles.servers;cov_gjn95tcx8().s[90]++;return{durationSection,subPhaseSections};}cov_gjn95tcx8().s[91]++;exports.generateDataForHTML=generateDataForHTML;function createConsumableHTML(controlData,experimentData,tbConfig){cov_gjn95tcx8().f[22]++;const reportTitles=(cov_gjn95tcx8().s[92]++,resolveTitles(tbConfig,controlData.meta.browserVersion));const{durationSection,subPhaseSections}=(cov_gjn95tcx8().s[93]++,generateDataForHTML(controlData,experimentData,reportTitles));const template=(cov_gjn95tcx8().s[94]++,Handlebars.compile(REPORT_TEMPLATE_RAW));cov_gjn95tcx8().s[95]++;return template({cumulativeChartData:buildCumulativeChartData(controlData,experimentData),durationSection,reportTitles,subPhaseSections,configsSJSONString:JSON.stringify(tbConfig,null,4),sectionFormattedDataJson:JSON.stringify(subPhaseSections)});}cov_gjn95tcx8().s[96]++;exports.default=createConsumableHTML;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9oZWxwZXJzL2NyZWF0ZS1jb25zdW1hYmxlLWh0bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Im0wOEJBQUEsdURBQ0EsS0FBQSxDQUFBLE9BQUEseUJBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxVQUFBLHlCQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxVQUFBLHlCQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxJQUFBLHlCQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxDQUdBLEtBQUEsQ0FBQSxtQkFBQSx5QkFBQSxPQUFBLENBQUEscUNBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLE9BQUEseUJBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLEMsdUJBa0RhLE9BQUEsQ0FBQSxjQUFBLENBQWlCLFVBQWpCLENBRWIsS0FBTSxDQUFBLGNBQWMseUJBQUcsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFWLENBQXFCLCtCQUFyQixDQUFILENBQXBCLENBQ0EsS0FBTSxDQUFBLGFBQWEseUJBQUcsSUFBSSxDQUFDLElBQUwsQ0FDcEIsU0FEb0IsQ0FFcEIsc0NBRm9CLENBQUgsQ0FBbkIsQ0FJQSxLQUFNLENBQUEsV0FBVywwQkFBRyxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQVYsQ0FBcUIsK0JBQXJCLENBQUgsQ0FBakIsQ0FDQSxLQUFNLENBQUEsb0JBQW9CLDBCQUFHLElBQUksQ0FBQyxJQUFMLENBQzNCLFNBRDJCLENBRTNCLG9DQUYyQixDQUFILENBQTFCLENBSUEsS0FBTSxDQUFBLHNCQUFzQiwwQkFBRyxJQUFJLENBQUMsSUFBTCxDQUM3QixTQUQ2QixDQUU3QixzQ0FGNkIsQ0FBSCxDQUE1QixDQUtBLEtBQU0sQ0FBQSxTQUFTLDBCQUFHLFVBQUEs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K0IsQ0FBL0IsQ0FMTixDQU1kLHdCQUF3QixDQUFFLElBQUksQ0FBQyxTQUFMLENBQWUsZ0JBQWYsQ0FOWixDQUFELENBQWYsQ0FRRCxDLHdCQXRCRCxPQUFBLENBQUEsT0FBQSxDQUFBLG9CQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBTdGF0cyB9IGZyb20gXCJAdHJhY2VyYmVuY2gvc3RhdHNcIjtcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0ICogYXMgSGFuZGxlYmFycyBmcm9tIFwiaGFuZGxlYmFyc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgeyBJVEJDb25maWcgfSBmcm9tIFwiLi4vY29tbWFuZC1jb25maWdcIjtcbmltcG9ydCB7IGRlZmF1bHRGbGFnQXJncyB9IGZyb20gXCIuLi9jb21tYW5kLWNvbmZpZy9kZWZhdWx0LWZsYWctYXJnc1wiO1xuaW1wb3J0IHsgY29udmVydE1pY3Jvc2Vjb25kc1RvTVMgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNhbXBsZSB7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIGpzOiBudW1iZXI7XG4gIHBoYXNlczogQXJyYXk8e1xuICAgIHBoYXNlOiBzdHJpbmc7XG4gICAgc3RhcnQ6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICB9PjtcbiAgZ2M6IGFueTtcbiAgYmxpbmtHQzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUcmFjZXJCZW5jaFRyYWNlUmVzdWx0IHtcbiAgbWV0YToge1xuICAgIGJyb3dzZXJWZXJzaW9uOiBzdHJpbmc7XG4gICAgY3B1czogc3RyaW5nW107XG4gIH07XG4gIHNhbXBsZXM6IFNhbXBsZVtdO1xuICBzZXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0ZWRTYW1wbGVzIHtcbiAgbWluOiBudW1iZXI7XG4gIHExOiBudW1iZXI7XG4gIG1lZGlhbjogbnVtYmVyO1xuICBxMzogbnVtYmVyO1xuICBtYXg6IG51bWJlcjtcbiAgb3V0bGllcnM6IG51bWJlcltdO1xuICBzYW1wbGVzTVM6IG51bWJlcltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhUTUxTZWN0aW9uUmVuZGVyRGF0YSB7XG4gIGlzU2lnbmlmaWNhbnQ6IGJvb2xlYW47XG4gIGNpTWluOiBudW1iZXI7XG4gIGNpTWF4OiBudW1iZXI7XG4gIGhsRGlmZjogbnVtYmVyO1xuICBwaGFzZTogc3RyaW5nO1xuICBpZGVudGlmaWVySGFzaDogc3RyaW5nO1xuICBzYW1wbGVDb3VudDogbnVtYmVyO1xuICBzZXJ2ZXJzOiBhbnk7XG4gIGNvbnRyb2xGb3JtYXRlZFNhbXBsZXM6IHN0cmluZztcbiAgZXhwZXJpbWVudEZvcm1hdGVkU2FtcGxlczogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVmFsdWVzQnlQaGFzZSB7XG4gIFtrZXk6IHN0cmluZ106IG51bWJlcltdO1xufVxuXG5leHBvcnQgY29uc3QgUEFHRV9MT0FEX1RJTUUgPSBcImR1cmF0aW9uXCI7XG5cbmNvbnN0IENIQVJUX0NTU19QQVRIID0gcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9zdGF0aWMvY2hhcnQtYm9vdHN0cmFwLmNzc1wiKTtcbmNvbnN0IENIQVJUX0pTX1BBVEggPSBwYXRoLmpvaW4oXG4gIF9fZGlybmFtZSxcbiAgXCIuLi9zdGF0aWMvY2hhcnRqcy0yLjkuMy1jaGFydC5taW4uanNcIlxuKTtcbmNvbnN0IFJFUE9SVF9QQVRIID0gcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9zdGF0aWMvcmVwb3J0LXRlbXBsYXRlLmhic1wiKTtcbmNvbnN0IFBIQVNFX0RFVEFJTF9QQVJUSUFMID0gcGF0aC5qb2luKFxuICBfX2Rpcm5hbWUsXG4gIFwiLi4vc3RhdGljL3BoYXNlLWRldGFpbC1wYXJ0aWFsLmhic1wiXG4pO1xuY29uc3QgUEhBU0VfQ0hBUlRfSlNfUEFSVElBTCA9IHBhdGguam9pbihcbiAgX19kaXJuYW1lLFxuICBcIi4uL3N0YXRpYy9waGFzZS1jaGFydC1qcy1wYXJ0aWFsLmhic1wiXG4pO1xuXG5jb25zdCBDSEFSVF9DU1MgPSByZWFkRmlsZVN5bmMoQ0hBUlRfQ1NTX1BBVEgsIFwidXRmOFwiKTtcbmNvbnN0IENIQVJUX0pTID0gcmVhZEZpbGVTeW5jKENIQVJUX0pTX1BBVEgsIFwidXRmOFwiKTtcbmNvbnN0IFBIQVNFX0RFVEFJTF9URU1QTEFURV9SQVcgPSByZWFkRmlsZVN5bmMoUEhBU0VfREVUQUlMX1BBUlRJQUwsIFwidXRmOFwiKTtcbmNvbnN0IFBIQVNFX0NIQVJUX0pTX1RFTVBMQVRFX1JBVyA9IHJlYWRGaWxlU3luYyhcbiAgUEhBU0VfQ0hBUlRfSlNfUEFSVElBTCxcbiAgXCJ1dGY4XCJcbik7XG5sZXQgUkVQT1JUX1RFTVBMQVRFX1JBVyA9IHJlYWRGaWxlU3luYyhSRVBPUlRfUEFUSCwgXCJ1dGY4XCIpO1xuXG5SRVBPUlRfVEVNUExBVEVfUkFXID0gUkVQT1JUX1RFTVBMQVRFX1JBVy50b1N0cmluZygpXG4gIC5yZXBsYWNlKFxuICAgIFwie3shLS0gVFJBQ0VSQkVOQ0gtQ0hBUlQtQk9PVFNUUkFQLkNTUyAtLX19XCIsXG4gICAgYDxzdHlsZT4ke0NIQVJUX0NTU308L3N0eWxlPmBcbiAgKVxuICAucmVwbGFjZShcInt7IS0tIFRSQUNFUkJFTkNILUNIQVJULUpTIC0tfX1cIiwgYDxzY3JpcHQ+JHtDSEFSVF9KU308L3NjcmlwdD5gKTtcblxuSGFuZGxlYmFycy5yZWdpc3RlclBhcnRpYWwoXCJwaGFzZUNoYXJ0SlNTZWN0aW9uXCIsIFBIQVNFX0NIQVJUX0pTX1RFTVBMQVRFX1JBVyk7XG5IYW5kbGViYXJzLnJlZ2lzdGVyUGFydGlhbChcInBoYXNlRGV0YWlsU2VjdGlvblwiLCBQSEFTRV9ERVRBSUxfVEVNUExBVEVfUkFXKTtcbi8qKlxuICogQ2FtZWwgY2FzZSBoZWxwZXJcbiAqL1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcInRvQ2FtZWxcIiwgKHZhbCkgPT4ge1xuICByZXR1cm4gdmFsLnJlcGxhY2UoLy0oW2Etel0pL2csIChnOiBzdHJpbmcpID0+IGdbMV0udG9VcHBlckNhc2UoKSk7XG59KTtcblxuLyoqXG4gKiBOZWdhdGl2ZSBtZWFucyBzbG93ZXJcbiAqL1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImlzRmFzdGVyXCIsIChhbmFseXNpcykgPT4ge1xuICByZXR1cm4gYW5hbHlzaXMuaGxEaWZmID4gMDtcbn0pO1xuXG4vKipcbiAqIEFic29sdXRlIG51bWJlciBoZWxwZXJcbiAqL1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImFic1wiLCAobnVtKSA9PiB7XG4gIHJldHVybiBNYXRoLmFicyhudW0pO1xufSk7XG5cbi8qKlxuICogU29ydCB0aGUgZ2l2ZW4gbnVtYmVycyBieSB0aGVpciBhYnNvbHV0ZSB2YWx1ZXNcbiAqL1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImFic1NvcnRcIiwgKG51bTEsIG51bTIsIHBvc2l0aW9uKSA9PiB7XG4gIGNvbnN0IHNvcnRlZCA9IFtNYXRoLmFicyhudW0xKSwgTWF0aC5hYnMobnVtMildO1xuICBzb3J0ZWQuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICByZXR1cm4gc29ydGVkW3Bvc2l0aW9uXTtcbn0pO1xuXG4vKipcbiAqIEV4dHJhY3QgdGhlIHBoYXNlcyBhbmQgcGFnZSBsb2FkIHRpbWUgbGF0ZW5jeSBpbnRvIHNvcnRlZCBidWNrZXRzIGJ5IHBoYXNlXG4gKlxuICogQHBhcmFtIHNhbXBsZXMgLSBBcnJheSBvZiBcInNhbXBsZVwiIG9iamVjdHNcbiAqIEBwYXJhbSB2YWx1ZUdlbiAtIENhbGxzIHRoaXMgZnVuY3Rpb24gdG8gZXh0cmFjdCB0aGUgdmFsdWUgZnJvbSB0aGUgcGhhc2UuIEFcbiAqICAgXCJwaGFzZVwiIGlzIHBhc3NlZCBjb250YWluaW5nIGR1cmF0aW9uIGFuZCBzdGFydFxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVja2V0UGhhc2VWYWx1ZXMoXG4gIHNhbXBsZXM6IFNhbXBsZVtdLFxuICB2YWx1ZUdlbjogYW55ID0gKGE6IGFueSkgPT4gYS5kdXJhdGlvblxuKTogVmFsdWVzQnlQaGFzZSB7XG4gIGNvbnN0IGJ1Y2tldHM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyW10gfSA9IHsgW1BBR0VfTE9BRF9USU1FXTogW10gfTtcblxuICBzYW1wbGVzLmZvckVhY2goKHNhbXBsZTogU2FtcGxlKSA9PiB7XG4gICAgYnVja2V0c1tQQUdFX0xPQURfVElNRV0ucHVzaChzYW1wbGVbUEFHRV9MT0FEX1RJTUVdKTtcblxuICAgIHNhbXBsZS5waGFzZXMuZm9yRWFjaCgocGhhc2VEYXRhKSA9PiB7XG4gICAgICBjb25zdCBidWNrZXQgPSBidWNrZXRzW3BoYXNlRGF0YS5waGFzZV0gfHwgW107XG4gICAgICBidWNrZXQucHVzaCh2YWx1ZUdlbihwaGFzZURhdGEpKTtcbiAgICAgIGJ1Y2tldHNbcGhhc2VEYXRhLnBoYXNlXSA9IGJ1Y2tldDtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJ1Y2tldHM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkVGl0bGVDb25maWdzIHtcbiAgc2VydmVyczogQXJyYXk8eyBuYW1lOiBzdHJpbmcgfT47XG4gIHBsb3RUaXRsZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBicm93c2VyVmVyc2lvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNlcnZlciBhbmQgcGxvdCB0aXRsZSBhdHRyaWJ1dGVzXG4gKlxuICogQHBhcmFtIHRiQ29uZmlnIC0gQ29uY2VybmVkIG9ubHkgYWJvdXQgdGhlIFwic2VydmVyc1wiIGFuZCBcInBsb3RUaXRsZVwiXG4gKiAgIGF0dHJpYnV0ZVxuICogQHBhcmFtIHZlcnNpb24gLSBCcm93c2VyIHZlcnNpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVUaXRsZXMoXG4gIHRiQ29uZmlnOiBQYXJ0aWFsPElUQkNvbmZpZz4sXG4gIHZlcnNpb246IHN0cmluZ1xuKTogUGFyc2VkVGl0bGVDb25maWdzIHtcbiAgY29uc3QgcmVwb3J0VGl0bGVzID0ge1xuICAgIHNlcnZlcnM6IFt7IG5hbWU6IFwiQ29udHJvbFwiIH0sIHsgbmFtZTogXCJFeHBlcmltZW50XCIgfV0sXG4gICAgcGxvdFRpdGxlOiBkZWZhdWx0RmxhZ0FyZ3MucGxvdFRpdGxlLFxuICAgIGJyb3dzZXJWZXJzaW9uOiB2ZXJzaW9uLFxuICB9O1xuXG4gIGlmICh0YkNvbmZpZy5zZXJ2ZXJzKSB7XG4gICAgcmVwb3J0VGl0bGVzLnNlcnZlcnMgPSB0YkNvbmZpZy5zZXJ2ZXJzLm1hcCgodGl0bGVDb25maWcsIGlkeCkgPT4ge1xuICAgICAgaWYgKGlkeCA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyBuYW1lOiBgQ29udHJvbDogJHt0aXRsZUNvbmZpZy5uYW1lfWAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IG5hbWU6IGBFeHBlcmltZW50OiAke3RpdGxlQ29uZmlnLm5hbWV9YCB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRiQ29uZmlnLnBsb3RUaXRsZSkge1xuICAgIHJlcG9ydFRpdGxlcy5wbG90VGl0bGUgPSB0YkNvbmZpZy5wbG90VGl0bGU7XG4gIH1cblxuICByZXR1cm4gcmVwb3J0VGl0bGVzO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIHRoZSBIVE1MIHJlbmRlciBkYXRhIGZvciB0aGUgY3VtdWxhdGl2ZSBjaGFydC4gRW5zdXJlIHRvIGNvbnZlcnQgdG9cbiAqIG1pbGxpc2Vjb25kcyBmb3IgcHJlc2VudGF0aW9uXG4gKlxuICogQHBhcmFtIGNvbnRyb2xEYXRhIC0gU2FtcGxlcyBvZiB0aGUgYmVuY2htYXJrIG9mIGNvbnRyb2wgc2VydmVyXG4gKiBAcGFyYW0gZXhwZXJpbWVudERhdGEgLSBTYW1wbGVzIG9mIHRoZSBiZW5jaG1hcmsgZXhwZXJpbWVudCBzZXJ2ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQ3VtdWxhdGl2ZUNoYXJ0RGF0YShcbiAgY29udHJvbERhdGE6IElUcmFjZXJCZW5jaFRyYWNlUmVzdWx0LFxuICBleHBlcmltZW50RGF0YTogSVRyYWNlckJlbmNoVHJhY2VSZXN1bHRcbik6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICBjb25zdCBjdW11bGF0aXZlVmFsdWVGdW5jID0gKGE6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0pOiBudW1iZXIgPT5cbiAgICBjb252ZXJ0TWljcm9zZWNvbmRzVG9NUyhhLnN0YXJ0ICsgYS5kdXJhdGlvbik7XG5cbiAgY29uc3QgdmFsdWVzQnlQaGFzZUNvbnRyb2wgPSBidWNrZXRQaGFzZVZhbHVlcyhcbiAgICBjb250cm9sRGF0YS5zYW1wbGVzLFxuICAgIGN1bXVsYXRpdmVWYWx1ZUZ1bmNcbiAgKTtcbiAgY29uc3QgdmFsdWVzQnlQaGFzZUV4cGVyaW1lbnQgPSBidWNrZXRQaGFzZVZhbHVlcyhcbiAgICBleHBlcmltZW50RGF0YS5zYW1wbGVzLFxuICAgIGN1bXVsYXRpdmVWYWx1ZUZ1bmNcbiAgKTtcbiAgY29uc3QgcGhhc2VzID0gT2JqZWN0LmtleXModmFsdWVzQnlQaGFzZUNvbnRyb2wpLmZpbHRlcihcbiAgICAoaykgPT4gayAhPT0gUEFHRV9MT0FEX1RJTUVcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGNhdGVnb3JpZXM6IEpTT04uc3RyaW5naWZ5KHBoYXNlcyksXG4gICAgY29udHJvbERhdGE6IEpTT04uc3RyaW5naWZ5KHBoYXNlcy5tYXAoKGspID0+IHZhbHVlc0J5UGhhc2VDb250cm9sW2tdKSksXG4gICAgZXhwZXJpbWVudERhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgcGhhc2VzLm1hcCgoaykgPT4gdmFsdWVzQnlQaGFzZUV4cGVyaW1lbnRba10pXG4gICAgKSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxsIHRoZSBzdGF0cyBoZWxwZXIgZnVuY3Rpb25zIHRvIGdlbmVyYXRlIHRoZSBjb25maWRlbmNlIGludGVydmFsIGFuZFxuICogSG9kZ2Vz4oCTTGVobWFubiBlc3RpbWF0b3IuIEZvcm1hdCB0aGUgZGF0YSBpbnRvIEhUTUxTZWN0aW9uUmVuZGVyRGF0YVxuICogc3RydWN0dXJlLlxuICpcbiAqIEBwYXJhbSBjb250cm9sVmFsdWVzIC0gVmFsdWVzIGZvciB0aGUgY29udHJvbCBmb3IgdGhlIHBoYXNlXG4gKiBAcGFyYW0gZXhwZXJpbWVudFZhbHVlcyAtIFZhbHVlcyBmb3IgdGhlIGV4cGVyaW1lbnQgZm9yIHRoZSBwaGFzZVxuICogQHBhcmFtIHBoYXNlTmFtZSAtIE5hbWUgb2YgdGhlIHBoYXNlIHRoZSB2YWx1ZXMgcmVwcmVzZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQaGFzZURhdGEoXG4gIGNvbnRyb2xWYWx1ZXM6IG51bWJlcltdLFxuICBleHBlcmltZW50VmFsdWVzOiBudW1iZXJbXSxcbiAgcGhhc2VOYW1lOiBzdHJpbmdcbik6IEhUTUxTZWN0aW9uUmVuZGVyRGF0YSB7XG4gIGNvbnN0IHN0YXRzID0gbmV3IFN0YXRzKHtcbiAgICBjb250cm9sOiBjb250cm9sVmFsdWVzLFxuICAgIGV4cGVyaW1lbnQ6IGV4cGVyaW1lbnRWYWx1ZXMsXG4gICAgbmFtZTogXCJvdXRwdXRcIixcbiAgfSk7XG4gIGNvbnN0IGlzTm90U2lnbmlmaWNhbnQgPVxuICAgIChzdGF0cy5jb25maWRlbmNlSW50ZXJ2YWwubWluIDwgMCAmJiAwIDwgc3RhdHMuY29uZmlkZW5jZUludGVydmFsLm1heCkgfHxcbiAgICAoc3RhdHMuY29uZmlkZW5jZUludGVydmFsLm1pbiA+IDAgJiYgMCA+IHN0YXRzLmNvbmZpZGVuY2VJbnRlcnZhbC5tYXgpIHx8XG4gICAgKHN0YXRzLmNvbmZpZGVuY2VJbnRlcnZhbC5taW4gPT09IDAgJiYgc3RhdHMuY29uZmlkZW5jZUludGVydmFsLm1heCA9PT0gMCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwaGFzZTogcGhhc2VOYW1lLFxuICAgIGlkZW50aWZpZXJIYXNoOiBwaGFzZU5hbWUsXG4gICAgaXNTaWduaWZpY2FudDogIWlzTm90U2lnbmlmaWNhbnQsXG4gICAgc2FtcGxlQ291bnQ6IHN0YXRzLnNhbXBsZUNvdW50LmNvbnRyb2wsXG4gICAgY2lNaW46IHN0YXRzLmNvbmZpZGVuY2VJbnRlcnZhbC5taW4sXG4gICAgY2lNYXg6IHN0YXRzLmNvbmZpZGVuY2VJbnRlcnZhbC5tYXgsXG4gICAgaGxEaWZmOiBzdGF0cy5lc3RpbWF0b3IsXG4gICAgc2VydmVyczogdW5kZWZpbmVkLFxuICAgIGNvbnRyb2xGb3JtYXRlZFNhbXBsZXM6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG1pbjogc3RhdHMuc2V2ZW5GaWd1cmVTdW1tYXJ5LmNvbnRyb2wubWluLFxuICAgICAgcTE6IHN0YXRzLnNldmVuRmlndXJlU3VtbWFyeS5jb250cm9sWzI1XSxcbiAgICAgIG1lZGlhbjogc3RhdHMuc2V2ZW5GaWd1cmVTdW1tYXJ5LmNvbnRyb2xbNTBdLFxuICAgICAgcTM6IHN0YXRzLnNldmVuRmlndXJlU3VtbWFyeS5jb250cm9sWzc1XSxcbiAgICAgIG1heDogc3RhdHMuc2V2ZW5GaWd1cmVTdW1tYXJ5LmNvbnRyb2wubWF4LFxuICAgICAgb3V0bGllcnM6IHN0YXRzLm91dGxpZXJzLmNvbnRyb2wub3V0bGllcnMsXG4gICAgICBzYW1wbGVzTVM6IHN0YXRzLmNvbnRyb2xNUyxcbiAgICB9KSxcbiAgICBleHBlcmltZW50Rm9ybWF0ZWRTYW1wbGVzOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBtaW46IHN0YXRzLnNldmVuRmlndXJlU3VtbWFyeS5leHBlcmltZW50Lm1pbixcbiAgICAgIHExOiBzdGF0cy5zZXZlbkZpZ3VyZVN1bW1hcnkuZXhwZXJpbWVudFsyNV0sXG4gICAgICBtZWRpYW46IHN0YXRzLnNldmVuRmlndXJlU3VtbWFyeS5leHBlcmltZW50WzUwXSxcbiAgICAgIHEzOiBzdGF0cy5zZXZlbkZpZ3VyZVN1bW1hcnkuZXhwZXJpbWVudFs3NV0sXG4gICAgICBtYXg6IHN0YXRzLnNldmVuRmlndXJlU3VtbWFyeS5leHBlcmltZW50Lm1heCxcbiAgICAgIG91dGxpZXJzOiBzdGF0cy5vdXRsaWVycy5leHBlcmltZW50Lm91dGxpZXJzLFxuICAgICAgc2FtcGxlc01TOiBzdGF0cy5leHBlcmltZW50TVMsXG4gICAgfSksXG4gIH07XG59XG5cbi8qKlxuICogUHJpb3JpdGl6ZSB0aGUgcGhhc2UgdGhhdCBoYXMgdGhlIGxhcmdlc3QgZGlmZmVyZW5jZSBpbiByZWdyZXNzaW9uIGZpcnN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGhhc2VTb3J0ZXIoXG4gIGE6IEhUTUxTZWN0aW9uUmVuZGVyRGF0YSxcbiAgYjogSFRNTFNlY3Rpb25SZW5kZXJEYXRhXG4pOiBudW1iZXIge1xuICBjb25zdCBBX09OX1RPUCA9IC0xO1xuICBjb25zdCBCX09OX1RPUCA9IDE7XG5cbiAgaWYgKGEuaXNTaWduaWZpY2FudCkge1xuICAgIGlmICghYi5pc1NpZ25pZmljYW50KSB7XG4gICAgICByZXR1cm4gQV9PTl9UT1A7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGJvdGggYXJlIHNpZ25pZmljYW50IHByZWZlciBzbG93ZXN0IG9uZVxuICAgICAgcmV0dXJuIGEuaGxEaWZmIC0gYi5obERpZmY7XG4gICAgfVxuICB9XG5cbiAgaWYgKGIuaXNTaWduaWZpY2FudCkge1xuICAgIGlmICghYS5pc1NpZ25pZmljYW50KSB7XG4gICAgICByZXR1cm4gQl9PTl9UT1A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZURhdGFGb3JIVE1MKFxuICBjb250cm9sRGF0YTogSVRyYWNlckJlbmNoVHJhY2VSZXN1bHQsXG4gIGV4cGVyaW1lbnREYXRhOiBJVHJhY2VyQmVuY2hUcmFjZVJlc3VsdCxcbiAgcmVwb3J0VGl0bGVzOiBQYXJzZWRUaXRsZUNvbmZpZ3Ncbik6IHtcbiAgZHVyYXRpb25TZWN0aW9uOiBIVE1MU2VjdGlvblJlbmRlckRhdGE7XG4gIHN1YlBoYXNlU2VjdGlvbnM6IEhUTUxTZWN0aW9uUmVuZGVyRGF0YVtdO1xufSB7XG4gIGNvbnN0IHZhbHVlc0J5UGhhc2VDb250cm9sID0gYnVja2V0UGhhc2VWYWx1ZXMoY29udHJvbERhdGEuc2FtcGxlcyk7XG4gIGNvbnN0IHZhbHVlc0J5UGhhc2VFeHBlcmltZW50ID0gYnVja2V0UGhhc2VWYWx1ZXMoZXhwZXJpbWVudERhdGEuc2FtcGxlcyk7XG4gIGNvbnN0IHN1YlBoYXNlcyA9IE9iamVjdC5rZXlzKHZhbHVlc0J5UGhhc2VDb250cm9sKS5maWx0ZXIoXG4gICAgKGspID0+IGsgIT09IFBBR0VfTE9BRF9USU1FXG4gICk7XG5cbiAgY29uc3QgZHVyYXRpb25TZWN0aW9uID0gZm9ybWF0UGhhc2VEYXRhKFxuICAgIHZhbHVlc0J5UGhhc2VDb250cm9sW1BBR0VfTE9BRF9USU1FXSxcbiAgICB2YWx1ZXNCeVBoYXNlRXhwZXJpbWVudFtQQUdFX0xPQURfVElNRV0sXG4gICAgUEFHRV9MT0FEX1RJTUVcbiAgKTtcblxuICBjb25zdCBzdWJQaGFzZVNlY3Rpb25zOiBIVE1MU2VjdGlvblJlbmRlckRhdGFbXSA9IHN1YlBoYXNlcy5tYXAoKHBoYXNlKSA9PiB7XG4gICAgY29uc3QgY29udHJvbFZhbHVlcyA9IHZhbHVlc0J5UGhhc2VDb250cm9sW3BoYXNlXTtcbiAgICBjb25zdCBleHBlcmltZW50VmFsdWVzID0gdmFsdWVzQnlQaGFzZUV4cGVyaW1lbnRbcGhhc2VdO1xuICAgIGNvbnN0IHJlbmRlckRhdGFGb3JQaGFzZSA9IGZvcm1hdFBoYXNlRGF0YShcbiAgICAgIGNvbnRyb2xWYWx1ZXMsXG4gICAgICBleHBlcmltZW50VmFsdWVzLFxuICAgICAgcGhhc2VcbiAgICApO1xuXG4gICAgcmVuZGVyRGF0YUZvclBoYXNlLnNlcnZlcnMgPSByZXBvcnRUaXRsZXMuc2VydmVycztcbiAgICByZXR1cm4gcmVuZGVyRGF0YUZvclBoYXNlIGFzIEhUTUxTZWN0aW9uUmVuZGVyRGF0YTtcbiAgfSk7XG5cbiAgZHVyYXRpb25TZWN0aW9uLnNlcnZlcnMgPSByZXBvcnRUaXRsZXMuc2VydmVycztcbiAgcmV0dXJuIHsgZHVyYXRpb25TZWN0aW9uLCBzdWJQaGFzZVNlY3Rpb25zIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvbnN1bWFibGVIVE1MKFxuICBjb250cm9sRGF0YTogSVRyYWNlckJlbmNoVHJhY2VSZXN1bHQsXG4gIGV4cGVyaW1lbnREYXRhOiBJVHJhY2VyQmVuY2hUcmFjZVJlc3VsdCxcbiAgdGJDb25maWc6IElUQkNvbmZpZ1xuKTogc3RyaW5nIHtcbiAgY29uc3QgcmVwb3J0VGl0bGVzID0gcmVzb2x2ZVRpdGxlcyh0YkNvbmZpZywgY29udHJvbERhdGEubWV0YS5icm93c2VyVmVyc2lvbik7XG4gIGNvbnN0IHsgZHVyYXRpb25TZWN0aW9uLCBzdWJQaGFzZVNlY3Rpb25zIH0gPSBnZW5lcmF0ZURhdGFGb3JIVE1MKFxuICAgIGNvbnRyb2xEYXRhLFxuICAgIGV4cGVyaW1lbnREYXRhLFxuICAgIHJlcG9ydFRpdGxlc1xuICApO1xuXG4gIGNvbnN0IHRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKFJFUE9SVF9URU1QTEFURV9SQVcpO1xuXG4gIHJldHVybiB0ZW1wbGF0ZSh7XG4gICAgY3VtdWxhdGl2ZUNoYXJ0RGF0YTogYnVpbGRDdW11bGF0aXZlQ2hhcnREYXRhKGNvbnRyb2xEYXRhLCBleHBlcmltZW50RGF0YSksXG4gICAgZHVyYXRpb25TZWN0aW9uLFxuICAgIHJlcG9ydFRpdGxlcyxcbiAgICBzdWJQaGFzZVNlY3Rpb25zLFxuICAgIGNvbmZpZ3NTSlNPTlN0cmluZzogSlNPTi5zdHJpbmdpZnkodGJDb25maWcsIG51bGwsIDQpLFxuICAgIHNlY3Rpb25Gb3JtYXR0ZWREYXRhSnNvbjogSlNPTi5zdHJpbmdpZnkoc3ViUGhhc2VTZWN0aW9ucyksXG4gIH0pO1xufVxuIl19