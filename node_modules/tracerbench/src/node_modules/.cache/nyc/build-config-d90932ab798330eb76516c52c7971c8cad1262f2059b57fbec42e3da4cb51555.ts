"use strict";function cov_1mewtctp67(){var path="/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts";var hash="e8704fdf7527379759da776d74f3c524fe73f486";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:11},end:{line:3,column:30}},"2":{start:{line:4,column:14},end:{line:4,column:30}},"3":{start:{line:5,column:13},end:{line:5,column:28}},"4":{start:{line:6,column:16},end:{line:6,column:43}},"5":{start:{line:7,column:28},end:{line:7,column:58}},"6":{start:{line:8,column:20},end:{line:8,column:42}},"7":{start:{line:9,column:23},end:{line:14,column:1}},"8":{start:{line:15,column:23},end:{line:15,column:38}},"9":{start:{line:21,column:14},end:{line:21,column:19}},"10":{start:{line:22,column:4},end:{line:24,column:7}},"11":{start:{line:23,column:8},end:{line:23,column:72}},"12":{start:{line:27,column:4},end:{line:27,column:13}},"13":{start:{line:38,column:4},end:{line:47,column:5}},"14":{start:{line:39,column:8},end:{line:39,column:63}},"15":{start:{line:40,column:8},end:{line:40,column:66}},"16":{start:{line:43,column:8},end:{line:45,column:9}},"17":{start:{line:44,column:12},end:{line:44,column:19}},"18":{start:{line:46,column:8},end:{line:46,column:16}},"19":{start:{line:48,column:4},end:{line:48,column:45}},"20":{start:{line:50,column:29},end:{line:50,column:56}},"21":{start:{line:51,column:4},end:{line:59,column:5}},"22":{start:{line:52,column:23},end:{line:52,column:51}},"23":{start:{line:53,column:8},end:{line:55,column:9}},"24":{start:{line:54,column:12},end:{line:54,column:83}},"25":{start:{line:56,column:23},end:{line:56,column:56}},"26":{start:{line:57,column:8},end:{line:57,column:43}},"27":{start:{line:58,column:8},end:{line:58,column:22}},"28":{start:{line:60,column:4},end:{line:60,column:18}},"29":{start:{line:62,column:0},end:{line:62,column:32}},"30":{start:{line:65,column:4},end:{line:65,column:55}},"31":{start:{line:66,column:4},end:{line:70,column:5}},"32":{start:{line:67,column:8},end:{line:69,column:9}},"33":{start:{line:68,column:12},end:{line:68,column:63}},"34":{start:{line:74,column:4},end:{line:79,column:5}},"35":{start:{line:75,column:22},end:{line:75,column:33}},"36":{start:{line:76,column:8},end:{line:78,column:9}},"37":{start:{line:77,column:12},end:{line:77,column:57}},"38":{start:{line:82,column:21},end:{line:82,column:44}},"39":{start:{line:83,column:18},end:{line:83,column:39}},"40":{start:{line:86,column:4},end:{line:93,column:5}},"41":{start:{line:87,column:8},end:{line:87,column:23}},"42":{start:{line:88,column:8},end:{line:88,column:47}},"43":{start:{line:91,column:8},end:{line:91,column:37}},"44":{start:{line:92,column:8},end:{line:92,column:24}},"45":{start:{line:94,column:4},end:{line:94,column:23}},"46":{start:{line:100,column:16},end:{line:100,column:18}},"47":{start:{line:101,column:14},end:{line:101,column:19}},"48":{start:{line:102,column:4},end:{line:107,column:7}},"49":{start:{line:103,column:8},end:{line:106,column:9}},"50":{start:{line:104,column:12},end:{line:104,column:35}},"51":{start:{line:105,column:12},end:{line:105,column:30}},"52":{start:{line:108,column:4},end:{line:108,column:15}},"53":{start:{line:119,column:15},end:{line:119,column:56}},"54":{start:{line:120,column:4},end:{line:120,column:30}},"55":{start:{line:121,column:28},end:{line:121,column:53}},"56":{start:{line:122,column:4},end:{line:122,column:43}},"57":{start:{line:123,column:19},end:{line:123,column:46}},"58":{start:{line:124,column:4},end:{line:126,column:5}},"59":{start:{line:125,column:8},end:{line:125,column:54}},"60":{start:{line:127,column:4},end:{line:127,column:77}},"61":{start:{line:129,column:0},end:{line:129,column:30}}},fnMap:{"0":{name:"getCommandDefaults",decl:{start:{line:20,column:9},end:{line:20,column:27}},loc:{start:{line:20,column:35},end:{line:28,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:41},end:{line:24,column:5}},line:22},"2":{name:"readConfig",decl:{start:{line:34,column:9},end:{line:34,column:19}},loc:{start:{line:34,column:49},end:{line:61,column:1}},line:34},"3":{name:"resolveConfigFileKeys",decl:{start:{line:64,column:9},end:{line:64,column:30}},loc:{start:{line:64,column:66},end:{line:71,column:1}},line:64},"4":{name:"resolveFileKeys",decl:{start:{line:73,column:9},end:{line:73,column:24}},loc:{start:{line:73,column:50},end:{line:80,column:1}},line:73},"5":{name:"resolveConfigFile",decl:{start:{line:81,column:9},end:{line:81,column:26}},loc:{start:{line:81,column:38},end:{line:95,column:1}},line:81},"6":{name:"handleExplicitFlags",decl:{start:{line:97,column:9},end:{line:97,column:28}},loc:{start:{line:99,column:22},end:{line:109,column:1}},line:99},"7":{name:"(anonymous_7)",decl:{start:{line:102,column:26},end:{line:102,column:27}},loc:{start:{line:102,column:35},end:{line:107,column:5}},line:102},"8":{name:"getConfig",decl:{start:{line:116,column:9},end:{line:116,column:18}},loc:{start:{line:118,column:22},end:{line:128,column:1}},line:118}},branchMap:{"0":{loc:{start:{line:23,column:17},end:{line:23,column:71}},type:"binary-expr",locations:[{start:{line:23,column:17},end:{line:23,column:57}},{start:{line:23,column:61},end:{line:23,column:71}}],line:23},"1":{loc:{start:{line:34,column:20},end:{line:34,column:47}},type:"default-arg",locations:[{start:{line:34,column:32},end:{line:34,column:47}}],line:34},"2":{loc:{start:{line:43,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:43,column:8},end:{line:45,column:9}},{start:{line:43,column:8},end:{line:45,column:9}}],line:43},"3":{loc:{start:{line:51,column:4},end:{line:59,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:59,column:5}},{start:{line:51,column:4},end:{line:59,column:5}}],line:51},"4":{loc:{start:{line:53,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:53,column:8},end:{line:55,column:9}},{start:{line:53,column:8},end:{line:55,column:9}}],line:53},"5":{loc:{start:{line:64,column:39},end:{line:64,column:64}},type:"default-arg",locations:[{start:{line:64,column:51},end:{line:64,column:64}}],line:64},"6":{loc:{start:{line:66,column:4},end:{line:70,column:5}},type:"if",locations:[{start:{line:66,column:4},end:{line:70,column:5}},{start:{line:66,column:4},end:{line:70,column:5}}],line:66},"7":{loc:{start:{line:76,column:8},end:{line:78,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:78,column:9}},{start:{line:76,column:8},end:{line:78,column:9}}],line:76},"8":{loc:{start:{line:86,column:4},end:{line:93,column:5}},type:"if",locations:[{start:{line:86,column:4},end:{line:93,column:5}},{start:{line:86,column:4},end:{line:93,column:5}}],line:86},"9":{loc:{start:{line:103,column:8},end:{line:106,column:9}},type:"if",locations:[{start:{line:103,column:8},end:{line:106,column:9}},{start:{line:103,column:8},end:{line:106,column:9}}],line:103},"10":{loc:{start:{line:103,column:12},end:{line:103,column:59}},type:"binary-expr",locations:[{start:{line:103,column:12},end:{line:103,column:32}},{start:{line:103,column:36},end:{line:103,column:59}}],line:103},"11":{loc:{start:{line:116,column:19},end:{line:116,column:52}},type:"default-arg",locations:[{start:{line:116,column:37},end:{line:116,column:52}}],line:116},"12":{loc:{start:{line:124,column:4},end:{line:126,column:5}},type:"if",locations:[{start:{line:124,column:4},end:{line:126,column:5}},{start:{line:124,column:4},end:{line:126,column:5}}],line:124}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/command-config/build-config.ts"],names:[],mappings:"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",sourcesContent:["import { OutputFlags } from \"@oclif/parser\";\nimport * as fs from \"fs-extra\";\nimport * as JSON5 from \"json5\";\nimport * as path from \"path\";\n\nimport { mergeLeft } from \"../helpers/utils\";\nimport { getDefaultValue } from \"./default-flag-args\";\nimport { EXTENDS, ITBConfig } from \"./tb-config\";\n\nconst configFileKeys = [\n  \"extends\",\n  \"tbResultsFolder\",\n  \"inputFilePath\",\n  \"outputFilePath\",\n] as const;\n\nconst serverFileKeys = [\"har\", \"dist\"] as const;\n\n// STEP 1\n// takes a command flags object with all the flags the command accepts\n// runs that commands object thru the defaults and returns those values\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getCommandDefaults(flags: OutputFlags<any>): OutputFlags<any> {\n  const f = flags;\n  Object.entries(f).forEach(([key]) => {\n    f[key] = getDefaultValue(key) || flags[key];\n  });\n\n  // this will return a bunch of flags that don't have values\n  // and wont know which are required or not\n  return f;\n}\n\n/**\n * Read config file, expanding relative paths to absolute and\n * recursively reading extends\n * @param fileOrDir config file path or directory with a tbconfig.json\n */\nexport function readConfig(fileOrDir = \"tbconfig.json\"): ITBConfig | undefined {\n  let configDir: string;\n  let configFile: string;\n  let config: ITBConfig;\n  try {\n    [configDir, configFile] = resolveConfigFile(fileOrDir);\n    config = JSON5.parse(fs.readFileSync(configFile, \"utf8\"));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return;\n    }\n    throw e;\n  }\n  resolveConfigFileKeys(config, configDir);\n  // extends is already absolute here from the above\n  const parentConfigFile = config[EXTENDS];\n  if (parentConfigFile) {\n    const parent = readConfig(parentConfigFile);\n    if (parent === undefined) {\n      throw new Error(`Extended config missing referenced in ${configFile}`);\n    }\n    const merged = mergeLeft(parent, config);\n    delete merged[EXTENDS];\n    return merged;\n  }\n  return config;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction resolveConfigFileKeys(config: ITBConfig, configDir = process.cwd()) {\n  resolveFileKeys(config, configFileKeys, configDir);\n  if (Array.isArray(config.servers)) {\n    for (const server of config.servers) {\n      resolveFileKeys(server, serverFileKeys, configDir);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction resolveFileKeys<K extends string>(\n  config: { [P in K]?: string },\n  keys: readonly K[],\n  configDir: string\n) {\n  for (const key of keys) {\n    const value = config[key];\n    if (typeof value === \"string\") {\n      config[key] = path.resolve(configDir, value);\n    }\n  }\n}\n\nfunction resolveConfigFile(fileOrDir: string): [string, string] {\n  const resolved = path.resolve(fileOrDir);\n  const stats = fs.statSync(resolved);\n  let dir: string;\n  let file: string;\n  if (stats.isDirectory()) {\n    dir = resolved;\n    file = path.join(dir, \"tbconfig.json\");\n  } else {\n    dir = path.dirname(resolved);\n    file = resolved;\n  }\n  return [dir, file];\n}\n\n// overwrite all flags explicity flagged within cli command\nfunction handleExplicitFlags(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  flags: OutputFlags<any>,\n  explicitFlags: string[]\n): {} {\n  const obj: Record<string, unknown> = {};\n  const f = flags;\n\n  explicitFlags.forEach((exF) => {\n    if (exF.startsWith(\"--\") && !exF.includes(\"config\")) {\n      exF = exF.substring(2);\n      obj[exF] = f[exF];\n    }\n  });\n\n  return obj as {};\n}\n\n/**\n * Executes the pemberly-tracerbench serve:compare command with terminal stdout summary\n * @param configFileOrDir - path to a tbconfig.json file (configuration file)\n * @param flags - relative subset of flags for a given command\n * @param explicitFlags - overwriting flags coming from the CLI session directly eg. --headless, --url etc.\n */\nexport function getConfig(\n  configFileOrDir = \"tbconfig.json\",\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  flags: OutputFlags<any>,\n  explicitFlags: string[]\n): ITBConfig {\n  const ef = handleExplicitFlags(flags, explicitFlags);\n  resolveConfigFileKeys(ef);\n  const commandDefaults = getCommandDefaults(flags);\n  resolveConfigFileKeys(commandDefaults);\n\n  const config = readConfig(configFileOrDir);\n  if (config === undefined) {\n    return mergeLeft(commandDefaults, ef);\n  }\n\n  return mergeLeft(mergeLeft(commandDefaults, config), ef);\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e8704fdf7527379759da776d74f3c524fe73f486"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1mewtctp67=function(){return actualCoverage;};return actualCoverage;}cov_1mewtctp67().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fs=(cov_1mewtctp67().s[1]++,require("fs-extra"));const JSON5=(cov_1mewtctp67().s[2]++,require("json5"));const path=(cov_1mewtctp67().s[3]++,require("path"));const utils_1=(cov_1mewtctp67().s[4]++,require("../helpers/utils"));const default_flag_args_1=(cov_1mewtctp67().s[5]++,require("./default-flag-args"));const tb_config_1=(cov_1mewtctp67().s[6]++,require("./tb-config"));const configFileKeys=(cov_1mewtctp67().s[7]++,["extends","tbResultsFolder","inputFilePath","outputFilePath"]);const serverFileKeys=(cov_1mewtctp67().s[8]++,["har","dist"]);// STEP 1
// takes a command flags object with all the flags the command accepts
// runs that commands object thru the defaults and returns those values
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getCommandDefaults(flags){cov_1mewtctp67().f[0]++;const f=(cov_1mewtctp67().s[9]++,flags);cov_1mewtctp67().s[10]++;Object.entries(f).forEach(([key])=>{cov_1mewtctp67().f[1]++;cov_1mewtctp67().s[11]++;f[key]=(cov_1mewtctp67().b[0][0]++,default_flag_args_1.getDefaultValue(key))||(cov_1mewtctp67().b[0][1]++,flags[key]);});// this will return a bunch of flags that don't have values
// and wont know which are required or not
cov_1mewtctp67().s[12]++;return f;}/**
 * Read config file, expanding relative paths to absolute and
 * recursively reading extends
 * @param fileOrDir config file path or directory with a tbconfig.json
 */function readConfig(fileOrDir=(cov_1mewtctp67().b[1][0]++,"tbconfig.json")){cov_1mewtctp67().f[2]++;let configDir;let configFile;let config;cov_1mewtctp67().s[13]++;try{cov_1mewtctp67().s[14]++;[configDir,configFile]=resolveConfigFile(fileOrDir);cov_1mewtctp67().s[15]++;config=JSON5.parse(fs.readFileSync(configFile,"utf8"));}catch(e){cov_1mewtctp67().s[16]++;if(e.code==="ENOENT"){cov_1mewtctp67().b[2][0]++;cov_1mewtctp67().s[17]++;return;}else{cov_1mewtctp67().b[2][1]++;}cov_1mewtctp67().s[18]++;throw e;}cov_1mewtctp67().s[19]++;resolveConfigFileKeys(config,configDir);// extends is already absolute here from the above
const parentConfigFile=(cov_1mewtctp67().s[20]++,config[tb_config_1.EXTENDS]);cov_1mewtctp67().s[21]++;if(parentConfigFile){cov_1mewtctp67().b[3][0]++;const parent=(cov_1mewtctp67().s[22]++,readConfig(parentConfigFile));cov_1mewtctp67().s[23]++;if(parent===undefined){cov_1mewtctp67().b[4][0]++;cov_1mewtctp67().s[24]++;throw new Error(`Extended config missing referenced in ${configFile}`);}else{cov_1mewtctp67().b[4][1]++;}const merged=(cov_1mewtctp67().s[25]++,utils_1.mergeLeft(parent,config));cov_1mewtctp67().s[26]++;delete merged[tb_config_1.EXTENDS];cov_1mewtctp67().s[27]++;return merged;}else{cov_1mewtctp67().b[3][1]++;}cov_1mewtctp67().s[28]++;return config;}cov_1mewtctp67().s[29]++;exports.readConfig=readConfig;// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function resolveConfigFileKeys(config,configDir=(cov_1mewtctp67().b[5][0]++,process.cwd())){cov_1mewtctp67().f[3]++;cov_1mewtctp67().s[30]++;resolveFileKeys(config,configFileKeys,configDir);cov_1mewtctp67().s[31]++;if(Array.isArray(config.servers)){cov_1mewtctp67().b[6][0]++;cov_1mewtctp67().s[32]++;for(const server of config.servers){cov_1mewtctp67().s[33]++;resolveFileKeys(server,serverFileKeys,configDir);}}else{cov_1mewtctp67().b[6][1]++;}}// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function resolveFileKeys(config,keys,configDir){cov_1mewtctp67().f[4]++;cov_1mewtctp67().s[34]++;for(const key of keys){const value=(cov_1mewtctp67().s[35]++,config[key]);cov_1mewtctp67().s[36]++;if(typeof value==="string"){cov_1mewtctp67().b[7][0]++;cov_1mewtctp67().s[37]++;config[key]=path.resolve(configDir,value);}else{cov_1mewtctp67().b[7][1]++;}}}function resolveConfigFile(fileOrDir){cov_1mewtctp67().f[5]++;const resolved=(cov_1mewtctp67().s[38]++,path.resolve(fileOrDir));const stats=(cov_1mewtctp67().s[39]++,fs.statSync(resolved));let dir;let file;cov_1mewtctp67().s[40]++;if(stats.isDirectory()){cov_1mewtctp67().b[8][0]++;cov_1mewtctp67().s[41]++;dir=resolved;cov_1mewtctp67().s[42]++;file=path.join(dir,"tbconfig.json");}else{cov_1mewtctp67().b[8][1]++;cov_1mewtctp67().s[43]++;dir=path.dirname(resolved);cov_1mewtctp67().s[44]++;file=resolved;}cov_1mewtctp67().s[45]++;return[dir,file];}// overwrite all flags explicity flagged within cli command
function handleExplicitFlags(// eslint-disable-next-line @typescript-eslint/no-explicit-any
flags,explicitFlags){cov_1mewtctp67().f[6]++;const obj=(cov_1mewtctp67().s[46]++,{});const f=(cov_1mewtctp67().s[47]++,flags);cov_1mewtctp67().s[48]++;explicitFlags.forEach(exF=>{cov_1mewtctp67().f[7]++;cov_1mewtctp67().s[49]++;if((cov_1mewtctp67().b[10][0]++,exF.startsWith("--"))&&(cov_1mewtctp67().b[10][1]++,!exF.includes("config"))){cov_1mewtctp67().b[9][0]++;cov_1mewtctp67().s[50]++;exF=exF.substring(2);cov_1mewtctp67().s[51]++;obj[exF]=f[exF];}else{cov_1mewtctp67().b[9][1]++;}});cov_1mewtctp67().s[52]++;return obj;}/**
 * Executes the pemberly-tracerbench serve:compare command with terminal stdout summary
 * @param configFileOrDir - path to a tbconfig.json file (configuration file)
 * @param flags - relative subset of flags for a given command
 * @param explicitFlags - overwriting flags coming from the CLI session directly eg. --headless, --url etc.
 */function getConfig(configFileOrDir=(cov_1mewtctp67().b[11][0]++,"tbconfig.json"),// eslint-disable-next-line @typescript-eslint/no-explicit-any
flags,explicitFlags){cov_1mewtctp67().f[8]++;const ef=(cov_1mewtctp67().s[53]++,handleExplicitFlags(flags,explicitFlags));cov_1mewtctp67().s[54]++;resolveConfigFileKeys(ef);const commandDefaults=(cov_1mewtctp67().s[55]++,getCommandDefaults(flags));cov_1mewtctp67().s[56]++;resolveConfigFileKeys(commandDefaults);const config=(cov_1mewtctp67().s[57]++,readConfig(configFileOrDir));cov_1mewtctp67().s[58]++;if(config===undefined){cov_1mewtctp67().b[12][0]++;cov_1mewtctp67().s[59]++;return utils_1.mergeLeft(commandDefaults,ef);}else{cov_1mewtctp67().b[12][1]++;}cov_1mewtctp67().s[60]++;return utils_1.mergeLeft(utils_1.mergeLeft(commandDefaults,config),ef);}cov_1mewtctp67().s[61]++;exports.getConfig=getConfig;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,