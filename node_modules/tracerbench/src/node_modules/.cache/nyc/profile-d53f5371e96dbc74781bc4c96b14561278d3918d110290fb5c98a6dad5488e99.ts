"use strict";function cov_1skb92i4ln(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts";var hash="7dcb595332bbcac88aa2d42a52625617183de4ba";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:43}},"2":{start:{line:5,column:19},end:{line:5,column:38}},"3":{start:{line:6,column:14},end:{line:6,column:30}},"4":{start:{line:7,column:15},end:{line:7,column:30}},"5":{start:{line:8,column:25},end:{line:8,column:53}},"6":{start:{line:9,column:15},end:{line:9,column:41}},"7":{start:{line:10,column:16},end:{line:10,column:43}},"8":{start:{line:11,column:16},end:{line:11,column:43}},"9":{start:{line:12,column:28},end:{line:255,column:4}},"10":{start:{line:15,column:12},end:{line:15,column:32}},"11":{start:{line:16,column:12},end:{line:16,column:28}},"12":{start:{line:19,column:36},end:{line:19,column:55}},"13":{start:{line:20,column:85},end:{line:20,column:90}},"14":{start:{line:21,column:32},end:{line:21,column:36}},"15":{start:{line:22,column:28},end:{line:29,column:13}},"16":{start:{line:30,column:31},end:{line:33,column:13}},"17":{start:{line:34,column:26},end:{line:106,column:14}},"18":{start:{line:39,column:24},end:{line:41,column:38}},"19":{start:{line:49,column:24},end:{line:56,column:25}},"20":{start:{line:50,column:28},end:{line:52,column:29}},"21":{start:{line:51,column:32},end:{line:51,column:70}},"22":{start:{line:55,column:28},end:{line:55,column:46}},"23":{start:{line:63,column:24},end:{line:63,column:89}},"24":{start:{line:64,column:24},end:{line:64,column:87}},"25":{start:{line:65,column:24},end:{line:65,column:106}},"26":{start:{line:67,column:24},end:{line:67,column:72}},"27":{start:{line:69,column:28},end:{line:75,column:29}},"28":{start:{line:70,column:44},end:{line:70,column:82}},"29":{start:{line:71,column:32},end:{line:71,column:43}},"30":{start:{line:74,column:32},end:{line:74,column:145}},"31":{start:{line:82,column:49},end:{line:82,column:52}},"32":{start:{line:83,column:24},end:{line:90,column:25}},"33":{start:{line:85,column:52},end:{line:85,column:117}},"34":{start:{line:86,column:28},end:{line:86,column:58}},"35":{start:{line:89,column:28},end:{line:89,column:51}},"36":{start:{line:96,column:48},end:{line:96,column:51}},"37":{start:{line:98,column:24},end:{line:103,column:25}},"38":{start:{line:99,column:28},end:{line:99,column:77}},"39":{start:{line:102,column:28},end:{line:102,column:51}},"40":{start:{line:107,column:12},end:{line:119,column:15}},"41":{start:{line:110,column:16},end:{line:110,column:39}},"42":{start:{line:114,column:16},end:{line:114,column:37}},"43":{start:{line:116,column:16},end:{line:116,column:38}},"44":{start:{line:118,column:16},end:{line:118,column:69}},"45":{start:{line:122,column:34},end:{line:122,column:35}},"46":{start:{line:123,column:31},end:{line:123,column:33}},"47":{start:{line:124,column:12},end:{line:136,column:15}},"48":{start:{line:125,column:35},end:{line:125,column:66}},"49":{start:{line:126,column:35},end:{line:126,column:54}},"50":{start:{line:128,column:28},end:{line:128,column:47}},"51":{start:{line:129,column:37},end:{line:129,column:53}},"52":{start:{line:130,column:16},end:{line:130,column:48}},"53":{start:{line:131,column:16},end:{line:135,column:19}},"54":{start:{line:137,column:12},end:{line:137,column:88}},"55":{start:{line:139,column:12},end:{line:145,column:15}},"56":{start:{line:141,column:16},end:{line:141,column:47}},"57":{start:{line:144,column:16},end:{line:144,column:46}},"58":{start:{line:148,column:35},end:{line:148,column:36}},"59":{start:{line:149,column:32},end:{line:149,column:34}},"60":{start:{line:150,column:12},end:{line:162,column:15}},"61":{start:{line:151,column:35},end:{line:151,column:73}},"62":{start:{line:152,column:35},end:{line:152,column:64}},"63":{start:{line:154,column:28},end:{line:154,column:57}},"64":{start:{line:155,column:37},end:{line:155,column:53}},"65":{start:{line:156,column:16},end:{line:156,column:49}},"66":{start:{line:157,column:16},end:{line:161,column:19}},"67":{start:{line:163,column:12},end:{line:163,column:90}},"68":{start:{line:165,column:12},end:{line:171,column:15}},"69":{start:{line:167,column:16},end:{line:167,column:47}},"70":{start:{line:170,column:16},end:{line:170,column:46}},"71":{start:{line:176,column:28},end:{line:176,column:30}},"72":{start:{line:177,column:31},end:{line:177,column:35}},"73":{start:{line:179,column:31},end:{line:179,column:33}},"74":{start:{line:180,column:12},end:{line:182,column:13}},"75":{start:{line:181,column:16},end:{line:181,column:114}},"76":{start:{line:183,column:12},end:{line:188,column:13}},"77":{start:{line:184,column:16},end:{line:184,column:88}},"78":{start:{line:187,column:16},end:{line:187,column:30}},"79":{start:{line:189,column:12},end:{line:194,column:13}},"80":{start:{line:190,column:16},end:{line:190,column:67}},"81":{start:{line:193,column:16},end:{line:193,column:30}},"82":{start:{line:195,column:12},end:{line:200,column:13}},"83":{start:{line:196,column:16},end:{line:196,column:60}},"84":{start:{line:199,column:16},end:{line:199,column:28}},"85":{start:{line:201,column:12},end:{line:203,column:13}},"86":{start:{line:202,column:16},end:{line:202,column:144}},"87":{start:{line:204,column:12},end:{line:219,column:15}},"88":{start:{line:205,column:35},end:{line:205,column:87}},"89":{start:{line:208,column:16},end:{line:218,column:17}},"90":{start:{line:209,column:20},end:{line:209,column:41}},"91":{start:{line:210,column:20},end:{line:210,column:76}},"92":{start:{line:212,column:21},end:{line:218,column:17}},"93":{start:{line:214,column:20},end:{line:216,column:21}},"94":{start:{line:215,column:24},end:{line:215,column:31}},"95":{start:{line:217,column:20},end:{line:217,column:76}},"96":{start:{line:220,column:12},end:{line:220,column:46}},"97":{start:{line:223,column:12},end:{line:229,column:14}},"98":{start:{line:232,column:34},end:{line:232,column:76}},"99":{start:{line:233,column:12},end:{line:233,column:87}},"100":{start:{line:234,column:12},end:{line:240,column:15}},"101":{start:{line:235,column:16},end:{line:239,column:20}},"102":{start:{line:244,column:4},end:{line:244,column:32}},"103":{start:{line:245,column:4},end:{line:245,column:80}},"104":{start:{line:246,column:4},end:{line:246,column:36}},"105":{start:{line:247,column:4},end:{line:253,column:6}},"106":{start:{line:254,column:4},end:{line:254,column:19}},"107":{start:{line:256,column:0},end:{line:256,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:29},end:{line:12,column:30}},loc:{start:{line:12,column:35},end:{line:255,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:8},end:{line:14,column:9}},loc:{start:{line:14,column:22},end:{line:17,column:9}},line:14},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:8},end:{line:18,column:9}},loc:{start:{line:18,column:20},end:{line:120,column:9}},line:18},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:26},end:{line:37,column:27}},loc:{start:{line:37,column:41},end:{line:42,column:21}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:26},end:{line:46,column:27}},loc:{start:{line:46,column:32},end:{line:57,column:21}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:61,column:26},end:{line:61,column:27}},loc:{start:{line:61,column:41},end:{line:77,column:21}},line:61},"6":{name:"getURLFromHAR",decl:{start:{line:68,column:33},end:{line:68,column:46}},loc:{start:{line:68,column:52},end:{line:76,column:25}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:81,column:26},end:{line:81,column:27}},loc:{start:{line:81,column:41},end:{line:91,column:21}},line:81},"8":{name:"(anonymous_8)",decl:{start:{line:95,column:26},end:{line:95,column:27}},loc:{start:{line:95,column:41},end:{line:104,column:21}},line:95},"9":{name:"(anonymous_9)",decl:{start:{line:109,column:23},end:{line:109,column:24}},loc:{start:{line:109,column:34},end:{line:111,column:13}},line:109},"10":{name:"(anonymous_10)",decl:{start:{line:112,column:22},end:{line:112,column:23}},loc:{start:{line:112,column:37},end:{line:119,column:13}},line:112},"11":{name:"(anonymous_11)",decl:{start:{line:121,column:8},end:{line:121,column:9}},loc:{start:{line:121,column:24},end:{line:146,column:9}},line:121},"12":{name:"(anonymous_12)",decl:{start:{line:125,column:24},end:{line:125,column:25}},loc:{start:{line:125,column:35},end:{line:125,column:66}},line:125},"13":{name:"(anonymous_13)",decl:{start:{line:126,column:24},end:{line:126,column:25}},loc:{start:{line:126,column:35},end:{line:126,column:54}},line:126},"14":{name:"(anonymous_14)",decl:{start:{line:127,column:25},end:{line:127,column:26}},loc:{start:{line:127,column:36},end:{line:136,column:13}},line:127},"15":{name:"(anonymous_15)",decl:{start:{line:140,column:22},end:{line:140,column:23}},loc:{start:{line:140,column:32},end:{line:142,column:13}},line:140},"16":{name:"(anonymous_16)",decl:{start:{line:143,column:25},end:{line:143,column:26}},loc:{start:{line:143,column:34},end:{line:145,column:13}},line:143},"17":{name:"(anonymous_17)",decl:{start:{line:147,column:8},end:{line:147,column:9}},loc:{start:{line:147,column:25},end:{line:172,column:9}},line:147},"18":{name:"(anonymous_18)",decl:{start:{line:151,column:24},end:{line:151,column:25}},loc:{start:{line:151,column:35},end:{line:151,column:73}},line:151},"19":{name:"(anonymous_19)",decl:{start:{line:152,column:24},end:{line:152,column:25}},loc:{start:{line:152,column:35},end:{line:152,column:64}},line:152},"20":{name:"(anonymous_20)",decl:{start:{line:153,column:25},end:{line:153,column:26}},loc:{start:{line:153,column:36},end:{line:162,column:13}},line:153},"21":{name:"(anonymous_21)",decl:{start:{line:166,column:22},end:{line:166,column:23}},loc:{start:{line:166,column:32},end:{line:168,column:13}},line:166},"22":{name:"(anonymous_22)",decl:{start:{line:169,column:25},end:{line:169,column:26}},loc:{start:{line:169,column:34},end:{line:171,column:13}},line:169},"23":{name:"(anonymous_23)",decl:{start:{line:174,column:8},end:{line:174,column:9}},loc:{start:{line:174,column:48},end:{line:221,column:9}},line:174},"24":{name:"(anonymous_24)",decl:{start:{line:205,column:24},end:{line:205,column:25}},loc:{start:{line:205,column:35},end:{line:205,column:87}},line:205},"25":{name:"(anonymous_25)",decl:{start:{line:207,column:25},end:{line:207,column:26}},loc:{start:{line:207,column:36},end:{line:219,column:13}},line:207},"26":{name:"(anonymous_26)",decl:{start:{line:222,column:8},end:{line:222,column:9}},loc:{start:{line:222,column:42},end:{line:230,column:9}},line:222},"27":{name:"(anonymous_27)",decl:{start:{line:231,column:8},end:{line:231,column:9}},loc:{start:{line:231,column:37},end:{line:241,column:9}},line:231},"28":{name:"(anonymous_28)",decl:{start:{line:234,column:31},end:{line:234,column:32}},loc:{start:{line:234,column:40},end:{line:240,column:13}},line:234}},branchMap:{"0":{loc:{start:{line:39,column:38},end:{line:41,column:37}},type:"cond-expr",locations:[{start:{line:40,column:30},end:{line:40,column:84}},{start:{line:41,column:30},end:{line:41,column:37}}],line:39},"1":{loc:{start:{line:50,column:28},end:{line:52,column:29}},type:"if",locations:[{start:{line:50,column:28},end:{line:52,column:29}},{start:{line:50,column:28},end:{line:52,column:29}}],line:50},"2":{loc:{start:{line:67,column:34},end:{line:67,column:71}},type:"cond-expr",locations:[{start:{line:67,column:47},end:{line:67,column:50}},{start:{line:67,column:53},end:{line:67,column:71}}],line:67},"3":{loc:{start:{line:180,column:12},end:{line:182,column:13}},type:"if",locations:[{start:{line:180,column:12},end:{line:182,column:13}},{start:{line:180,column:12},end:{line:182,column:13}}],line:180},"4":{loc:{start:{line:195,column:12},end:{line:200,column:13}},type:"if",locations:[{start:{line:195,column:12},end:{line:200,column:13}},{start:{line:195,column:12},end:{line:200,column:13}}],line:195},"5":{loc:{start:{line:201,column:12},end:{line:203,column:13}},type:"if",locations:[{start:{line:201,column:12},end:{line:203,column:13}},{start:{line:201,column:12},end:{line:203,column:13}}],line:201},"6":{loc:{start:{line:205,column:35},end:{line:205,column:87}},type:"binary-expr",locations:[{start:{line:205,column:35},end:{line:205,column:56}},{start:{line:205,column:60},end:{line:205,column:87}}],line:205},"7":{loc:{start:{line:208,column:16},end:{line:218,column:17}},type:"if",locations:[{start:{line:208,column:16},end:{line:218,column:17}},{start:{line:208,column:16},end:{line:218,column:17}}],line:208},"8":{loc:{start:{line:212,column:21},end:{line:218,column:17}},type:"if",locations:[{start:{line:212,column:21},end:{line:218,column:17}},{start:{line:212,column:21},end:{line:218,column:17}}],line:212},"9":{loc:{start:{line:212,column:25},end:{line:213,column:52}},type:"binary-expr",locations:[{start:{line:212,column:25},end:{line:212,column:58}},{start:{line:213,column:20},end:{line:213,column:52}}],line:212},"10":{loc:{start:{line:214,column:20},end:{line:216,column:21}},type:"if",locations:[{start:{line:214,column:20},end:{line:216,column:21}},{start:{line:214,column:20},end:{line:216,column:21}}],line:214}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IConditions,\n  ITraceEvent,\n  ITraceEventFrame,\n  liveTrace,\n} from \"@tracerbench/core\";\nimport { Archive } from \"@tracerbench/har\";\nimport Protocol from \"devtools-protocol\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  convertToSentCase,\n  findFrame,\n  formatToDuration,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  logBar,\n  logBarOptions,\n  logHeading,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\ninterface ProfileContext {\n  cookies: Protocol.Network.CookieParam[];\n  harJSON: Archive;\n  traceJSONPath: string;\n  traceEvents: ITraceEventFrame[];\n  url: string;\n}\n\ntype markerLogMeta = {\n  name: string;\n  sentanceCaseName: string;\n  duration: number;\n  startTime: number;\n  bar: string;\n};\n\nexport default class Profile extends TBBaseCommand {\n  // include backwards compat to trace cmd\n  static aliases = [\"trace\"];\n  public trace: ITraceEventFrame[] = [];\n  public static description = `Parses a CPU profile with asset and marker timings.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n  };\n\n  public async run(): Promise<void> {\n    const { flags, args } = this.parse(Profile);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      url,\n    } = flags;\n    const { harpath } = args;\n    const cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n\n    const tasks = new listr([\n      {\n        title: \"Reading cookies json\",\n        task: async (ctx: ProfileContext) => {\n          // read cookies json file from path and set to context\n          ctx.cookies = cookiespath.length\n            ? await readJson(resolve(cookiespath))\n            : cookies;\n        },\n      },\n      {\n        title: \"Preparing results folder\",\n        task: () => {\n          // if the folder for the tracerbench results file\n          // does not exist then create it\n          try {\n            if (!existsSync(tbResultsFolder)) {\n              mkdirSync(tbResultsFolder);\n            }\n          } catch (error) {\n            this.error(error);\n          }\n        },\n      },\n      {\n        title: \"Validating & Cloning HAR file\",\n        task: async (ctx: ProfileContext) => {\n          // validate har and clone it to trace.json which will be mutated\n          ctx.harJSON = await readJson(resolve(harpath));\n          ctx.traceJSONPath = join(tbResultsFolder, \"trace.json\");\n          writeFileSync(\n            ctx.traceJSONPath,\n            JSON.stringify(ctx.harJSON, null, 2)\n          );\n          // if no url get url from har otherwise set with cmd url\n          ctx.url = url.length ? url : getURLFromHAR(ctx);\n\n          function getURLFromHAR(ctx: ProfileContext): string {\n            try {\n              const url = ctx.harJSON.log.entries[0].request.url;\n              return url;\n            } catch (error) {\n              throw new Error(\n                `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n              );\n            }\n          }\n        },\n      },\n      {\n        title: \"Recording the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { cookies, url } = ctx;\n          try {\n            // run the liveTrace\n            const { traceEvents } = await liveTrace(\n              url,\n              tbResultsFolder,\n              cookies,\n              conditions\n            );\n            ctx.traceEvents = traceEvents as ITraceEventFrame[];\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n      {\n        title: \"Setting trace events\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents } = ctx;\n          // mutates this.trace\n          try {\n            this.trace = setTraceEvents(traceEvents);\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n    ]);\n\n    await tasks\n      .run()\n      .catch((error) => {\n        this.error(`${error}`);\n      })\n      .then(async (ctx) => {\n        // log js-eval-time\n        this.logJSEvalTime();\n        // log css-parse\n        this.logCSSEvalTime();\n        // log user timings\n        await this.markerTimings(ctx.traceJSONPath, ctx.url);\n      });\n  }\n\n  private logJSEvalTime(): void {\n    let totalJSDuration = 0;\n    const jsEvalLogs: logBarOptions[] = [];\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = event.dur / 1000;\n        totalJSDuration += durationInMs;\n        jsEvalLogs.push({\n          totalDuration: totalJSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);\n\n    // log js-eval-time\n    jsEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  private logCSSEvalTime(): void {\n    let totalCSSDuration = 0;\n    const cssEvalLogs: logBarOptions[] = [];\n\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        cssEvalLogs.push({\n          totalDuration: totalCSSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);\n\n    // log css-parse-time\n    cssEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(\n    traceJSONPath: string,\n    url: string\n  ): Promise<void> {\n    let frame: string;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let customTrace: ITraceEventFrame[];\n    const markerLogs: markerLogMeta[] = [];\n\n    if (!url) {\n      this.error(\n        `Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n      );\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(traceJSONPath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      customTrace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (url.startsWith(\"http\")) {\n      frame = findFrame(customTrace, url);\n    } else {\n      frame = url;\n    }\n\n    if (!frame) {\n      this.error(\n        `Could not extract frame from trace. Explicitly opt-out of usertimings via \"--usertimings\" boolean flag and rerun.`\n      );\n    }\n\n    customTrace\n      .filter((event: ITraceEventFrame) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: ITraceEventFrame) => {\n        if (isFrameNavigationStart(frame, event, url)) {\n          startTime = event.ts;\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        } else if (\n          isFrameMark(frame, event) &&\n          event.name !== \"navigationStart\"\n        ) {\n          if (startTime === -1) {\n            return;\n          }\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        }\n      });\n\n    this.logMarkerTimings(markerLogs);\n  }\n\n  private buildMarkerLogs(\n    event: ITraceEventFrame,\n    startTime: number\n  ): markerLogMeta {\n    return {\n      name: event.name,\n      sentanceCaseName: convertToSentCase(event.name),\n      duration: formatToDuration(event.ts, startTime),\n      startTime,\n      bar: \"\",\n    };\n  }\n\n  private logMarkerTimings(markerLogs: markerLogMeta[]): void {\n    const totalDuration = markerLogs[markerLogs.length - 1].duration;\n\n    logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);\n    markerLogs.forEach((log) => {\n      this.log(\n        logBar({\n          totalDuration,\n          duration: log.duration,\n          title: log.sentanceCaseName,\n        })\n      );\n    });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7dcb595332bbcac88aa2d42a52625617183de4ba"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1skb92i4ln=function(){return actualCoverage;};return actualCoverage;}cov_1skb92i4ln().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable @typescript-eslint/no-explicit-any */const core_1=(cov_1skb92i4ln().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1skb92i4ln().s[2]++,require("fs-extra"));const listr=(cov_1skb92i4ln().s[3]++,require("listr"));const path_1=(cov_1skb92i4ln().s[4]++,require("path"));const command_config_1=(cov_1skb92i4ln().s[5]++,require("../command-config"));const args_1=(cov_1skb92i4ln().s[6]++,require("../helpers/args"));const flags_1=(cov_1skb92i4ln().s[7]++,require("../helpers/flags"));const utils_1=(cov_1skb92i4ln().s[8]++,require("../helpers/utils"));let Profile=(/** @class */cov_1skb92i4ln().s[9]++,(()=>{cov_1skb92i4ln().f[0]++;class Profile extends(command_config_1.TBBaseCommand){constructor(){cov_1skb92i4ln().f[1]++;cov_1skb92i4ln().s[10]++;super(...arguments);cov_1skb92i4ln().s[11]++;this.trace=[];}async run(){cov_1skb92i4ln().f[2]++;const{flags,args}=(cov_1skb92i4ln().s[12]++,this.parse(Profile));const{cpuThrottleRate,cookiespath,tbResultsFolder,network,url}=(cov_1skb92i4ln().s[13]++,flags);const{harpath}=(cov_1skb92i4ln().s[14]++,args);const cookies=(cov_1skb92i4ln().s[15]++,[{name:"",value:"",domain:"",path:""}]);const conditions=(cov_1skb92i4ln().s[16]++,{cpu:cpuThrottleRate,network});const tasks=(cov_1skb92i4ln().s[17]++,new listr([{title:"Reading cookies json",task:async ctx=>{cov_1skb92i4ln().f[3]++;cov_1skb92i4ln().s[18]++;// read cookies json file from path and set to context
ctx.cookies=cookiespath.length?(cov_1skb92i4ln().b[0][0]++,await fs_extra_1.readJson(path_1.resolve(cookiespath))):(cov_1skb92i4ln().b[0][1]++,cookies);}},{title:"Preparing results folder",task:()=>{cov_1skb92i4ln().f[4]++;cov_1skb92i4ln().s[19]++;// if the folder for the tracerbench results file
// does not exist then create it
try{cov_1skb92i4ln().s[20]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1skb92i4ln().b[1][0]++;cov_1skb92i4ln().s[21]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1skb92i4ln().b[1][1]++;}}catch(error){cov_1skb92i4ln().s[22]++;this.error(error);}}},{title:"Validating & Cloning HAR file",task:async ctx=>{cov_1skb92i4ln().f[5]++;cov_1skb92i4ln().s[23]++;// validate har and clone it to trace.json which will be mutated
ctx.harJSON=await fs_extra_1.readJson(path_1.resolve(harpath));cov_1skb92i4ln().s[24]++;ctx.traceJSONPath=path_1.join(tbResultsFolder,"trace.json");cov_1skb92i4ln().s[25]++;fs_extra_1.writeFileSync(ctx.traceJSONPath,JSON.stringify(ctx.harJSON,null,2));// if no url get url from har otherwise set with cmd url
cov_1skb92i4ln().s[26]++;ctx.url=url.length?(cov_1skb92i4ln().b[2][0]++,url):(cov_1skb92i4ln().b[2][1]++,getURLFromHAR(ctx));function getURLFromHAR(ctx){cov_1skb92i4ln().f[6]++;cov_1skb92i4ln().s[27]++;try{const url=(cov_1skb92i4ln().s[28]++,ctx.harJSON.log.entries[0].request.url);cov_1skb92i4ln().s[29]++;return url;}catch(error){cov_1skb92i4ln().s[30]++;throw new Error(`${error}. Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}}}},{title:"Recording the live trace",task:async ctx=>{cov_1skb92i4ln().f[7]++;const{cookies,url}=(cov_1skb92i4ln().s[31]++,ctx);cov_1skb92i4ln().s[32]++;try{// run the liveTrace
const{traceEvents}=(cov_1skb92i4ln().s[33]++,await core_1.liveTrace(url,tbResultsFolder,cookies,conditions));cov_1skb92i4ln().s[34]++;ctx.traceEvents=traceEvents;}catch(error){cov_1skb92i4ln().s[35]++;this.error(`${error}`);}}},{title:"Setting trace events",task:async ctx=>{cov_1skb92i4ln().f[8]++;const{traceEvents}=(cov_1skb92i4ln().s[36]++,ctx);// mutates this.trace
cov_1skb92i4ln().s[37]++;try{cov_1skb92i4ln().s[38]++;this.trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1skb92i4ln().s[39]++;this.error(`${error}`);}}}]));cov_1skb92i4ln().s[40]++;await tasks.run().catch(error=>{cov_1skb92i4ln().f[9]++;cov_1skb92i4ln().s[41]++;this.error(`${error}`);}).then(async ctx=>{cov_1skb92i4ln().f[10]++;cov_1skb92i4ln().s[42]++;// log js-eval-time
this.logJSEvalTime();// log css-parse
cov_1skb92i4ln().s[43]++;this.logCSSEvalTime();// log user timings
cov_1skb92i4ln().s[44]++;await this.markerTimings(ctx.traceJSONPath,ctx.url);});}logJSEvalTime(){cov_1skb92i4ln().f[11]++;let totalJSDuration=(cov_1skb92i4ln().s[45]++,0);const jsEvalLogs=(cov_1skb92i4ln().s[46]++,[]);cov_1skb92i4ln().s[47]++;this.trace.filter(event=>{cov_1skb92i4ln().f[12]++;cov_1skb92i4ln().s[48]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1skb92i4ln().f[13]++;cov_1skb92i4ln().s[49]++;return event.args.data.url;}).forEach(event=>{cov_1skb92i4ln().f[14]++;const url=(cov_1skb92i4ln().s[50]++,event.args.data.url);const durationInMs=(cov_1skb92i4ln().s[51]++,event.dur/1000);cov_1skb92i4ln().s[52]++;totalJSDuration+=durationInMs;cov_1skb92i4ln().s[53]++;jsEvalLogs.push({totalDuration:totalJSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[54]++;utils_1.logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);// log js-eval-time
cov_1skb92i4ln().s[55]++;jsEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[15]++;cov_1skb92i4ln().s[56]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[16]++;cov_1skb92i4ln().s[57]++;this.log(utils_1.logBar(log));});}logCSSEvalTime(){cov_1skb92i4ln().f[17]++;let totalCSSDuration=(cov_1skb92i4ln().s[58]++,0);const cssEvalLogs=(cov_1skb92i4ln().s[59]++,[]);cov_1skb92i4ln().s[60]++;this.trace.filter(event=>{cov_1skb92i4ln().f[18]++;cov_1skb92i4ln().s[61]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1skb92i4ln().f[19]++;cov_1skb92i4ln().s[62]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1skb92i4ln().f[20]++;const url=(cov_1skb92i4ln().s[63]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1skb92i4ln().s[64]++,event.dur/1000);cov_1skb92i4ln().s[65]++;totalCSSDuration+=durationInMs;cov_1skb92i4ln().s[66]++;cssEvalLogs.push({totalDuration:totalCSSDuration,duration:durationInMs,title:url});});cov_1skb92i4ln().s[67]++;utils_1.logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);// log css-parse-time
cov_1skb92i4ln().s[68]++;cssEvalLogs.sort((a,b)=>{cov_1skb92i4ln().f[21]++;cov_1skb92i4ln().s[69]++;return a.duration-b.duration;}).forEach(log=>{cov_1skb92i4ln().f[22]++;cov_1skb92i4ln().s[70]++;this.log(utils_1.logBar(log));});}// tracerbench marker-timings cmd moved here
async markerTimings(traceJSONPath,url){cov_1skb92i4ln().f[23]++;let frame;let startTime=(cov_1skb92i4ln().s[71]++,-1);let rawTraceData=(cov_1skb92i4ln().s[72]++,null);let customTrace;const markerLogs=(cov_1skb92i4ln().s[73]++,[]);cov_1skb92i4ln().s[74]++;if(!url){cov_1skb92i4ln().b[3][0]++;cov_1skb92i4ln().s[75]++;this.error(`Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}else{cov_1skb92i4ln().b[3][1]++;}cov_1skb92i4ln().s[76]++;try{cov_1skb92i4ln().s[77]++;rawTraceData=await fs_extra_1.readJson(path_1.resolve(traceJSONPath));}catch(e){cov_1skb92i4ln().s[78]++;this.error(e);}cov_1skb92i4ln().s[79]++;try{cov_1skb92i4ln().s[80]++;customTrace=utils_1.setTraceEvents(rawTraceData);}catch(e){cov_1skb92i4ln().s[81]++;this.error(e);}cov_1skb92i4ln().s[82]++;if(url.startsWith("http")){cov_1skb92i4ln().b[4][0]++;cov_1skb92i4ln().s[83]++;frame=utils_1.findFrame(customTrace,url);}else{cov_1skb92i4ln().b[4][1]++;cov_1skb92i4ln().s[84]++;frame=url;}cov_1skb92i4ln().s[85]++;if(!frame){cov_1skb92i4ln().b[5][0]++;cov_1skb92i4ln().s[86]++;this.error(`Could not extract frame from trace. Explicitly opt-out of usertimings via "--usertimings" boolean flag and rerun.`);}else{cov_1skb92i4ln().b[5][1]++;}cov_1skb92i4ln().s[87]++;customTrace.filter(event=>{cov_1skb92i4ln().f[24]++;cov_1skb92i4ln().s[88]++;return(cov_1skb92i4ln().b[6][0]++,utils_1.isMark(event))||(cov_1skb92i4ln().b[6][1]++,utils_1.isCommitLoad(event));}).sort(utils_1.byTime).forEach(event=>{cov_1skb92i4ln().f[25]++;cov_1skb92i4ln().s[89]++;if(utils_1.isFrameNavigationStart(frame,event,url)){cov_1skb92i4ln().b[7][0]++;cov_1skb92i4ln().s[90]++;startTime=event.ts;cov_1skb92i4ln().s[91]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[7][1]++;cov_1skb92i4ln().s[92]++;if((cov_1skb92i4ln().b[9][0]++,utils_1.isFrameMark(frame,event))&&(cov_1skb92i4ln().b[9][1]++,event.name!=="navigationStart")){cov_1skb92i4ln().b[8][0]++;cov_1skb92i4ln().s[93]++;if(startTime===-1){cov_1skb92i4ln().b[10][0]++;cov_1skb92i4ln().s[94]++;return;}else{cov_1skb92i4ln().b[10][1]++;}cov_1skb92i4ln().s[95]++;markerLogs.push(this.buildMarkerLogs(event,startTime));}else{cov_1skb92i4ln().b[8][1]++;}}});cov_1skb92i4ln().s[96]++;this.logMarkerTimings(markerLogs);}buildMarkerLogs(event,startTime){cov_1skb92i4ln().f[26]++;cov_1skb92i4ln().s[97]++;return{name:event.name,sentanceCaseName:utils_1.convertToSentCase(event.name),duration:utils_1.formatToDuration(event.ts,startTime),startTime,bar:""};}logMarkerTimings(markerLogs){cov_1skb92i4ln().f[27]++;const totalDuration=(cov_1skb92i4ln().s[98]++,markerLogs[markerLogs.length-1].duration);cov_1skb92i4ln().s[99]++;utils_1.logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);cov_1skb92i4ln().s[100]++;markerLogs.forEach(log=>{cov_1skb92i4ln().f[28]++;cov_1skb92i4ln().s[101]++;this.log(utils_1.logBar({totalDuration,duration:log.duration,title:log.sentanceCaseName}));});}}// include backwards compat to trace cmd
cov_1skb92i4ln().s[102]++;Profile.aliases=["trace"];cov_1skb92i4ln().s[103]++;Profile.description=`Parses a CPU profile with asset and marker timings.`;cov_1skb92i4ln().s[104]++;Profile.args=[args_1.harpath];cov_1skb92i4ln().s[105]++;Profile.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true})};cov_1skb92i4ln().s[106]++;return Profile;})());cov_1skb92i4ln().s[107]++;exports.default=Profile;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,