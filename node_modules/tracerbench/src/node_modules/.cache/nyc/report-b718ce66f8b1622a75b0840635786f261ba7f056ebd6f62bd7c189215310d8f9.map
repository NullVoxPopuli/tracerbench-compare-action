{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/report.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/interface-name-prefix */\n/* eslint-disable filenames/match-exported */\n\nimport { IConfig } from \"@oclif/config\";\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs-extra\";\nimport { join, resolve } from \"path\";\n\nimport { getConfig, TBBaseCommand } from \"../../command-config\";\nimport createConsumableHTML, {\n  ITracerBenchTraceResult,\n} from \"../../helpers/create-consumable-html\";\nimport { config, tbResultsFolder } from \"../../helpers/flags\";\nimport printToPDF from \"../../helpers/print-to-pdf\";\nimport { chalkScheme } from \"../../helpers/utils\";\n\nconst ARTIFACT_FILE_NAME = \"artifact\";\n\nexport interface IReportFlags {\n  tbResultsFolder: string;\n  config?: string;\n}\n\nexport default class CompareReport extends TBBaseCommand {\n  // alias for API backwards compat\n  static aliases = [\"report\"];\n  public static description = `Generates report files (PDF/HTML) from the \"tracerbench compare\" command output`;\n  public static flags = {\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    config: config(),\n  };\n  public reportFlags: IReportFlags;\n\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    const { flags } = this.parse(CompareReport);\n\n    this.reportFlags = flags;\n  }\n  // instantiated before this.run()\n  public async init() {\n    const { flags } = this.parse(CompareReport);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n\n    this.reportFlags = flags;\n    await this.parseFlags();\n  }\n  /**\n   * Ensure the input file is valid and call the helper function \"createConsumableHTML\"\n   * to generate the HTML string for the output file.\n   */\n  public async run() {\n    const tbResultsFolder = this.reportFlags.tbResultsFolder;\n    const inputFilePath = join(tbResultsFolder, \"compare.json\");\n    let inputData: ITracerBenchTraceResult[] = [];\n    // If the input file cannot be found, exit with an error\n    if (!existsSync(inputFilePath)) {\n      this.error(\n        `Input json file does not exist. Please make sure ${inputFilePath} exists`,\n        { exit: 1 }\n      );\n    }\n\n    try {\n      inputData = JSON.parse(readFileSync(inputFilePath, \"utf8\"));\n    } catch (error) {\n      this.error(\n        `Had issues parsing the input JSON file. Please make sure ${inputFilePath} is a valid JSON`,\n        { exit: 1 }\n      );\n    }\n\n    const controlData = inputData.find((element) => {\n      return element.set === \"control\";\n    }) as ITracerBenchTraceResult;\n\n    const experimentData = inputData.find((element) => {\n      return element.set === \"experiment\";\n    }) as ITracerBenchTraceResult;\n\n    if (!controlData || !experimentData) {\n      this.error(`Missing control or experiment set in JSON`, { exit: 1 });\n    }\n\n    const outputFileName = this.determineOutputFileName(tbResultsFolder);\n    const renderedHTML = createConsumableHTML(\n      controlData,\n      experimentData,\n      this.parsedConfig\n    );\n    if (!existsSync(tbResultsFolder)) {\n      mkdirSync(tbResultsFolder, { recursive: true });\n    }\n\n    const htmlOutputPath = join(tbResultsFolder, `/${outputFileName}.html`);\n    const absPathToHTML = resolve(htmlOutputPath);\n\n    writeFileSync(absPathToHTML, renderedHTML);\n\n    const absOutputPath = resolve(\n      join(tbResultsFolder + `/${outputFileName}.pdf`)\n    );\n\n    await printToPDF(`file://${absPathToHTML}`, absOutputPath);\n    this.log(\n      `\\n${chalkScheme.blackBgBlue(\n        `    ${chalkScheme.white(\"Benchmark Reports\")}    `\n      )}`\n    );\n    this.log(\n      `\\nJSON: ${chalkScheme.tbBranding.blue.underline.bold(\n        `${this.parsedConfig.tbResultsFolder}/compare.json`\n      )}`\n    );\n    this.log(\n      `\\nPDF: ${chalkScheme.tbBranding.blue.underline.bold(absOutputPath)}`\n    );\n    this.log(\n      `\\nHTML: ${chalkScheme.tbBranding.blue.underline.bold(absPathToHTML)}\\n`\n    );\n  }\n  private async parseFlags() {\n    const { tbResultsFolder } = (this.parsedConfig as unknown) as IReportFlags;\n\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    if (!existsSync(tbResultsFolder)) {\n      mkdirSync(tbResultsFolder);\n    }\n  }\n  private determineOutputFileName(outputFolder: string): string {\n    let count = 1;\n    const running = true;\n    while (running) {\n      const candidateHTML = join(\n        outputFolder,\n        `${ARTIFACT_FILE_NAME}-${count}.html`\n      );\n      const candidatePDF = join(\n        outputFolder,\n        `${ARTIFACT_FILE_NAME}-${count}.pdf`\n      );\n      if (!existsSync(candidateHTML) && !existsSync(candidatePDF)) {\n        break;\n      }\n      count += 1;\n    }\n    return `artifact-${count}`;\n  }\n}\n"]}