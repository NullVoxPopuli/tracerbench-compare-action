{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/record-har.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/record-har.ts"],"names":[],"mappings":";;AAAA,qEAAqE;AACrE,4CAAiE;AACjE,uCAAmD;AACnD,+BAAqC;AAErC,sDAA6D;AAC7D,2EAAoE;AACpE,4CAQ0B;AAE1B,MAAqB,SAAU,SAAQ,8BAAa;IAW3C,KAAK,CAAC,IAAI;QACf,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,0BAAS,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;QAC3D,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;QACjE,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;QACxC,MAAM,UAAU,GAAgB;YAC9B,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;YACnC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAyB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE,CAAC;QACF,IAAI,OAAO,GAAG;YACZ;gBACE,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,EAAE;gBACV,IAAI,EAAE,EAAE;aACT;SACF,CAAC;QACF,IAAI,WAAW,CAAC,MAAM,EAAE;YACtB,wBAAwB;YACxB,OAAO,GAAG,MAAM,mBAAQ,CAAC,cAAO,CAAC,WAAW,CAAC,CAAC,CAAC;SAChD;QAED,sDAAsD;QACtD,IAAI,QAAQ,EAAE;YACZ,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;gBACtC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,iCAAa,CAAC;gBACnC,CAAC,CAAC,iCAAa,CAAC;SACnB;QAED,oDAAoD;QACpD,MAAM,UAAU,GAAG,MAAM,sBAAe,CACtC,GAAG,EACH,OAAO,EACP,MAAM,EACN,UAAU,EACV,WAAW,CACZ,CAAC;QAEF,MAAM,OAAO,GAAG,WAAI,CAAC,IAAI,EAAE,GAAG,QAAQ,MAAM,CAAC,CAAC;QAE9C,wBAAa,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,GAAG,CAAC,oCAAoC,OAAO,EAAE,CAAC,CAAC;IAC1D,CAAC;;AA3DH,4BA4DC;AA3De,qBAAW,GAAG,kCAAkC,CAAC;AACjD,eAAK,GAAG;IACpB,GAAG,EAAE,WAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChD,IAAI,EAAE,YAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC9B,WAAW,EAAE,mBAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5C,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;IAC9D,MAAM,EAAE,cAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAClC,MAAM,EAAE,cAAM,EAAE;IAChB,QAAQ,EAAR,gBAAQ;CACT,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport { IConditions, recordHARClient } from \"@tracerbench/core\";\nimport { readJson, writeFileSync } from \"fs-extra\";\nimport { join, resolve } from \"path\";\n\nimport { getConfig, TBBaseCommand } from \"../command-config\";\nimport { headlessFlags } from \"../command-config/default-flag-args\";\nimport {\n  config,\n  cookiespath,\n  dest,\n  filename,\n  headless,\n  marker,\n  url,\n} from \"../helpers/flags\";\n\nexport default class RecordHAR extends TBBaseCommand {\n  public static description = \"Generates a HAR file from a URL.\";\n  public static flags = {\n    url: url({ required: true, default: undefined }),\n    dest: dest({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    filename: filename({ required: true, default: \"tracerbench\" }),\n    marker: marker({ required: true }),\n    config: config(),\n    headless,\n  };\n  public async init() {\n    const { flags } = this.parse(RecordHAR);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n  }\n\n  public async run() {\n    const { flags } = this.parse(RecordHAR);\n    const { url, dest, cookiespath, filename, marker } = flags;\n    const { network, cpuThrottleRate, headless } = this.parsedConfig;\n    let { browserArgs } = this.parsedConfig;\n    const conditions: IConditions = {\n      network: network ? network : \"none\",\n      cpu: cpuThrottleRate ? parseInt(cpuThrottleRate as string, 10) : 1,\n    };\n    let cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    if (cookiespath.length) {\n      // grab the auth cookies\n      cookies = await readJson(resolve(cookiespath));\n    }\n\n    // if headless flag is true include the headless flags\n    if (headless) {\n      browserArgs = Array.isArray(browserArgs)\n        ? browserArgs.concat(headlessFlags)\n        : headlessFlags;\n    }\n\n    // record the actual HAR and return the archive file\n    const harArchive = await recordHARClient(\n      url,\n      cookies,\n      marker,\n      conditions,\n      browserArgs\n    );\n\n    const harPath = join(dest, `${filename}.har`);\n\n    writeFileSync(harPath, JSON.stringify(harArchive));\n\n    this.log(`HAR recorded and available here: ${harPath}`);\n  }\n}\n"]}