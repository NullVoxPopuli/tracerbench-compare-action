"use strict";function cov_1csyqvtbq(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts";var hash="f5c379e45a4705e46daca949cccddf4d41417e8d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:25},end:{line:4,column:56}},"3":{start:{line:5,column:15},end:{line:5,column:44}},"4":{start:{line:6,column:16},end:{line:6,column:46}},"5":{start:{line:7,column:30},end:{line:7,column:74}},"6":{start:{line:10,column:8},end:{line:10,column:28}},"7":{start:{line:11,column:8},end:{line:11,column:58}},"8":{start:{line:14,column:25},end:{line:14,column:51}},"9":{start:{line:15,column:24},end:{line:15,column:65}},"10":{start:{line:16,column:8},end:{line:16,column:93}},"11":{start:{line:19,column:26},end:{line:19,column:52}},"12":{start:{line:20,column:59},end:{line:20,column:64}},"13":{start:{line:21,column:8},end:{line:25,column:10}},"14":{start:{line:28,column:0},end:{line:28,column:33}},"15":{start:{line:29,column:0},end:{line:29,column:101}},"16":{start:{line:30,column:0},end:{line:30,column:43}},"17":{start:{line:31,column:0},end:{line:35,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:30},end:{line:12,column:5}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:16},end:{line:17,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:31},end:{line:26,column:5}},line:18}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts"],names:[],mappings:";;AAIA,uCAAwC;AAExC,yDAAqD;AACrD,6CAAiD;AACjD,+CAA6E;AAC7E,2EAAsE;AAQtE,MAAqB,cAAe,SAAQ,8BAAa;IAUvD,YAAY,IAAc,EAAE,MAAe;QACzC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,uBAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,OAAO,MAAM,uCAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAEO,UAAU,CAAC,cAAiC;QAClD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAEzD,OAAO;YACL,QAAQ;YACR,mBAAmB;YACnB,OAAO;SACR,CAAC;IACJ,CAAC;;AA9BH,iCA+BC;AA9Be,0BAAW,GAAG,uEAAuE,CAAC;AAEtF,mBAAI,GAAG,CAAC,kBAAW,CAAC,CAAC;AACrB,oBAAK,GAAG;IACpB,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,mBAAmB,EAAE,2BAAmB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC5D,OAAO,EAAE,eAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;CACrC,CAAC",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable filenames/match-exported */\nimport { IConfig } from \"@oclif/config\";\nimport * as Parser from \"@oclif/parser\";\nimport { readJsonSync } from \"fs-extra\";\n\nimport { TBBaseCommand } from \"../../command-config\";\nimport { resultsFile } from \"../../helpers/args\";\nimport { fidelity, isCIEnv, regressionThreshold } from \"../../helpers/flags\";\nimport { logCompareResults } from \"../../helpers/log-compare-results\";\n\nexport interface CompareAnalyzeFlags {\n  fidelity: number;\n  regressionThreshold: number;\n  isCIEnv: boolean;\n}\n\nexport default class CompareAnalyze extends TBBaseCommand {\n  public static description = `Generates stdout report from the \"tracerbench compare\" command output`;\n\n  public static args = [resultsFile];\n  public static flags = {\n    fidelity: fidelity({ required: true }),\n    regressionThreshold: regressionThreshold({ required: true }),\n    isCIEnv: isCIEnv({ required: true }),\n  };\n  public typedFlags: CompareAnalyzeFlags;\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    this.typedFlags = this.parseFlags(CompareAnalyze);\n  }\n\n  public async run(): Promise<string> {\n    const { args } = this.parse(CompareAnalyze);\n    const results = readJsonSync(args.resultsFile);\n    return await logCompareResults(results, this.typedFlags, this);\n  }\n\n  private parseFlags(CompareAnalyze: Parser.Input<any>): CompareAnalyzeFlags {\n    const { flags } = this.parse(CompareAnalyze);\n    const { fidelity, regressionThreshold, isCIEnv } = flags;\n\n    return {\n      fidelity,\n      regressionThreshold,\n      isCIEnv,\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f5c379e45a4705e46daca949cccddf4d41417e8d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1csyqvtbq=function(){return actualCoverage;};}return actualCoverage;}cov_1csyqvtbq();cov_1csyqvtbq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fs_extra_1=(cov_1csyqvtbq().s[1]++,require("fs-extra"));const command_config_1=(cov_1csyqvtbq().s[2]++,require("../../command-config"));const args_1=(cov_1csyqvtbq().s[3]++,require("../../helpers/args"));const flags_1=(cov_1csyqvtbq().s[4]++,require("../../helpers/flags"));const log_compare_results_1=(cov_1csyqvtbq().s[5]++,require("../../helpers/log-compare-results"));class CompareAnalyze extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_1csyqvtbq().f[0]++;cov_1csyqvtbq().s[6]++;super(argv,config);cov_1csyqvtbq().s[7]++;this.typedFlags=this.parseFlags(CompareAnalyze);}async run(){cov_1csyqvtbq().f[1]++;const{args}=(cov_1csyqvtbq().s[8]++,this.parse(CompareAnalyze));const results=(cov_1csyqvtbq().s[9]++,fs_extra_1.readJsonSync(args.resultsFile));cov_1csyqvtbq().s[10]++;return await log_compare_results_1.logCompareResults(results,this.typedFlags,this);}parseFlags(CompareAnalyze){cov_1csyqvtbq().f[2]++;const{flags}=(cov_1csyqvtbq().s[11]++,this.parse(CompareAnalyze));const{fidelity,regressionThreshold,isCIEnv}=(cov_1csyqvtbq().s[12]++,flags);cov_1csyqvtbq().s[13]++;return{fidelity,regressionThreshold,isCIEnv};}}cov_1csyqvtbq().s[14]++;exports.default=CompareAnalyze;cov_1csyqvtbq().s[15]++;CompareAnalyze.description=`Generates stdout report from the "tracerbench compare" command output`;cov_1csyqvtbq().s[16]++;CompareAnalyze.args=[args_1.resultsFile];cov_1csyqvtbq().s[17]++;CompareAnalyze.flags={fidelity:flags_1.fidelity({required:true}),regressionThreshold:flags_1.regressionThreshold({required:true}),isCIEnv:flags_1.isCIEnv({required:true})};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLHVDQUF3QztBQUV4Qyx5REFBcUQ7QUFDckQsNkNBQWlEO0FBQ2pELCtDQUE2RTtBQUM3RSwyRUFBc0U7QUFRdEUsTUFBcUIsY0FBZSxTQUFRLDhCQUFhO0lBVXZELFlBQVksSUFBYyxFQUFFLE1BQWU7UUFDekMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHO1FBQ2QsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUMsTUFBTSxPQUFPLEdBQUcsdUJBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsT0FBTyxNQUFNLHVDQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTyxVQUFVLENBQUMsY0FBaUM7UUFDbEQsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFFekQsT0FBTztZQUNMLFFBQVE7WUFDUixtQkFBbUI7WUFDbkIsT0FBTztTQUNSLENBQUM7SUFDSixDQUFDOztBQTlCSCxpQ0ErQkM7QUE5QmUsMEJBQVcsR0FBRyx1RUFBdUUsQ0FBQztBQUV0RixtQkFBSSxHQUFHLENBQUMsa0JBQVcsQ0FBQyxDQUFDO0FBQ3JCLG9CQUFLLEdBQUc7SUFDcEIsUUFBUSxFQUFFLGdCQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDdEMsbUJBQW1CLEVBQUUsMkJBQW1CLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDNUQsT0FBTyxFQUFFLGVBQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUNyQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgZmlsZW5hbWVzL21hdGNoLWV4cG9ydGVkICovXG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSBcIkBvY2xpZi9jb25maWdcIjtcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tIFwiQG9jbGlmL3BhcnNlclwiO1xuaW1wb3J0IHsgcmVhZEpzb25TeW5jIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5cbmltcG9ydCB7IFRCQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vY29tbWFuZC1jb25maWdcIjtcbmltcG9ydCB7IHJlc3VsdHNGaWxlIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvYXJnc1wiO1xuaW1wb3J0IHsgZmlkZWxpdHksIGlzQ0lFbnYsIHJlZ3Jlc3Npb25UaHJlc2hvbGQgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9mbGFnc1wiO1xuaW1wb3J0IHsgbG9nQ29tcGFyZVJlc3VsdHMgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9sb2ctY29tcGFyZS1yZXN1bHRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gIGZpZGVsaXR5OiBudW1iZXI7XG4gIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IG51bWJlcjtcbiAgaXNDSUVudjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyZUFuYWx5emUgZXh0ZW5kcyBUQkJhc2VDb21tYW5kIHtcbiAgcHVibGljIHN0YXRpYyBkZXNjcmlwdGlvbiA9IGBHZW5lcmF0ZXMgc3Rkb3V0IHJlcG9ydCBmcm9tIHRoZSBcInRyYWNlcmJlbmNoIGNvbXBhcmVcIiBjb21tYW5kIG91dHB1dGA7XG5cbiAgcHVibGljIHN0YXRpYyBhcmdzID0gW3Jlc3VsdHNGaWxlXTtcbiAgcHVibGljIHN0YXRpYyBmbGFncyA9IHtcbiAgICBmaWRlbGl0eTogZmlkZWxpdHkoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICByZWdyZXNzaW9uVGhyZXNob2xkOiByZWdyZXNzaW9uVGhyZXNob2xkKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgaXNDSUVudjogaXNDSUVudih7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICB9O1xuICBwdWJsaWMgdHlwZWRGbGFnczogQ29tcGFyZUFuYWx5emVGbGFncztcbiAgY29uc3RydWN0b3IoYXJndjogc3RyaW5nW10sIGNvbmZpZzogSUNvbmZpZykge1xuICAgIHN1cGVyKGFyZ3YsIGNvbmZpZyk7XG4gICAgdGhpcy50eXBlZEZsYWdzID0gdGhpcy5wYXJzZUZsYWdzKENvbXBhcmVBbmFseXplKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBydW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB7IGFyZ3MgfSA9IHRoaXMucGFyc2UoQ29tcGFyZUFuYWx5emUpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSByZWFkSnNvblN5bmMoYXJncy5yZXN1bHRzRmlsZSk7XG4gICAgcmV0dXJuIGF3YWl0IGxvZ0NvbXBhcmVSZXN1bHRzKHJlc3VsdHMsIHRoaXMudHlwZWRGbGFncywgdGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlRmxhZ3MoQ29tcGFyZUFuYWx5emU6IFBhcnNlci5JbnB1dDxhbnk+KTogQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gICAgY29uc3QgeyBmbGFncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlQW5hbHl6ZSk7XG4gICAgY29uc3QgeyBmaWRlbGl0eSwgcmVncmVzc2lvblRocmVzaG9sZCwgaXNDSUVudiB9ID0gZmxhZ3M7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlkZWxpdHksXG4gICAgICByZWdyZXNzaW9uVGhyZXNob2xkLFxuICAgICAgaXNDSUVudixcbiAgICB9O1xuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9jb21tYW5kcy9jb21wYXJlL2FuYWx5emUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Im8vSkFtQ0k7eUtBL0JKLEtBQUEsQ0FBQSxVQUFBLHlCQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxDQUVBLEtBQUEsQ0FBQSxnQkFBQSx5QkFBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLE1BQUEseUJBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxPQUFBLHlCQUFBLE9BQUEsQ0FBQSxxQkFBQSxDQUFBLENBQUEsQ0FDQSxLQUFBLENBQUEscUJBQUEseUJBQUEsT0FBQSxDQUFBLG1DQUFBLENBQUEsQ0FBQSxDQVFBLEtBQXFCLENBQUEsY0FBckIsU0FBNEMsZ0JBQUEsQ0FBQSxhQUE1QyxDQUF5RCxDQVV2RCxXQUFBLENBQVksSUFBWixDQUE0QixNQUE1QixDQUEyQywrQ0FDekMsTUFBTSxJQUFOLENBQVksTUFBWixFQUR5Qyx1QkFFekMsS0FBSyxVQUFMLENBQWtCLEtBQUssVUFBTCxDQUFnQixjQUFoQixDQUFsQixDQUNELENBRU0sS0FBTSxDQUFBLEdBQU4sRUFBUyx3QkFDZCxLQUFNLENBQUUsSUFBRiwwQkFBVyxLQUFLLEtBQUwsQ0FBVyxjQUFYLENBQVgsQ0FBTixDQUNBLEtBQU0sQ0FBQSxPQUFPLHlCQUFHLFVBQUEsQ0FBQSxZQUFBLENBQWEsSUFBSSxDQUFDLFdBQWxCLENBQUgsQ0FBYixDQUZjLHdCQUdkLE1BQU8sTUFBTSxDQUFBLHFCQUFBLENBQUEsaUJBQUEsQ0FBa0IsT0FBbEIsQ0FBMkIsS0FBSyxVQUFoQyxDQUE0QyxJQUE1QyxDQUFiLENBQ0QsQ0FFTyxVQUFVLENBQUMsY0FBRCxDQUFrQyx3QkFDbEQsS0FBTSxDQUFFLEtBQUYsMkJBQVksS0FBSyxLQUFMLENBQVcsY0FBWCxDQUFaLENBQU4sQ0FDQSxLQUFNLENBQUUsUUFBRixDQUFZLG1CQUFaLENBQWlDLE9BQWpDLDJCQUE2QyxLQUE3QyxDQUFOLENBRmtELHdCQUlsRCxNQUFPLENBQ0wsUUFESyxDQUVMLG1CQUZLLENBR0wsT0FISyxDQUFQLENBS0QsQ0E5QnNELEMsd0JBQXpELE9BQUEsQ0FBQSxPQUFBLENBQUEsY0FBQSxDLHdCQUNnQixjQUFBLENBQUEsV0FBQSxDQUFjLHVFQUFkLEMsd0JBRUEsY0FBQSxDQUFBLElBQUEsQ0FBTyxDQUFDLE1BQUEsQ0FBQSxXQUFELENBQVAsQyx3QkFDQSxjQUFBLENBQUEsS0FBQSxDQUFRLENBQ3BCLFFBQVEsQ0FBRSxPQUFBLENBQUEsUUFBQSxDQUFTLENBQUUsUUFBUSxDQUFFLElBQVosQ0FBVCxDQURVLENBRXBCLG1CQUFtQixDQUFFLE9BQUEsQ0FBQSxtQkFBQSxDQUFvQixDQUFFLFFBQVEsQ0FBRSxJQUFaLENBQXBCLENBRkQsQ0FHcEIsT0FBTyxDQUFFLE9BQUEsQ0FBQSxPQUFBLENBQVEsQ0FBRSxRQUFRLENBQUUsSUFBWixDQUFSLENBSFcsQ0FBUixDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgZmlsZW5hbWVzL21hdGNoLWV4cG9ydGVkICovXG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSBcIkBvY2xpZi9jb25maWdcIjtcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tIFwiQG9jbGlmL3BhcnNlclwiO1xuaW1wb3J0IHsgcmVhZEpzb25TeW5jIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5cbmltcG9ydCB7IFRCQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vY29tbWFuZC1jb25maWdcIjtcbmltcG9ydCB7IHJlc3VsdHNGaWxlIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvYXJnc1wiO1xuaW1wb3J0IHsgZmlkZWxpdHksIGlzQ0lFbnYsIHJlZ3Jlc3Npb25UaHJlc2hvbGQgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9mbGFnc1wiO1xuaW1wb3J0IHsgbG9nQ29tcGFyZVJlc3VsdHMgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9sb2ctY29tcGFyZS1yZXN1bHRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gIGZpZGVsaXR5OiBudW1iZXI7XG4gIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IG51bWJlcjtcbiAgaXNDSUVudjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyZUFuYWx5emUgZXh0ZW5kcyBUQkJhc2VDb21tYW5kIHtcbiAgcHVibGljIHN0YXRpYyBkZXNjcmlwdGlvbiA9IGBHZW5lcmF0ZXMgc3Rkb3V0IHJlcG9ydCBmcm9tIHRoZSBcInRyYWNlcmJlbmNoIGNvbXBhcmVcIiBjb21tYW5kIG91dHB1dGA7XG5cbiAgcHVibGljIHN0YXRpYyBhcmdzID0gW3Jlc3VsdHNGaWxlXTtcbiAgcHVibGljIHN0YXRpYyBmbGFncyA9IHtcbiAgICBmaWRlbGl0eTogZmlkZWxpdHkoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICByZWdyZXNzaW9uVGhyZXNob2xkOiByZWdyZXNzaW9uVGhyZXNob2xkKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgaXNDSUVudjogaXNDSUVudih7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICB9O1xuICBwdWJsaWMgdHlwZWRGbGFnczogQ29tcGFyZUFuYWx5emVGbGFncztcbiAgY29uc3RydWN0b3IoYXJndjogc3RyaW5nW10sIGNvbmZpZzogSUNvbmZpZykge1xuICAgIHN1cGVyKGFyZ3YsIGNvbmZpZyk7XG4gICAgdGhpcy50eXBlZEZsYWdzID0gdGhpcy5wYXJzZUZsYWdzKENvbXBhcmVBbmFseXplKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBydW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB7IGFyZ3MgfSA9IHRoaXMucGFyc2UoQ29tcGFyZUFuYWx5emUpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSByZWFkSnNvblN5bmMoYXJncy5yZXN1bHRzRmlsZSk7XG4gICAgcmV0dXJuIGF3YWl0IGxvZ0NvbXBhcmVSZXN1bHRzKHJlc3VsdHMsIHRoaXMudHlwZWRGbGFncywgdGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlRmxhZ3MoQ29tcGFyZUFuYWx5emU6IFBhcnNlci5JbnB1dDxhbnk+KTogQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gICAgY29uc3QgeyBmbGFncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlQW5hbHl6ZSk7XG4gICAgY29uc3QgeyBmaWRlbGl0eSwgcmVncmVzc2lvblRocmVzaG9sZCwgaXNDSUVudiB9ID0gZmxhZ3M7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlkZWxpdHksXG4gICAgICByZWdyZXNzaW9uVGhyZXNob2xkLFxuICAgICAgaXNDSUVudixcbiAgICB9O1xuICB9XG59XG4iXX0=