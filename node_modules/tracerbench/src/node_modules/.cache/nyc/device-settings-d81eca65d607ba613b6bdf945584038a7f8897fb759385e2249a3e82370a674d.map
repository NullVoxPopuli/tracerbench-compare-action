{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/helpers/device-settings.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/helpers/device-settings.ts"],"names":[],"mappings":";;;AAAA,0CAAyC;AAGzC,mDAA8D;AAC9D,mCAA2C;AAgC3C,MAAM,cAAc,GAAoC,4BAAY,CAAC,GAAG,CACtE,CAAC,IAAmB,EAAE,EAAE;IACtB,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;QAC3B,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC;QAChE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACvD,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QACpC,QAAQ,EAAE,wBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC7C,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;KACxB,CAAC;AACJ,CAAC,CACF,CAAC;AAEF;;;;;;GAMG;AACH,SAAgB,2CAA2C,CACzD,GAAW,EACX,WAAW,GAAG,UAAU;IAExB,IAAI,aAAa,CAAC;IAElB,KAAK,aAAa,IAAI,cAAc,EAAE;QACpC,IAAI,GAAG,KAAK,aAAa,CAAC,QAAQ,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBACvC,MAAM,IAAI,iBAAQ,CAChB,GAAG,WAAW,oBAAoB,GAAG,iBAAiB,CACvD,CAAC;aACH;YACD,OAAO;gBACL,qBAAqB,EAAE;oBACrB,KAAK,EAAE,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,KAAK;oBAC/C,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM;oBACjD,iBAAiB,EAAE,aAAa,CAAC,iBAAiB;oBAClD,MAAM,EAAE,aAAa,CAAC,MAAM;iBAC7B;gBACD,iBAAiB,EAAE;oBACjB,SAAS,EAAE,aAAa,CAAC,SAAS;iBACnC;gBACD,QAAQ,EAAE,aAAa,CAAC,QAAQ;aACjC,CAAC;SACH;KACF;IAED,MAAM,IAAI,iBAAQ,CAAC,kDAAkD,GAAG,EAAE,CAAC,CAAC;AAC9E,CAAC;AA7BD,kGA6BC;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import { CLIError } from \"@oclif/errors\";\nimport Protocol from \"devtools-protocol\";\n\nimport { deviceLookup, IDeviceLookup } from \"./device-lookup\";\nimport { convertToTypable } from \"./utils\";\n\ninterface ScreenDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface Screens {\n  horizontal: ScreenDimensions;\n  vertical?: ScreenDimensions;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport interface EmulateDeviceSettingBase {\n  userAgent: string;\n  deviceScaleFactor: number;\n  mobile: boolean;\n  typeable: string;\n}\n\nexport interface EmulateDeviceSetting {\n  deviceMetricsOverride: Protocol.Emulation.SetDeviceMetricsOverrideRequest;\n  userAgentOverride: Protocol.Emulation.SetUserAgentOverrideRequest;\n  typeable: string;\n}\n\nexport interface EmulateDeviceSettingCliOption\n  extends EmulateDeviceSettingBase {\n  screens: Screens;\n}\n\nconst deviceSettings: EmulateDeviceSettingCliOption[] = deviceLookup.map(\n  (item: IDeviceLookup) => {\n    return {\n      screens: item.device.screen,\n      deviceScaleFactor: item.device.screen[\"device-pixel-ratio\"] || 0,\n      mobile: item.device.capabilities.indexOf(\"mobile\") > -1,\n      userAgent: item.device[\"user-agent\"],\n      typeable: convertToTypable(item.device.title),\n      name: item.device.title,\n    };\n  }\n);\n\n/**\n * Iterate over deviceSettings until a match is found in the option's typable field. Extract the contents into EmulateDeviceSetting\n * formatted object\n *\n * @param key - One of typeable strings such as iphone-x\n * @param orientation - Either \"vertical\" or \"horizontal\"\n */\nexport function getEmulateDeviceSettingForKeyAndOrientation(\n  key: string,\n  orientation = \"vertical\"\n): EmulateDeviceSetting {\n  let deviceSetting;\n\n  for (deviceSetting of deviceSettings) {\n    if (key === deviceSetting.typeable) {\n      if (!deviceSetting.screens[orientation]) {\n        throw new CLIError(\n          `${orientation} orientation for ${key} does not exist`\n        );\n      }\n      return {\n        deviceMetricsOverride: {\n          width: deviceSetting.screens[orientation].width,\n          height: deviceSetting.screens[orientation].height,\n          deviceScaleFactor: deviceSetting.deviceScaleFactor,\n          mobile: deviceSetting.mobile,\n        },\n        userAgentOverride: {\n          userAgent: deviceSetting.userAgent,\n        },\n        typeable: deviceSetting.typeable,\n      };\n    }\n  }\n\n  throw new CLIError(`Device emulation settings not found for device ${key}`);\n}\n\nexport default deviceSettings;\n"]}