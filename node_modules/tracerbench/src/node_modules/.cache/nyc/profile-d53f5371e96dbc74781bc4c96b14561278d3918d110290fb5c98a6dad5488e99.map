{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IConditions,\n  ITraceEvent,\n  ITraceEventFrame,\n  liveTrace,\n} from \"@tracerbench/core\";\nimport { Archive } from \"@tracerbench/har\";\nimport Protocol from \"devtools-protocol\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  network,\n  tbResultsFolder,\n  url,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  convertToSentCase,\n  findFrame,\n  formatToDuration,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  logBar,\n  logBarOptions,\n  logHeading,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\ninterface ProfileContext {\n  cookies: Protocol.Network.CookieParam[];\n  harJSON: Archive;\n  traceJSONPath: string;\n  traceEvents: ITraceEventFrame[];\n  url: string;\n}\n\ntype markerLogMeta = {\n  name: string;\n  sentanceCaseName: string;\n  duration: number;\n  startTime: number;\n  bar: string;\n};\n\nexport default class Profile extends TBBaseCommand {\n  // include backwards compat to trace cmd\n  static aliases = [\"trace\"];\n  public trace: ITraceEventFrame[] = [];\n  public static description = `Parses a CPU profile with asset and marker timings.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n  };\n\n  public async run(): Promise<void> {\n    const { flags, args } = this.parse(Profile);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      url,\n    } = flags;\n    const { harpath } = args;\n    const cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n\n    const tasks = new listr([\n      {\n        title: \"Reading cookies json\",\n        task: async (ctx: ProfileContext) => {\n          // read cookies json file from path and set to context\n          ctx.cookies = cookiespath.length\n            ? await readJson(resolve(cookiespath))\n            : cookies;\n        },\n      },\n      {\n        title: \"Preparing results folder\",\n        task: () => {\n          // if the folder for the tracerbench results file\n          // does not exist then create it\n          try {\n            if (!existsSync(tbResultsFolder)) {\n              mkdirSync(tbResultsFolder);\n            }\n          } catch (error) {\n            this.error(error);\n          }\n        },\n      },\n      {\n        title: \"Validating & Cloning HAR file\",\n        task: async (ctx: ProfileContext) => {\n          // validate har and clone it to trace.json which will be mutated\n          ctx.harJSON = await readJson(resolve(harpath));\n          ctx.traceJSONPath = join(tbResultsFolder, \"trace.json\");\n          writeFileSync(\n            ctx.traceJSONPath,\n            JSON.stringify(ctx.harJSON, null, 2)\n          );\n          // if no url get url from har otherwise set with cmd url\n          ctx.url = url.length ? url : getURLFromHAR(ctx);\n\n          function getURLFromHAR(ctx: ProfileContext): string {\n            try {\n              const url = ctx.harJSON.log.entries[0].request.url;\n              return url;\n            } catch (error) {\n              throw new Error(\n                `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n              );\n            }\n          }\n        },\n      },\n      {\n        title: \"Recording the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { cookies, url } = ctx;\n          try {\n            // run the liveTrace\n            const { traceEvents } = await liveTrace(\n              url,\n              tbResultsFolder,\n              cookies,\n              conditions\n            );\n            ctx.traceEvents = traceEvents as ITraceEventFrame[];\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n      {\n        title: \"Setting trace events\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents } = ctx;\n          // mutates this.trace\n          try {\n            this.trace = setTraceEvents(traceEvents);\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n    ]);\n\n    await tasks\n      .run()\n      .catch((error) => {\n        this.error(`${error}`);\n      })\n      .then(async (ctx) => {\n        // log js-eval-time\n        this.logJSEvalTime();\n        // log css-parse\n        this.logCSSEvalTime();\n        // log user timings\n        await this.markerTimings(ctx.traceJSONPath, ctx.url);\n      });\n  }\n\n  private logJSEvalTime(): void {\n    let totalJSDuration = 0;\n    const jsEvalLogs: logBarOptions[] = [];\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = event.dur / 1000;\n        totalJSDuration += durationInMs;\n        jsEvalLogs.push({\n          totalDuration: totalJSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`JS Evaluation :: Total Duration ${totalJSDuration} ms`);\n\n    // log js-eval-time\n    jsEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  private logCSSEvalTime(): void {\n    let totalCSSDuration = 0;\n    const cssEvalLogs: logBarOptions[] = [];\n\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        cssEvalLogs.push({\n          totalDuration: totalCSSDuration,\n          duration: durationInMs,\n          title: url,\n        });\n      });\n\n    logHeading(`CSS Evaluation :: Total Duration ${totalCSSDuration} ms`);\n\n    // log css-parse-time\n    cssEvalLogs\n      .sort((a, b) => {\n        return a.duration - b.duration;\n      })\n      .forEach((log) => {\n        this.log(logBar(log));\n      });\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(\n    traceJSONPath: string,\n    url: string\n  ): Promise<void> {\n    let frame: string;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let customTrace: ITraceEventFrame[];\n    const markerLogs: markerLogMeta[] = [];\n\n    if (!url) {\n      this.error(\n        `Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n      );\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(traceJSONPath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      customTrace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (url.startsWith(\"http\")) {\n      frame = findFrame(customTrace, url);\n    } else {\n      frame = url;\n    }\n\n    if (!frame) {\n      this.error(\n        `Could not extract frame from trace. Explicitly opt-out of usertimings via \"--usertimings\" boolean flag and rerun.`\n      );\n    }\n\n    customTrace\n      .filter((event: ITraceEventFrame) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: ITraceEventFrame) => {\n        if (isFrameNavigationStart(frame, event, url)) {\n          startTime = event.ts;\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        } else if (\n          isFrameMark(frame, event) &&\n          event.name !== \"navigationStart\"\n        ) {\n          if (startTime === -1) {\n            return;\n          }\n          markerLogs.push(this.buildMarkerLogs(event, startTime));\n        }\n      });\n\n    this.logMarkerTimings(markerLogs);\n  }\n\n  private buildMarkerLogs(\n    event: ITraceEventFrame,\n    startTime: number\n  ): markerLogMeta {\n    return {\n      name: event.name,\n      sentanceCaseName: convertToSentCase(event.name),\n      duration: formatToDuration(event.ts, startTime),\n      startTime,\n      bar: \"\",\n    };\n  }\n\n  private logMarkerTimings(markerLogs: markerLogMeta[]): void {\n    const totalDuration = markerLogs[markerLogs.length - 1].duration;\n\n    logHeading(`Marker Timings :: Total Duration ${totalDuration} ms`);\n    markerLogs.forEach((log) => {\n      this.log(\n        logBar({\n          totalDuration,\n          duration: log.duration,\n          title: log.sentanceCaseName,\n        })\n      );\n    });\n  }\n}\n"]}