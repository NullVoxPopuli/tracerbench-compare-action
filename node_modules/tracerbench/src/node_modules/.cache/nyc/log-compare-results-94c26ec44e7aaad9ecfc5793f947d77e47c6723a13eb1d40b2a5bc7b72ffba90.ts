"use strict";function cov_1ljvm1xizr(){var path="/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts";var hash="22af74ca1c446a9621215872659daabdc507a297";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:45}},"2":{start:{line:4,column:14},end:{line:4,column:30}},"3":{start:{line:5,column:25},end:{line:5,column:53}},"4":{start:{line:6,column:33},end:{line:6,column:68}},"5":{start:{line:7,column:19},end:{line:7,column:40}},"6":{start:{line:8,column:16},end:{line:8,column:34}},"7":{start:{line:18,column:4},end:{line:20,column:5}},"8":{start:{line:19,column:8},end:{line:19,column:84}},"9":{start:{line:21,column:4},end:{line:21,column:17}},"10":{start:{line:23,column:0},end:{line:23,column:54}},"11":{start:{line:33,column:22},end:{line:33,column:41}},"12":{start:{line:35,column:8},end:{line:35,column:59}},"13":{start:{line:37,column:4},end:{line:42,column:5}},"14":{start:{line:39,column:23},end:{line:39,column:86}},"15":{start:{line:41,column:8},end:{line:41,column:46}},"16":{start:{line:43,column:4},end:{line:43,column:16}},"17":{start:{line:45,column:0},end:{line:45,column:66}},"18":{start:{line:54,column:46},end:{line:54,column:54}},"19":{start:{line:55,column:33},end:{line:55,column:153}},"20":{start:{line:56,column:4},end:{line:58,column:5}},"21":{start:{line:57,column:8},end:{line:57,column:170}},"22":{start:{line:59,column:4},end:{line:61,column:5}},"23":{start:{line:60,column:8},end:{line:60,column:210}},"24":{start:{line:62,column:4},end:{line:62,column:11}},"25":{start:{line:64,column:0},end:{line:64,column:76}},"26":{start:{line:75,column:4},end:{line:75,column:121}},"27":{start:{line:76,column:4},end:{line:76,column:73}},"28":{start:{line:77,column:4},end:{line:77,column:79}},"29":{start:{line:78,column:4},end:{line:96,column:7}},"30":{start:{line:79,column:63},end:{line:79,column:72}},"31":{start:{line:80,column:18},end:{line:80,column:47}},"32":{start:{line:81,column:8},end:{line:94,column:9}},"33":{start:{line:83,column:12},end:{line:83,column:43}},"34":{start:{line:84,column:12},end:{line:89,column:13}},"35":{start:{line:85,column:16},end:{line:85,column:103}},"36":{start:{line:88,column:16},end:{line:88,column:105}},"37":{start:{line:90,column:12},end:{line:90,column:36}},"38":{start:{line:93,column:12},end:{line:93,column:52}},"39":{start:{line:95,column:8},end:{line:95,column:21}},"40":{start:{line:97,column:4},end:{line:97,column:11}},"41":{start:{line:99,column:0},end:{line:99,column:50}},"42":{start:{line:113,column:24},end:{line:118,column:5}},"43":{start:{line:119,column:4},end:{line:119,column:39}},"44":{start:{line:121,column:0},end:{line:121,column:46}},"45":{start:{line:130,column:25},end:{line:130,column:30}},"46":{start:{line:131,column:27},end:{line:131,column:67}},"47":{start:{line:132,column:23},end:{line:132,column:70}},"48":{start:{line:133,column:24},end:{line:135,column:6}},"49":{start:{line:134,column:8},end:{line:134,column:41}},"50":{start:{line:136,column:27},end:{line:138,column:6}},"51":{start:{line:137,column:8},end:{line:137,column:44}},"52":{start:{line:139,column:33},end:{line:139,column:96}},"53":{start:{line:140,column:36},end:{line:140,column:102}},"54":{start:{line:141,column:22},end:{line:141,column:116}},"55":{start:{line:141,column:70},end:{line:141,column:115}},"56":{start:{line:142,column:34},end:{line:142,column:36}},"57":{start:{line:143,column:26},end:{line:147,column:6}},"58":{start:{line:148,column:4},end:{line:148,column:47}},"59":{start:{line:149,column:4},end:{line:149,column:243}},"60":{start:{line:150,column:4},end:{line:157,column:7}},"61":{start:{line:151,column:8},end:{line:155,column:12}},"62":{start:{line:156,column:8},end:{line:156,column:145}},"63":{start:{line:158,column:37},end:{line:158,column:41}},"64":{start:{line:159,column:31},end:{line:159,column:55}},"65":{start:{line:160,column:27},end:{line:160,column:47}},"66":{start:{line:161,column:34},end:{line:161,column:115}},"67":{start:{line:162,column:4},end:{line:164,column:5}},"68":{start:{line:163,column:8},end:{line:163,column:135}},"69":{start:{line:166,column:4},end:{line:169,column:5}},"70":{start:{line:167,column:8},end:{line:167,column:50}},"71":{start:{line:168,column:8},end:{line:168,column:46}},"72":{start:{line:170,column:4},end:{line:170,column:77}},"73":{start:{line:171,column:4},end:{line:171,column:52}},"74":{start:{line:172,column:4},end:{line:172,column:116}},"75":{start:{line:174,column:0},end:{line:174,column:46}}},fnMap:{"0":{name:"anyResultsSignificant",decl:{start:{line:16,column:9},end:{line:16,column:30}},loc:{start:{line:16,column:79},end:{line:22,column:1}},line:16},"1":{name:"allBelowRegressionThreshold",decl:{start:{line:31,column:9},end:{line:31,column:36}},loc:{start:{line:31,column:116},end:{line:44,column:1}},line:31},"2":{name:"isBelowThreshold",decl:{start:{line:32,column:13},end:{line:32,column:29}},loc:{start:{line:32,column:33},end:{line:36,column:5}},line:32},"3":{name:"outputRunMetaMessagesAndWarnings",decl:{start:{line:53,column:9},end:{line:53,column:41}},loc:{start:{line:53,column:85},end:{line:63,column:1}},line:53},"4":{name:"outputSummaryReport",decl:{start:{line:74,column:9},end:{line:74,column:28}},loc:{start:{line:74,column:57},end:{line:98,column:1}},line:74},"5":{name:"(anonymous_5)",decl:{start:{line:78,column:34},end:{line:78,column:35}},loc:{start:{line:78,column:49},end:{line:96,column:5}},line:78},"6":{name:"outputJSONResults",decl:{start:{line:112,column:9},end:{line:112,column:26}},loc:{start:{line:112,column:114},end:{line:120,column:1}},line:112},"7":{name:"logCompareResults",decl:{start:{line:129,column:15},end:{line:129,column:32}},loc:{start:{line:129,column:54},end:{line:173,column:1}},line:129},"8":{name:"(anonymous_8)",decl:{start:{line:133,column:37},end:{line:133,column:38}},loc:{start:{line:133,column:50},end:{line:135,column:5}},line:133},"9":{name:"(anonymous_9)",decl:{start:{line:136,column:40},end:{line:136,column:41}},loc:{start:{line:136,column:53},end:{line:138,column:5}},line:136},"10":{name:"(anonymous_10)",decl:{start:{line:141,column:63},end:{line:141,column:64}},loc:{start:{line:141,column:70},end:{line:141,column:115}},line:141},"11":{name:"(anonymous_11)",decl:{start:{line:150,column:22},end:{line:150,column:23}},loc:{start:{line:150,column:33},end:{line:157,column:5}},line:150}},branchMap:{"0":{loc:{start:{line:18,column:4},end:{line:20,column:5}},type:"if",locations:[{start:{line:18,column:4},end:{line:20,column:5}},{start:{line:18,column:4},end:{line:20,column:5}}],line:18},"1":{loc:{start:{line:19,column:15},end:{line:19,column:83}},type:"binary-expr",locations:[{start:{line:19,column:15},end:{line:19,column:49}},{start:{line:19,column:53},end:{line:19,column:83}}],line:19},"2":{loc:{start:{line:35,column:15},end:{line:35,column:58}},type:"cond-expr",locations:[{start:{line:35,column:46},end:{line:35,column:51}},{start:{line:35,column:54},end:{line:35,column:58}}],line:35},"3":{loc:{start:{line:35,column:15},end:{line:35,column:43}},type:"binary-expr",locations:[{start:{line:35,column:15},end:{line:35,column:20}},{start:{line:35,column:24},end:{line:35,column:43}}],line:35},"4":{loc:{start:{line:37,column:4},end:{line:42,column:5}},type:"if",locations:[{start:{line:37,column:4},end:{line:42,column:5}},{start:{line:37,column:4},end:{line:42,column:5}}],line:37},"5":{loc:{start:{line:56,column:4},end:{line:58,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:58,column:5}},{start:{line:56,column:4},end:{line:58,column:5}}],line:56},"6":{loc:{start:{line:59,column:4},end:{line:61,column:5}},type:"if",locations:[{start:{line:59,column:4},end:{line:61,column:5}},{start:{line:59,column:4},end:{line:61,column:5}}],line:59},"7":{loc:{start:{line:81,column:8},end:{line:94,column:9}},type:"if",locations:[{start:{line:81,column:8},end:{line:94,column:9}},{start:{line:81,column:8},end:{line:94,column:9}}],line:81},"8":{loc:{start:{line:81,column:12},end:{line:81,column:45}},type:"binary-expr",locations:[{start:{line:81,column:12},end:{line:81,column:25}},{start:{line:81,column:29},end:{line:81,column:45}}],line:81},"9":{loc:{start:{line:84,column:12},end:{line:89,column:13}},type:"if",locations:[{start:{line:84,column:12},end:{line:89,column:13}},{start:{line:84,column:12},end:{line:89,column:13}}],line:84},"10":{loc:{start:{line:162,column:4},end:{line:164,column:5}},type:"if",locations:[{start:{line:162,column:4},end:{line:164,column:5}},{start:{line:162,column:4},end:{line:164,column:5}}],line:162},"11":{loc:{start:{line:166,column:4},end:{line:169,column:5}},type:"if",locations:[{start:{line:166,column:4},end:{line:169,column:5}},{start:{line:166,column:4},end:{line:169,column:5}}],line:166}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/helpers/log-compare-results.ts"],names:[],mappings:";;AACA,8CAAgE;AAChE,+BAA+B;AAE/B,sDAAmD;AAEnD,qEAMkC;AAClC,yCAAiC;AACjC,mCAAsC;AAqBtC;;;;;;GAMG;AACH,SAAgB,qBAAqB,CACnC,QAAgB,EAChB,mBAA8B,EAC9B,eAA0B;IAE1B,yBAAyB;IACzB,IAAI,QAAQ,GAAG,+BAAc,CAAC,IAAI,EAAE;QAClC,OAAO,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC7E;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,sDAUC;AAED;;;;;;GAMG;AACH,SAAgB,2BAA2B,CACzC,mBAAuC,EACvC,6BAAuC,EACvC,yBAAmC;IAEnC,SAAS,gBAAgB,CAAC,CAAS;QACjC,MAAM,KAAK,GAAG,mBAA6B,CAAC;QAC5C,uFAAuF;QACvF,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACrD,CAAC;IAED,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE;QAC3C,0CAA0C;QAC1C,MAAM,MAAM,GAAa,6BAA6B,CAAC,MAAM,CAC3D,yBAAyB,CAC1B,CAAC;QACF,iEAAiE;QACjE,OAAO,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACvC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,kEAoBC;AAED;;;;;;GAMG;AACH,SAAgB,gCAAgC,CAC9C,GAAY,EACZ,QAAgC,EAChC,0BAAmC;IAEnC,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,GAAG,QAAQ,CAAC;IACnD,MAAM,oBAAoB,GACxB,wHAAwH,CAAC;IAE3H,IAAK,QAAmB,GAAG,EAAE,EAAE;QAC7B,GAAG,CAAC,GAAG,CACL,KAAK,mBAAW,CAAC,aAAa,CAC5B,OAAO,mBAAW,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAC1C,IAAI,mBAAW,CAAC,OAAO,CAAC,IAAI,oBAAoB,EAAE,CAAC,IAAI,CACzD,CAAC;KACH;IAED,IAAI,CAAC,0BAA0B,EAAE;QAC/B,GAAG,CAAC,GAAG,CACL,KAAK,mBAAW,CAAC,UAAU,CACzB,OAAO,mBAAW,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAC3C,IAAI,KAAK,CAAC,GAAG,CACZ,+DAA+D,mBAAmB,IAAI,CACvF,IAAI,CACN,CAAC;KACH;IAED,OAAO;AACT,CAAC;AA5BD,4EA4BC;AAED;;;;;;;;GAQG;AACH,SAAgB,mBAAmB,CACjC,GAAY,EACZ,qBAKC;IAED,GAAG,CAAC,GAAG,CACL,KAAK,mBAAW,CAAC,WAAW,CAC1B,OAAO,mBAAW,CAAC,KAAK,CAAC,2BAA2B,CAAC,MAAM,CAC5D,EAAE,CACJ,CAAC;IAEF,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACrE,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,0CAA0C,CAAC,CAAC;IAC3E,qBAAqB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;QAC1C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC;QACjE,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QAExC,IAAI,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACrC,IAAI,WAAW,CAAC;YAEhB,GAAG,IAAI,uBAAuB,CAAC;YAE/B,IAAI,MAAM,GAAG,CAAC,EAAE;gBACd,WAAW,GAAG,KAAK,CAAC,GAAG,CACrB,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,KAAK,CAC9D,CAAC;aACH;iBAAM;gBACL,WAAW,GAAG,KAAK,CAAC,KAAK,CACvB,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,KAAK,CAC9D,CAAC;aACH;YAED,GAAG,IAAI,GAAG,WAAW,EAAE,CAAC;SACzB;aAAM;YACL,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;SACzC;QACD,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,OAAO;AACT,CAAC;AA5CD,kDA4CC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,iBAAiB,CAC/B,kBAAwC,EACxC,cAAoC,EACpC,qBAA8B,EAC9B,0BAAmC;IAEnC,MAAM,WAAW,GAAwB;QACvC,kBAAkB;QAClB,cAAc;QACd,qBAAqB;QACrB,0BAA0B;KAC3B,CAAC;IACF,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AACrC,CAAC;AAbD,8CAaC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,iBAAiB,CACrC,OAAkC,EAClC,KAA0E,EAC1E,GAAY;IAEZ,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAC3B,MAAM,cAAc,GAAG,IAAI,kBAAO,CAAC,gBAAgB,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,IAAI,kBAAO,CAAC,uBAAuB,CAAC,CAAC;IAExD,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3C,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC;IACnC,CAAC,CAA4B,CAAC;IAE9B,MAAM,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QAC9C,OAAO,OAAO,CAAC,GAAG,KAAK,YAAY,CAAC;IACtC,CAAC,CAA4B,CAAC;IAE9B,MAAM,oBAAoB,GAAG,0CAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACpE,MAAM,uBAAuB,GAAG,0CAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAE1E,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,MAAM,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,uCAAc,CAC5B,CAAC;IACF,MAAM,qBAAqB,GAGtB,EAAE,CAAC;IAER,MAAM,aAAa,GAAG,IAAI,aAAK,CAAC;QAC9B,OAAO,EAAE,oBAAoB,CAAC,QAAQ;QACtC,UAAU,EAAE,uBAAuB,CAAC,QAAQ;QAC5C,IAAI,EAAE,UAAU;KACjB,CAAC,CAAC;IACH,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3C,qBAAqB,CAAC,IAAI,CACxB,wCAAe,CACb,oBAAoB,CAAC,uCAAc,CAAC,EACpC,uBAAuB,CAAC,uCAAc,CAAC,EACvC,uCAAc,CACf,CACF,CAAC;IAEF,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1B,UAAU,CAAC,OAAO,CAAC,IAAI,CACrB,IAAI,aAAK,CAAC;YACR,OAAO,EAAE,oBAAoB,CAAC,KAAK,CAAC;YACpC,UAAU,EAAE,uBAAuB,CAAC,KAAK,CAAC;YAC1C,IAAI,EAAE,KAAK;SACZ,CAAC,CACH,CAAC;QACF,qBAAqB,CAAC,IAAI,CACxB,wCAAe,CACb,oBAAoB,CAAC,KAAK,CAAC,EAC3B,uBAAuB,CAAC,KAAK,CAAC,EAC9B,KAAK,CACN,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,0BAA0B,GAAG,IAAI,CAAC;IACtC,MAAM,kBAAkB,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;IACpD,MAAM,cAAc,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;IAC5C,MAAM,qBAAqB,GAAG,qBAAqB,CACjD,QAAkB,EAClB,cAAc,CAAC,UAAU,EACzB,UAAU,CAAC,UAAU,CACtB,CAAC;IACF,IAAI,qBAAqB,EAAE;QACzB,0BAA0B,GAAG,2BAA2B,CACtD,QAAkB,EAClB,cAAc,CAAC,eAAe,EAC9B,UAAU,CAAC,eAAe,CAC3B,CAAC;KACH;IAED,2CAA2C;IAC3C,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAClB,GAAG,CAAC,GAAG,CAAC,OAAO,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC1C,GAAG,CAAC,GAAG,CAAC,OAAO,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;KACvC;IAED,gCAAgC,CAAC,GAAG,EAAE,KAAK,EAAE,0BAA0B,CAAC,CAAC;IACzE,mBAAmB,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;IAEhD,OAAO,iBAAiB,CACtB,kBAAkB,EAClB,cAAc,EACd,qBAAqB,EACrB,0BAA0B,CAC3B,CAAC;AACJ,CAAC;AA1FD,8CA0FC",sourcesContent:["import { Command } from \"@oclif/command\";\nimport { ISevenFigureSummary, Stats } from \"@tracerbench/stats\";\nimport * as chalk from \"chalk\";\n\nimport { fidelityLookup } from \"../command-config\";\nimport { ICompareFlags } from \"../commands/compare\";\nimport {\n  bucketPhaseValues,\n  formatPhaseData,\n  HTMLSectionRenderData,\n  ITracerBenchTraceResult,\n  PAGE_LOAD_TIME,\n} from \"./create-consumable-html\";\nimport TBTable from \"./tb-table\";\nimport { chalkScheme } from \"./utils\";\n\nexport interface ICompareJSONResult {\n  heading: string;\n  phaseName: string;\n  isSignificant: boolean;\n  estimatorDelta: string;\n  controlSampleCount: number;\n  experimentSampleCount: number;\n  confidenceInterval: string[];\n  controlSevenFigureSummary: ISevenFigureSummary;\n  experimentSevenFigureSummary: ISevenFigureSummary;\n}\n\nexport interface ICompareJSONResults {\n  benchmarkTableData: ICompareJSONResult[];\n  phaseTableData: ICompareJSONResult[];\n  areResultsSignificant: boolean;\n  isBelowRegressionThreshold: boolean;\n}\n\n/**\n * If fidelity is at acceptable number, return true if any of the phase results were significant\n *\n * @param fidelity - Use this to determine if the sample count is too low\n * @param benchmarkIsSigArray - Array of strings of either \"Yes\" or \"No\" from TBTable\n * @param phaseIsSigArray - Array of strings of either \"Yes\" or \"No\" from TBTable\n */\nexport function anyResultsSignificant(\n  fidelity: number,\n  benchmarkIsSigArray: boolean[],\n  phaseIsSigArray: boolean[]\n): boolean {\n  // if fidelity !== 'test'\n  if (fidelity > fidelityLookup.test) {\n    return benchmarkIsSigArray.includes(true) || phaseIsSigArray.includes(true);\n  }\n  return false;\n}\n\n/**\n * If any phase of the experiment has regressed slower beyond the threshold limit returns false; otherwise true\n *\n * @param regressionThreshold - Positive number in milliseconds the experiment has regressed slower eg 100\n * @param benchmarkTableEstimatorDeltas - Array of Estimator Deltas for the Benchmark Table\n * @param phaseTableEstimatorDeltas - Array of Estimator Deltas for the Phase Table\n */\nexport function allBelowRegressionThreshold(\n  regressionThreshold: number | undefined,\n  benchmarkTableEstimatorDeltas: number[],\n  phaseTableEstimatorDeltas: number[]\n): boolean {\n  function isBelowThreshold(n: number): boolean {\n    const limit = regressionThreshold as number;\n    // if the delta is a negative number and abs(delta) greater than threshold return false\n    return n < 0 && Math.abs(n) > limit ? false : true;\n  }\n\n  if (typeof regressionThreshold === \"number\") {\n    // concat estimator deltas from all phases\n    const deltas: number[] = benchmarkTableEstimatorDeltas.concat(\n      phaseTableEstimatorDeltas\n    );\n    // if the experiment is slower beyond the threshold return false;\n    return deltas.every(isBelowThreshold);\n  }\n  return true;\n}\n\n/**\n * Output meta data about the benchmark run and FYI messages to the user.\n *\n * @param cli - This is expected to be a \"compare\" Command instance\n * @param cliFlags - This is expected to be CLI flags from the \"compare\" command\n * @param isBelowRegressionThreshold - Boolean indicating if there were any deltas below \"regressionThreshold\" flag\n */\nexport function outputRunMetaMessagesAndWarnings(\n  cli: Command,\n  cliFlags: Partial<ICompareFlags>,\n  isBelowRegressionThreshold: boolean\n): void {\n  const { fidelity, regressionThreshold } = cliFlags;\n  const LOW_FIDELITY_WARNING =\n    'The fidelity setting was set below the recommended for a viable result. Rerun TracerBench with at least \"fidelity=low\"';\n\n  if ((fidelity as number) < 10) {\n    cli.log(\n      `\\n${chalkScheme.blackBgYellow(\n        `    ${chalkScheme.white(\"WARNING\")}    `\n      )} ${chalkScheme.warning(` ${LOW_FIDELITY_WARNING}`)}\\n`\n    );\n  }\n\n  if (!isBelowRegressionThreshold) {\n    cli.log(\n      `\\n${chalkScheme.blackBgRed(\n        `    ${chalkScheme.white(\"!! ALERT\")}    `\n      )} ${chalk.red(\n        ` Regression found exceeding the set regression threshold of ${regressionThreshold}ms`\n      )}\\n`\n    );\n  }\n\n  return;\n}\n\n/**\n * Generate the summary section for the results.\n *\n * For each phase, color the significance appropriately by the HL estimated difference. Red for regression, green for\n * improvement. Color with monotone if not significant.\n *\n * @param cli - This is expected to be a \"compare\" Command instance\n * @param phaseResultsFormatted - Array of results from calling formatPhaseData\n */\nexport function outputSummaryReport(\n  cli: Command,\n  phaseResultsFormatted: Array<\n    Pick<\n      HTMLSectionRenderData,\n      \"phase\" | \"hlDiff\" | \"isSignificant\" | \"ciMin\" | \"ciMax\"\n    >\n  >\n): void {\n  cli.log(\n    `\\n${chalkScheme.blackBgBlue(\n      `    ${chalkScheme.white(\"Benchmark Results Summary\")}    `\n    )}`\n  );\n\n  cli.log(`\\n${chalk.red(\"Red\")} color means there was a regression.`);\n  cli.log(`${chalk.green(\"Green\")} color means there was an improvement.\\n`);\n  phaseResultsFormatted.forEach((phaseData) => {\n    const { phase, hlDiff, isSignificant, ciMin, ciMax } = phaseData;\n    let msg = `${chalk.bold(phase)} phase `;\n\n    if (isSignificant && Math.abs(hlDiff)) {\n      let coloredDiff;\n\n      msg += \"estimated difference \";\n\n      if (hlDiff < 0) {\n        coloredDiff = chalk.red(\n          `+${Math.abs(hlDiff)}ms [${ciMax * -1}ms to ${ciMin * -1}ms]`\n        );\n      } else {\n        coloredDiff = chalk.green(\n          `-${Math.abs(hlDiff)}ms [${ciMax * -1}ms to ${ciMin * -1}ms]`\n        );\n      }\n\n      msg += `${coloredDiff}`;\n    } else {\n      msg += `${chalk.grey(\"no difference\")}`;\n    }\n    cli.log(msg);\n  });\n\n  return;\n}\n\n/**\n * Return the trimmed compare results in JSON format\n *\n * This is propogated as the default return all the way up to the Compare command directly\n * without the need for the legacy --json flag\n *\n * @param benchmarkTableData - ICompareJSONResult[] from instantiated TBTable#getData() for the top level duration\n * @param phaseTableData - ICompareJSONResult[] from instantiated TBTable#getData() for all sub phases of the top level duration\n * @param areResultsSignificant - A culled boolean if any results are significant this is truthy\n * @param isBelowRegressionThreshold - A culled boolean to check if all results are below the config regression threshold\n * @return jsonResults - A JSON.stringified return of the trimmed compare results\n */\nexport function outputJSONResults(\n  benchmarkTableData: ICompareJSONResult[],\n  phaseTableData: ICompareJSONResult[],\n  areResultsSignificant: boolean,\n  isBelowRegressionThreshold: boolean\n): string {\n  const jsonResults: ICompareJSONResults = {\n    benchmarkTableData,\n    phaseTableData,\n    areResultsSignificant,\n    isBelowRegressionThreshold,\n  };\n  return JSON.stringify(jsonResults);\n}\n\n/**\n * Collect and analyze the data for the different phases for the experiment and control set and output the result to the console.\n *\n * @param results - This is expected to be generated from tracerbench core's runner. Containing the dataset for experiment and control\n * @param flags - This is expected to be CLI flags from the \"compare\" command\n * @param cli - This is expected to be a \"compare\" Command instance\n */\nexport async function logCompareResults(\n  results: ITracerBenchTraceResult[],\n  flags: Pick<ICompareFlags, \"fidelity\" | \"regressionThreshold\" | \"isCIEnv\">,\n  cli: Command\n): Promise<string> {\n  const { fidelity } = flags;\n  const benchmarkTable = new TBTable(\"Initial Render\");\n  const phaseTable = new TBTable(\"Sub Phase of Duration\");\n\n  const controlData = results.find((element) => {\n    return element.set === \"control\";\n  }) as ITracerBenchTraceResult;\n\n  const experimentData = results.find((element) => {\n    return element.set === \"experiment\";\n  }) as ITracerBenchTraceResult;\n\n  const valuesByPhaseControl = bucketPhaseValues(controlData.samples);\n  const valuesByPhaseExperiment = bucketPhaseValues(experimentData.samples);\n\n  const subPhases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n  const phaseResultsFormatted: Array<Pick<\n    HTMLSectionRenderData,\n    \"phase\" | \"hlDiff\" | \"isSignificant\" | \"ciMin\" | \"ciMax\"\n  >> = [];\n\n  const durationStats = new Stats({\n    control: valuesByPhaseControl.duration,\n    experiment: valuesByPhaseExperiment.duration,\n    name: \"duration\",\n  });\n  benchmarkTable.display.push(durationStats);\n  phaseResultsFormatted.push(\n    formatPhaseData(\n      valuesByPhaseControl[PAGE_LOAD_TIME],\n      valuesByPhaseExperiment[PAGE_LOAD_TIME],\n      PAGE_LOAD_TIME\n    )\n  );\n\n  subPhases.forEach((phase) => {\n    phaseTable.display.push(\n      new Stats({\n        control: valuesByPhaseControl[phase],\n        experiment: valuesByPhaseExperiment[phase],\n        name: phase,\n      })\n    );\n    phaseResultsFormatted.push(\n      formatPhaseData(\n        valuesByPhaseControl[phase],\n        valuesByPhaseExperiment[phase],\n        phase\n      )\n    );\n  });\n\n  let isBelowRegressionThreshold = true;\n  const benchmarkTableData = benchmarkTable.getData();\n  const phaseTableData = phaseTable.getData();\n  const areResultsSignificant = anyResultsSignificant(\n    fidelity as number,\n    benchmarkTable.isSigArray,\n    phaseTable.isSigArray\n  );\n  if (areResultsSignificant) {\n    isBelowRegressionThreshold = allBelowRegressionThreshold(\n      fidelity as number,\n      benchmarkTable.estimatorDeltas,\n      phaseTable.estimatorDeltas\n    );\n  }\n\n  // only log the tables when NOT in a CI env\n  if (!flags.isCIEnv) {\n    cli.log(`\\n\\n${benchmarkTable.render()}`);\n    cli.log(`\\n\\n${phaseTable.render()}`);\n  }\n\n  outputRunMetaMessagesAndWarnings(cli, flags, isBelowRegressionThreshold);\n  outputSummaryReport(cli, phaseResultsFormatted);\n\n  return outputJSONResults(\n    benchmarkTableData,\n    phaseTableData,\n    areResultsSignificant,\n    isBelowRegressionThreshold\n  );\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"22af74ca1c446a9621215872659daabdc507a297"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1ljvm1xizr=function(){return actualCoverage;};return actualCoverage;}cov_1ljvm1xizr().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const stats_1=(cov_1ljvm1xizr().s[1]++,require("@tracerbench/stats"));const chalk=(cov_1ljvm1xizr().s[2]++,require("chalk"));const command_config_1=(cov_1ljvm1xizr().s[3]++,require("../command-config"));const create_consumable_html_1=(cov_1ljvm1xizr().s[4]++,require("./create-consumable-html"));const tb_table_1=(cov_1ljvm1xizr().s[5]++,require("./tb-table"));const utils_1=(cov_1ljvm1xizr().s[6]++,require("./utils"));/**
 * If fidelity is at acceptable number, return true if any of the phase results were significant
 *
 * @param fidelity - Use this to determine if the sample count is too low
 * @param benchmarkIsSigArray - Array of strings of either "Yes" or "No" from TBTable
 * @param phaseIsSigArray - Array of strings of either "Yes" or "No" from TBTable
 */function anyResultsSignificant(fidelity,benchmarkIsSigArray,phaseIsSigArray){cov_1ljvm1xizr().f[0]++;cov_1ljvm1xizr().s[7]++;// if fidelity !== 'test'
if(fidelity>command_config_1.fidelityLookup.test){cov_1ljvm1xizr().b[0][0]++;cov_1ljvm1xizr().s[8]++;return(cov_1ljvm1xizr().b[1][0]++,benchmarkIsSigArray.includes(true))||(cov_1ljvm1xizr().b[1][1]++,phaseIsSigArray.includes(true));}else{cov_1ljvm1xizr().b[0][1]++;}cov_1ljvm1xizr().s[9]++;return false;}cov_1ljvm1xizr().s[10]++;exports.anyResultsSignificant=anyResultsSignificant;/**
 * If any phase of the experiment has regressed slower beyond the threshold limit returns false; otherwise true
 *
 * @param regressionThreshold - Positive number in milliseconds the experiment has regressed slower eg 100
 * @param benchmarkTableEstimatorDeltas - Array of Estimator Deltas for the Benchmark Table
 * @param phaseTableEstimatorDeltas - Array of Estimator Deltas for the Phase Table
 */function allBelowRegressionThreshold(regressionThreshold,benchmarkTableEstimatorDeltas,phaseTableEstimatorDeltas){cov_1ljvm1xizr().f[1]++;function isBelowThreshold(n){cov_1ljvm1xizr().f[2]++;const limit=(cov_1ljvm1xizr().s[11]++,regressionThreshold);// if the delta is a negative number and abs(delta) greater than threshold return false
cov_1ljvm1xizr().s[12]++;return(cov_1ljvm1xizr().b[3][0]++,n<0)&&(cov_1ljvm1xizr().b[3][1]++,Math.abs(n)>limit)?(cov_1ljvm1xizr().b[2][0]++,false):(cov_1ljvm1xizr().b[2][1]++,true);}cov_1ljvm1xizr().s[13]++;if(typeof regressionThreshold==="number"){cov_1ljvm1xizr().b[4][0]++;// concat estimator deltas from all phases
const deltas=(cov_1ljvm1xizr().s[14]++,benchmarkTableEstimatorDeltas.concat(phaseTableEstimatorDeltas));// if the experiment is slower beyond the threshold return false;
cov_1ljvm1xizr().s[15]++;return deltas.every(isBelowThreshold);}else{cov_1ljvm1xizr().b[4][1]++;}cov_1ljvm1xizr().s[16]++;return true;}cov_1ljvm1xizr().s[17]++;exports.allBelowRegressionThreshold=allBelowRegressionThreshold;/**
 * Output meta data about the benchmark run and FYI messages to the user.
 *
 * @param cli - This is expected to be a "compare" Command instance
 * @param cliFlags - This is expected to be CLI flags from the "compare" command
 * @param isBelowRegressionThreshold - Boolean indicating if there were any deltas below "regressionThreshold" flag
 */function outputRunMetaMessagesAndWarnings(cli,cliFlags,isBelowRegressionThreshold){cov_1ljvm1xizr().f[3]++;const{fidelity,regressionThreshold}=(cov_1ljvm1xizr().s[18]++,cliFlags);const LOW_FIDELITY_WARNING=(cov_1ljvm1xizr().s[19]++,'The fidelity setting was set below the recommended for a viable result. Rerun TracerBench with at least "fidelity=low"');cov_1ljvm1xizr().s[20]++;if(fidelity<10){cov_1ljvm1xizr().b[5][0]++;cov_1ljvm1xizr().s[21]++;cli.log(`\n${utils_1.chalkScheme.blackBgYellow(`    ${utils_1.chalkScheme.white("WARNING")}    `)} ${utils_1.chalkScheme.warning(` ${LOW_FIDELITY_WARNING}`)}\n`);}else{cov_1ljvm1xizr().b[5][1]++;}cov_1ljvm1xizr().s[22]++;if(!isBelowRegressionThreshold){cov_1ljvm1xizr().b[6][0]++;cov_1ljvm1xizr().s[23]++;cli.log(`\n${utils_1.chalkScheme.blackBgRed(`    ${utils_1.chalkScheme.white("!! ALERT")}    `)} ${chalk.red(` Regression found exceeding the set regression threshold of ${regressionThreshold}ms`)}\n`);}else{cov_1ljvm1xizr().b[6][1]++;}cov_1ljvm1xizr().s[24]++;return;}cov_1ljvm1xizr().s[25]++;exports.outputRunMetaMessagesAndWarnings=outputRunMetaMessagesAndWarnings;/**
 * Generate the summary section for the results.
 *
 * For each phase, color the significance appropriately by the HL estimated difference. Red for regression, green for
 * improvement. Color with monotone if not significant.
 *
 * @param cli - This is expected to be a "compare" Command instance
 * @param phaseResultsFormatted - Array of results from calling formatPhaseData
 */function outputSummaryReport(cli,phaseResultsFormatted){cov_1ljvm1xizr().f[4]++;cov_1ljvm1xizr().s[26]++;cli.log(`\n${utils_1.chalkScheme.blackBgBlue(`    ${utils_1.chalkScheme.white("Benchmark Results Summary")}    `)}`);cov_1ljvm1xizr().s[27]++;cli.log(`\n${chalk.red("Red")} color means there was a regression.`);cov_1ljvm1xizr().s[28]++;cli.log(`${chalk.green("Green")} color means there was an improvement.\n`);cov_1ljvm1xizr().s[29]++;phaseResultsFormatted.forEach(phaseData=>{cov_1ljvm1xizr().f[5]++;const{phase,hlDiff,isSignificant,ciMin,ciMax}=(cov_1ljvm1xizr().s[30]++,phaseData);let msg=(cov_1ljvm1xizr().s[31]++,`${chalk.bold(phase)} phase `);cov_1ljvm1xizr().s[32]++;if((cov_1ljvm1xizr().b[8][0]++,isSignificant)&&(cov_1ljvm1xizr().b[8][1]++,Math.abs(hlDiff))){cov_1ljvm1xizr().b[7][0]++;let coloredDiff;cov_1ljvm1xizr().s[33]++;msg+="estimated difference ";cov_1ljvm1xizr().s[34]++;if(hlDiff<0){cov_1ljvm1xizr().b[9][0]++;cov_1ljvm1xizr().s[35]++;coloredDiff=chalk.red(`+${Math.abs(hlDiff)}ms [${ciMax*-1}ms to ${ciMin*-1}ms]`);}else{cov_1ljvm1xizr().b[9][1]++;cov_1ljvm1xizr().s[36]++;coloredDiff=chalk.green(`-${Math.abs(hlDiff)}ms [${ciMax*-1}ms to ${ciMin*-1}ms]`);}cov_1ljvm1xizr().s[37]++;msg+=`${coloredDiff}`;}else{cov_1ljvm1xizr().b[7][1]++;cov_1ljvm1xizr().s[38]++;msg+=`${chalk.grey("no difference")}`;}cov_1ljvm1xizr().s[39]++;cli.log(msg);});cov_1ljvm1xizr().s[40]++;return;}cov_1ljvm1xizr().s[41]++;exports.outputSummaryReport=outputSummaryReport;/**
 * Return the trimmed compare results in JSON format
 *
 * This is propogated as the default return all the way up to the Compare command directly
 * without the need for the legacy --json flag
 *
 * @param benchmarkTableData - ICompareJSONResult[] from instantiated TBTable#getData() for the top level duration
 * @param phaseTableData - ICompareJSONResult[] from instantiated TBTable#getData() for all sub phases of the top level duration
 * @param areResultsSignificant - A culled boolean if any results are significant this is truthy
 * @param isBelowRegressionThreshold - A culled boolean to check if all results are below the config regression threshold
 * @return jsonResults - A JSON.stringified return of the trimmed compare results
 */function outputJSONResults(benchmarkTableData,phaseTableData,areResultsSignificant,isBelowRegressionThreshold){cov_1ljvm1xizr().f[6]++;const jsonResults=(cov_1ljvm1xizr().s[42]++,{benchmarkTableData,phaseTableData,areResultsSignificant,isBelowRegressionThreshold});cov_1ljvm1xizr().s[43]++;return JSON.stringify(jsonResults);}cov_1ljvm1xizr().s[44]++;exports.outputJSONResults=outputJSONResults;/**
 * Collect and analyze the data for the different phases for the experiment and control set and output the result to the console.
 *
 * @param results - This is expected to be generated from tracerbench core's runner. Containing the dataset for experiment and control
 * @param flags - This is expected to be CLI flags from the "compare" command
 * @param cli - This is expected to be a "compare" Command instance
 */async function logCompareResults(results,flags,cli){cov_1ljvm1xizr().f[7]++;const{fidelity}=(cov_1ljvm1xizr().s[45]++,flags);const benchmarkTable=(cov_1ljvm1xizr().s[46]++,new tb_table_1.default("Initial Render"));const phaseTable=(cov_1ljvm1xizr().s[47]++,new tb_table_1.default("Sub Phase of Duration"));const controlData=(cov_1ljvm1xizr().s[48]++,results.find(element=>{cov_1ljvm1xizr().f[8]++;cov_1ljvm1xizr().s[49]++;return element.set==="control";}));const experimentData=(cov_1ljvm1xizr().s[50]++,results.find(element=>{cov_1ljvm1xizr().f[9]++;cov_1ljvm1xizr().s[51]++;return element.set==="experiment";}));const valuesByPhaseControl=(cov_1ljvm1xizr().s[52]++,create_consumable_html_1.bucketPhaseValues(controlData.samples));const valuesByPhaseExperiment=(cov_1ljvm1xizr().s[53]++,create_consumable_html_1.bucketPhaseValues(experimentData.samples));const subPhases=(cov_1ljvm1xizr().s[54]++,Object.keys(valuesByPhaseControl).filter(k=>{cov_1ljvm1xizr().f[10]++;cov_1ljvm1xizr().s[55]++;return k!==create_consumable_html_1.PAGE_LOAD_TIME;}));const phaseResultsFormatted=(cov_1ljvm1xizr().s[56]++,[]);const durationStats=(cov_1ljvm1xizr().s[57]++,new stats_1.Stats({control:valuesByPhaseControl.duration,experiment:valuesByPhaseExperiment.duration,name:"duration"}));cov_1ljvm1xizr().s[58]++;benchmarkTable.display.push(durationStats);cov_1ljvm1xizr().s[59]++;phaseResultsFormatted.push(create_consumable_html_1.formatPhaseData(valuesByPhaseControl[create_consumable_html_1.PAGE_LOAD_TIME],valuesByPhaseExperiment[create_consumable_html_1.PAGE_LOAD_TIME],create_consumable_html_1.PAGE_LOAD_TIME));cov_1ljvm1xizr().s[60]++;subPhases.forEach(phase=>{cov_1ljvm1xizr().f[11]++;cov_1ljvm1xizr().s[61]++;phaseTable.display.push(new stats_1.Stats({control:valuesByPhaseControl[phase],experiment:valuesByPhaseExperiment[phase],name:phase}));cov_1ljvm1xizr().s[62]++;phaseResultsFormatted.push(create_consumable_html_1.formatPhaseData(valuesByPhaseControl[phase],valuesByPhaseExperiment[phase],phase));});let isBelowRegressionThreshold=(cov_1ljvm1xizr().s[63]++,true);const benchmarkTableData=(cov_1ljvm1xizr().s[64]++,benchmarkTable.getData());const phaseTableData=(cov_1ljvm1xizr().s[65]++,phaseTable.getData());const areResultsSignificant=(cov_1ljvm1xizr().s[66]++,anyResultsSignificant(fidelity,benchmarkTable.isSigArray,phaseTable.isSigArray));cov_1ljvm1xizr().s[67]++;if(areResultsSignificant){cov_1ljvm1xizr().b[10][0]++;cov_1ljvm1xizr().s[68]++;isBelowRegressionThreshold=allBelowRegressionThreshold(fidelity,benchmarkTable.estimatorDeltas,phaseTable.estimatorDeltas);}else{cov_1ljvm1xizr().b[10][1]++;}// only log the tables when NOT in a CI env
cov_1ljvm1xizr().s[69]++;if(!flags.isCIEnv){cov_1ljvm1xizr().b[11][0]++;cov_1ljvm1xizr().s[70]++;cli.log(`\n\n${benchmarkTable.render()}`);cov_1ljvm1xizr().s[71]++;cli.log(`\n\n${phaseTable.render()}`);}else{cov_1ljvm1xizr().b[11][1]++;}cov_1ljvm1xizr().s[72]++;outputRunMetaMessagesAndWarnings(cli,flags,isBelowRegressionThreshold);cov_1ljvm1xizr().s[73]++;outputSummaryReport(cli,phaseResultsFormatted);cov_1ljvm1xizr().s[74]++;return outputJSONResults(benchmarkTableData,phaseTableData,areResultsSignificant,isBelowRegressionThreshold);}cov_1ljvm1xizr().s[75]++;exports.logCompareResults=logCompareResults;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,