"use strict";/* eslint-disable @typescript-eslint/no-explicit-any */function cov_1q73d7sky0(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts";var hash="ccb564c182430842dd62b1fbb18c3cad3a187b42";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:18},end:{line:4,column:43}},"2":{start:{line:5,column:15},end:{line:5,column:43}},"3":{start:{line:6,column:11},end:{line:6,column:30}},"4":{start:{line:7,column:13},end:{line:7,column:28}},"5":{start:{line:8,column:25},end:{line:8,column:56}},"6":{start:{line:9,column:28},end:{line:9,column:77}},"7":{start:{line:10,column:20},end:{line:10,column:61}},"8":{start:{line:11,column:26},end:{line:11,column:66}},"9":{start:{line:12,column:16},end:{line:12,column:46}},"10":{start:{line:13,column:16},end:{line:13,column:46}},"11":{start:{line:14,column:18},end:{line:14,column:38}},"12":{start:{line:15,column:17},end:{line:15,column:36}},"13":{start:{line:17,column:17},end:{line:17,column:36}},"14":{start:{line:20,column:8},end:{line:20,column:28}},"15":{start:{line:21,column:8},end:{line:21,column:64}},"16":{start:{line:22,column:8},end:{line:22,column:37}},"17":{start:{line:23,column:26},end:{line:23,column:45}},"18":{start:{line:24,column:8},end:{line:24,column:34}},"19":{start:{line:25,column:8},end:{line:25,column:34}},"20":{start:{line:29,column:26},end:{line:29,column:45}},"21":{start:{line:30,column:8},end:{line:30,column:96}},"22":{start:{line:31,column:8},end:{line:31,column:34}},"23":{start:{line:32,column:8},end:{line:32,column:32}},"24":{start:{line:35,column:33},end:{line:35,column:50}},"25":{start:{line:36,column:55},end:{line:36,column:99}},"26":{start:{line:38,column:8},end:{line:44,column:9}},"27":{start:{line:39,column:12},end:{line:43,column:15}},"28":{start:{line:40,column:16},end:{line:42,column:17}},"29":{start:{line:41,column:20},end:{line:41,column:65}},"30":{start:{line:45,column:27},end:{line:48,column:9}},"31":{start:{line:49,column:30},end:{line:49,column:61}},"32":{start:{line:50,column:26},end:{line:50,column:45}},"33":{start:{line:51,column:24},end:{line:70,column:10}},"34":{start:{line:52,column:12},end:{line:59,column:13}},"35":{start:{line:53,column:32},end:{line:53,column:51}},"36":{start:{line:54,column:38},end:{line:54,column:78}},"37":{start:{line:55,column:16},end:{line:55,column:151}},"38":{start:{line:58,column:16},end:{line:58,column:91}},"39":{start:{line:63,column:25},end:{line:63,column:70}},"40":{start:{line:64,column:12},end:{line:69,column:14}},"41":{start:{line:71,column:24},end:{line:71,column:43}},"42":{start:{line:72,column:8},end:{line:74,column:9}},"43":{start:{line:73,column:12},end:{line:73,column:153}},"44":{start:{line:75,column:31},end:{line:75,column:82}},"45":{start:{line:76,column:8},end:{line:76,column:66}},"46":{start:{line:77,column:26},end:{line:77,column:71}},"47":{start:{line:78,column:26},end:{line:78,column:97}},"48":{start:{line:79,column:24},end:{line:81,column:10}},"49":{start:{line:82,column:8},end:{line:82,column:47}},"50":{start:{line:83,column:8},end:{line:83,column:32}},"51":{start:{line:84,column:8},end:{line:84,column:27}},"52":{start:{line:86,column:24},end:{line:86,column:214}},"53":{start:{line:87,column:8},end:{line:87,column:33}},"54":{start:{line:88,column:8},end:{line:99,column:9}},"55":{start:{line:89,column:12},end:{line:97,column:15}},"56":{start:{line:98,column:12},end:{line:98,column:106}},"57":{start:{line:101,column:8},end:{line:108,column:9}},"58":{start:{line:102,column:12},end:{line:107,column:15}},"59":{start:{line:111,column:8},end:{line:115,column:9}},"60":{start:{line:112,column:12},end:{line:112,column:155}},"61":{start:{line:113,column:12},end:{line:113,column:161}},"62":{start:{line:114,column:12},end:{line:114,column:156}},"63":{start:{line:116,column:8},end:{line:116,column:39}},"64":{start:{line:119,column:114},end:{line:119,column:131}},"65":{start:{line:124,column:8},end:{line:126,column:9}},"66":{start:{line:125,column:12},end:{line:125,column:100}},"67":{start:{line:127,column:8},end:{line:129,column:9}},"68":{start:{line:128,column:12},end:{line:128,column:70}},"69":{start:{line:130,column:8},end:{line:132,column:9}},"70":{start:{line:131,column:12},end:{line:131,column:86}},"71":{start:{line:133,column:8},end:{line:135,column:9}},"72":{start:{line:134,column:12},end:{line:134,column:92}},"73":{start:{line:136,column:8},end:{line:138,column:9}},"74":{start:{line:137,column:12},end:{line:137,column:95}},"75":{start:{line:140,column:8},end:{line:142,column:9}},"76":{start:{line:141,column:12},end:{line:141,column:116}},"77":{start:{line:145,column:8},end:{line:145,column:60}},"78":{start:{line:159,column:22},end:{line:159,column:68}},"79":{start:{line:160,column:31},end:{line:163,column:9}},"80":{start:{line:164,column:34},end:{line:167,column:9}},"81":{start:{line:169,column:8},end:{line:176,column:9}},"82":{start:{line:170,column:12},end:{line:172,column:13}},"83":{start:{line:171,column:16},end:{line:171,column:167}},"84":{start:{line:173,column:12},end:{line:175,column:13}},"85":{start:{line:174,column:16},end:{line:174,column:173}},"86":{start:{line:177,column:31},end:{line:177,column:159}},"87":{start:{line:178,column:37},end:{line:178,column:171}},"88":{start:{line:179,column:48},end:{line:179,column:193}},"89":{start:{line:180,column:34},end:{line:180,column:165}},"90":{start:{line:181,column:40},end:{line:181,column:177}},"91":{start:{line:182,column:51},end:{line:182,column:199}},"92":{start:{line:183,column:38},end:{line:185,column:16}},"93":{start:{line:186,column:32},end:{line:201,column:9}},"94":{start:{line:198,column:47},end:{line:198,column:110}},"95":{start:{line:202,column:41},end:{line:204,column:16}},"96":{start:{line:205,column:35},end:{line:219,column:9}},"97":{start:{line:216,column:47},end:{line:216,column:110}},"98":{start:{line:220,column:8},end:{line:220,column:53}},"99":{start:{line:223,column:0},end:{line:223,column:26}},"100":{start:{line:224,column:0},end:{line:224,column:88}},"101":{start:{line:225,column:0},end:{line:249,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:30},end:{line:26,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:17},end:{line:33,column:5}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:16},end:{line:117,column:5}},line:34},"3":{name:"(anonymous_3)",decl:{start:{line:39,column:54},end:{line:39,column:55}},loc:{start:{line:39,column:72},end:{line:43,column:13}},line:39},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:115},end:{line:51,column:116}},loc:{start:{line:51,column:168},end:{line:60,column:9}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:62,column:16},end:{line:62,column:17}},loc:{start:{line:62,column:40},end:{line:70,column:9}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:23},end:{line:146,column:5}},line:118},"7":{name:"(anonymous_7)",decl:{start:{line:158,column:4},end:{line:158,column:5}},loc:{start:{line:158,column:44},end:{line:221,column:5}},line:158},"8":{name:"(anonymous_8)",decl:{start:{line:198,column:33},end:{line:198,column:34}},loc:{start:{line:198,column:47},end:{line:198,column:110}},line:198},"9":{name:"(anonymous_9)",decl:{start:{line:216,column:33},end:{line:216,column:34}},loc:{start:{line:216,column:47},end:{line:216,column:110}},line:216}},branchMap:{"0":{loc:{start:{line:38,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:38,column:8},end:{line:44,column:9}},{start:{line:38,column:8},end:{line:44,column:9}}],line:38},"1":{loc:{start:{line:40,column:16},end:{line:42,column:17}},type:"if",locations:[{start:{line:40,column:16},end:{line:42,column:17}},{start:{line:40,column:16},end:{line:42,column:17}}],line:40},"2":{loc:{start:{line:52,column:12},end:{line:59,column:13}},type:"if",locations:[{start:{line:52,column:12},end:{line:59,column:13}},{start:{line:52,column:12},end:{line:59,column:13}}],line:52},"3":{loc:{start:{line:61,column:29},end:{line:61,column:66}},type:"binary-expr",locations:[{start:{line:61,column:29},end:{line:61,column:42}},{start:{line:61,column:46},end:{line:61,column:66}}],line:61},"4":{loc:{start:{line:63,column:25},end:{line:63,column:70}},type:"cond-expr",locations:[{start:{line:63,column:46},end:{line:63,column:65}},{start:{line:63,column:68},end:{line:63,column:70}}],line:63},"5":{loc:{start:{line:72,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:72,column:8},end:{line:74,column:9}},{start:{line:72,column:8},end:{line:74,column:9}}],line:72},"6":{loc:{start:{line:88,column:8},end:{line:99,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:99,column:9}},{start:{line:88,column:8},end:{line:99,column:9}}],line:88},"7":{loc:{start:{line:101,column:8},end:{line:108,column:9}},type:"if",locations:[{start:{line:101,column:8},end:{line:108,column:9}},{start:{line:101,column:8},end:{line:108,column:9}}],line:101},"8":{loc:{start:{line:111,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:115,column:9}},{start:{line:111,column:8},end:{line:115,column:9}}],line:111},"9":{loc:{start:{line:124,column:8},end:{line:126,column:9}},type:"if",locations:[{start:{line:124,column:8},end:{line:126,column:9}},{start:{line:124,column:8},end:{line:126,column:9}}],line:124},"10":{loc:{start:{line:127,column:8},end:{line:129,column:9}},type:"if",locations:[{start:{line:127,column:8},end:{line:129,column:9}},{start:{line:127,column:8},end:{line:129,column:9}}],line:127},"11":{loc:{start:{line:130,column:8},end:{line:132,column:9}},type:"if",locations:[{start:{line:130,column:8},end:{line:132,column:9}},{start:{line:130,column:8},end:{line:132,column:9}}],line:130},"12":{loc:{start:{line:133,column:8},end:{line:135,column:9}},type:"if",locations:[{start:{line:133,column:8},end:{line:135,column:9}},{start:{line:133,column:8},end:{line:135,column:9}}],line:133},"13":{loc:{start:{line:136,column:8},end:{line:138,column:9}},type:"if",locations:[{start:{line:136,column:8},end:{line:138,column:9}},{start:{line:136,column:8},end:{line:138,column:9}}],line:136},"14":{loc:{start:{line:140,column:8},end:{line:142,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:142,column:9}},{start:{line:140,column:8},end:{line:142,column:9}}],line:140},"15":{loc:{start:{line:159,column:22},end:{line:159,column:68}},type:"cond-expr",locations:[{start:{line:159,column:48},end:{line:159,column:57}},{start:{line:159,column:60},end:{line:159,column:68}}],line:159},"16":{loc:{start:{line:169,column:8},end:{line:176,column:9}},type:"if",locations:[{start:{line:169,column:8},end:{line:176,column:9}},{start:{line:169,column:8},end:{line:176,column:9}}],line:169},"17":{loc:{start:{line:170,column:12},end:{line:172,column:13}},type:"if",locations:[{start:{line:170,column:12},end:{line:172,column:13}},{start:{line:170,column:12},end:{line:172,column:13}}],line:170},"18":{loc:{start:{line:173,column:12},end:{line:175,column:13}},type:"if",locations:[{start:{line:173,column:12},end:{line:175,column:13}},{start:{line:173,column:12},end:{line:175,column:13}}],line:173},"19":{loc:{start:{line:183,column:38},end:{line:185,column:16}},type:"cond-expr",locations:[{start:{line:184,column:14},end:{line:184,column:130}},{start:{line:185,column:14},end:{line:185,column:16}}],line:183},"20":{loc:{start:{line:193,column:275},end:{line:195,column:51}},type:"cond-expr",locations:[{start:{line:194,column:26},end:{line:194,column:66}},{start:{line:195,column:26},end:{line:195,column:51}}],line:193},"21":{loc:{start:{line:202,column:41},end:{line:204,column:16}},type:"cond-expr",locations:[{start:{line:203,column:14},end:{line:203,column:136}},{start:{line:204,column:14},end:{line:204,column:16}}],line:202},"22":{loc:{start:{line:211,column:281},end:{line:213,column:51}},type:"cond-expr",locations:[{start:{line:212,column:26},end:{line:212,column:69}},{start:{line:213,column:26},end:{line:213,column:51}}],line:211}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/index.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { flags as oclifFlags } from \"@oclif/command\";\nimport { IConfig } from \"@oclif/config\";\nimport {\n  createTraceNavigationBenchmark,\n  Marker,\n  NavigationBenchmarkOptions,\n  networkConditions,\n  run,\n} from \"@tracerbench/core\";\nimport type { ChromeSpawnOptions } from \"@tracerbench/spawn-chrome\";\nimport Protocol from \"devtools-protocol\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { getConfig, TBBaseCommand } from \"../../command-config\";\nimport {\n  defaultFlagArgs,\n  fidelityLookup,\n  headlessFlags,\n} from \"../../command-config/default-flag-args\";\nimport {\n  CONTROL_ENV_OVERRIDE_ATTR,\n  EXPERIMENT_ENV_OVERRIDE_ATTR,\n  ITBConfig,\n} from \"../../command-config/tb-config\";\nimport { getEmulateDeviceSettingForKeyAndOrientation } from \"../../helpers/device-settings\";\nimport {\n  browserArgs,\n  config,\n  controlURL,\n  cpuThrottleRate,\n  debug,\n  emulateDevice,\n  emulateDeviceOrientation,\n  experimentURL,\n  fidelity,\n  headless,\n  isCIEnv,\n  markers,\n  network,\n  regressionThreshold,\n  report,\n  runtimeStats,\n  sampleTimeout,\n  socksPorts,\n  tbResultsFolder,\n} from \"../../helpers/flags\";\nimport {\n  chalkScheme,\n  checkEnvironmentSpecificOverride,\n  durationInSec,\n  parseMarkers,\n  timestamp,\n} from \"../../helpers/utils\";\nimport CompareAnalyze from \"./analyze\";\nimport CompareReport from \"./report\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst archiver = require(\"archiver\");\nexport interface ICompareFlags {\n  hideAnalysis: boolean;\n  browserArgs: string[];\n  cpuThrottleRate: number;\n  fidelity: number;\n  markers: Marker[];\n  network: Protocol.Network.EmulateNetworkConditionsRequest;\n  tbResultsFolder: string;\n  controlURL: string | undefined;\n  experimentURL: string | undefined;\n  runtimeStats: boolean;\n  emulateDevice?: string;\n  emulateDeviceOrientation?: string;\n  socksPorts?: [string, string] | [number, number] | undefined;\n  debug: boolean;\n  regressionThreshold?: number;\n  sampleTimeout: number;\n  headless: boolean;\n  config?: string;\n  report?: boolean;\n  isCIEnv?: boolean;\n}\n\nexport default class Compare extends TBBaseCommand {\n  public static description =\n    \"Compare the performance delta between an experiment and control\";\n  public static flags: oclifFlags.Input<any> = {\n    hideAnalysis: oclifFlags.boolean({\n      default: false,\n      description: \"Hide the the analysis output in terminal\",\n    }),\n    browserArgs: browserArgs({ required: true }),\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    fidelity: fidelity({ required: true }),\n    markers: markers({ required: true }),\n    network: network({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    controlURL: controlURL({ required: false }),\n    experimentURL: experimentURL({ required: false }),\n    emulateDevice: emulateDevice(),\n    emulateDeviceOrientation: emulateDeviceOrientation(),\n    socksPorts: socksPorts(),\n    regressionThreshold: regressionThreshold(),\n    sampleTimeout: sampleTimeout(),\n    config: config(),\n    runtimeStats,\n    report,\n    debug,\n    headless,\n    isCIEnv: isCIEnv(),\n  };\n  public compareFlags: ICompareFlags;\n  public parsedConfig: ITBConfig = defaultFlagArgs;\n  // flags explicitly specified within the cli when\n  // running the command. these will override all\n  public explicitFlags: string[];\n  public analyzedJSONString = \"\";\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    const { flags } = this.parse(Compare);\n    this.explicitFlags = argv;\n    this.compareFlags = flags as ICompareFlags;\n  }\n\n  // instantiated before this.run()\n  public async init(): Promise<void> {\n    const { flags } = this.parse(Compare);\n    this.parsedConfig = getConfig(flags.config, flags, this.explicitFlags);\n    this.compareFlags = flags as ICompareFlags;\n    await this.parseFlags();\n  }\n\n  public async run(): Promise<string> {\n    const { hideAnalysis } = this.compareFlags;\n    const [\n      controlSettings,\n      experimentSettings,\n    ] = this.generateControlExperimentServerConfig();\n\n    // this should be directly above the instantiation of the InitialRenderBenchmarks\n    if (this.parsedConfig.debug) {\n      Object.entries(this.parsedConfig).forEach(([key, value]) => {\n        if (value) {\n          this.log(`${key}: ${JSON.stringify(value)}`);\n        }\n      });\n    }\n\n    const benchmarks = {\n      control: createTraceNavigationBenchmark(...controlSettings),\n      experiment: createTraceNavigationBenchmark(...experimentSettings),\n    };\n\n    const sampleTimeout = this.parsedConfig.sampleTimeout;\n\n    const startTime = timestamp();\n    const results = (\n      await run(\n        [benchmarks.control, benchmarks.experiment],\n        this.compareFlags.fidelity,\n        (elasped, completed, remaining, group, iteration) => {\n          if (completed > 0) {\n            const average = elasped / completed;\n            const remainingSecs = Math.round((remaining * average) / 1000);\n            console.log(\n              \"%s %s %s seconds remaining\",\n              group.padStart(15),\n              iteration.toString().padStart(3),\n              `about ${remainingSecs}`.padStart(10)\n            );\n          } else {\n            console.log(\n              \"%s %s\",\n              group.padStart(15),\n              iteration.toString().padStart(3)\n            );\n          }\n        },\n        {\n          sampleTimeoutMs: sampleTimeout && sampleTimeout * 1000,\n        }\n      )\n    ).map(({ group, samples }) => {\n      const meta = samples.length > 0 ? samples[0].metadata : {};\n      return {\n        group,\n        set: group,\n        samples,\n        meta,\n      };\n    });\n    const endTime = timestamp();\n    if (!results[0].samples[0]) {\n      this.error(\n        `Could not sample from provided urls\\nCONTROL: ${this.parsedConfig.controlURL}\\nEXPERIMENT: ${this.parsedConfig.experimentURL}.`\n      );\n    }\n    const resultJSONPath = `${this.parsedConfig.tbResultsFolder}/compare.json`;\n\n    fs.writeFileSync(resultJSONPath, JSON.stringify(results));\n\n    const tracesDir = `${this.parsedConfig.tbResultsFolder}/traces`;\n    const zipOutput = fs.createWriteStream(\n      `${this.parsedConfig.tbResultsFolder}/traces.zip`\n    );\n    const archive = archiver(\"zip\", {\n      zlib: { level: 9 },\n    });\n    archive.directory(tracesDir, \"traces\");\n    archive.pipe(zipOutput);\n    archive.finalize();\n\n    // eslint:disable-next-line: max-line-length\n    const message = `${chalkScheme.blackBgGreen(\n      `    ${chalkScheme.white(\"SUCCESS!\")}    `\n    )} ${this.parsedConfig.fidelity} test samples took ${durationInSec(\n      endTime,\n      startTime\n    )} seconds`;\n\n    this.log(`\\n${message}`);\n\n    if (!hideAnalysis) {\n      this.analyzedJSONString = await CompareAnalyze.run([\n        resultJSONPath,\n        \"--fidelity\",\n        `${this.parsedConfig.fidelity}`,\n        \"--regressionThreshold\",\n        `${this.parsedConfig.regressionThreshold}`,\n        \"--isCIEnv\",\n        `${this.parsedConfig.isCIEnv}`,\n      ]);\n\n      fs.writeFileSync(\n        `${this.parsedConfig.tbResultsFolder}/report.json`,\n        this.analyzedJSONString\n      );\n    }\n\n    // if we want to run the CompareReport without calling a separate command\n    if (this.parsedConfig.report) {\n      await CompareReport.run([\n        \"--tbResultsFolder\",\n        `${this.parsedConfig.tbResultsFolder}`,\n        \"--config\",\n        `${this.parsedConfig.config}`,\n      ]);\n    }\n\n    // with debug flag output three files\n    // on config specifics\n    if (this.parsedConfig.debug) {\n      fs.writeFileSync(\n        `${this.parsedConfig.tbResultsFolder}/server-control-settings.json`,\n        JSON.stringify(Object.assign(controlSettings), null, 2)\n      );\n\n      fs.writeFileSync(\n        `${this.parsedConfig.tbResultsFolder}/server-experiment-settings.json`,\n        JSON.stringify(Object.assign(experimentSettings), null, 2)\n      );\n\n      fs.writeFileSync(\n        `${this.parsedConfig.tbResultsFolder}/compare-flags-settings.json`,\n        JSON.stringify(Object.assign(this.parsedConfig), null, 2)\n      );\n    }\n\n    return this.analyzedJSONString;\n  }\n\n  private async parseFlags(): Promise<void> {\n    const {\n      tbResultsFolder,\n      fidelity,\n      markers,\n      regressionThreshold,\n      headless,\n      controlURL,\n      experimentURL,\n    } = (this.parsedConfig as unknown) as ICompareFlags;\n\n    // modifies properties of flags that were not set\n    // during flag.parse(). these are intentionally\n    // not deconstructed as to maintain the mutable\n    // flags object state\n    if (typeof fidelity === \"string\") {\n      this.compareFlags.fidelity = parseInt(\n        (fidelityLookup as any)[fidelity],\n        10\n      );\n    }\n    if (typeof markers === \"string\") {\n      this.parsedConfig.markers = parseMarkers(markers);\n    }\n    if (typeof regressionThreshold === \"string\") {\n      this.parsedConfig.regressionThreshold = parseInt(regressionThreshold, 10);\n    }\n    if (typeof controlURL === undefined) {\n      this.error(\n        \"controlURL is required either in the tbconfig.json or as cli flag\"\n      );\n    }\n\n    if (typeof experimentURL === undefined) {\n      this.error(\n        \"experimentURL is required either in the tbconfig.json or as cli flag\"\n      );\n    }\n\n    // if headless flag is true include the headless flags\n    if (headless) {\n      this.parsedConfig.browserArgs = this.compareFlags.browserArgs.concat(\n        headlessFlags\n      );\n    }\n\n    // if the folder for the tracerbench results file\n    // does not exist then create it\n    fs.mkdirpSync(path.join(tbResultsFolder, \"traces\"));\n  }\n\n  /**\n   * Final result of the configs are in the following order:\n   *\n   * controlConfigs = tbconfig:controlBenchmarkEnvironment > command line > tbconfig > default\n   * experimentConfigs = tbconfig:experimentBenchmarkEnvironment > command line > tbconfig > default\n   *\n   * This functions handles the tsconfig:** part since it is assumed that parent function that passed input \"flags\"\n   * would've handled \"command line > tbconfig > default\"\n   *\n   * @param this.parsedConfig - Object containing configs parsed from the Command class\n   */\n  private generateControlExperimentServerConfig(): [\n    [string, string, Marker[], NavigationBenchmarkOptions],\n    [string, string, Marker[], NavigationBenchmarkOptions]\n  ] {\n    const stdio = this.parsedConfig.debug ? \"inherit\" : \"ignore\";\n    const controlBrowser: Partial<ChromeSpawnOptions> = {\n      stdio,\n      additionalArguments: this.compareFlags.browserArgs,\n    };\n    const experimentBrowser: Partial<ChromeSpawnOptions> = {\n      stdio,\n      additionalArguments: this.compareFlags.browserArgs,\n    };\n\n    // config for the browsers to leverage socks proxy\n    if (this.parsedConfig.socksPorts) {\n      if (controlBrowser.additionalArguments) {\n        controlBrowser.additionalArguments = controlBrowser.additionalArguments.concat(\n          [`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[0]}`]\n        );\n      }\n      if (experimentBrowser.additionalArguments) {\n        experimentBrowser.additionalArguments = experimentBrowser.additionalArguments.concat(\n          [`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[1]}`]\n        );\n      }\n    }\n    const controlNetwork: string = checkEnvironmentSpecificOverride(\n      \"network\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const controlEmulateDevice = checkEnvironmentSpecificOverride(\n      \"emulateDevice\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const controlEmulateDeviceOrientation = checkEnvironmentSpecificOverride(\n      \"emulateDeviceOrientation\",\n      this.compareFlags,\n      CONTROL_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentNetwork: string = checkEnvironmentSpecificOverride(\n      \"network\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentEmulateDevice = checkEnvironmentSpecificOverride(\n      \"emulateDevice\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n    const experimentEmulateDeviceOrientation = checkEnvironmentSpecificOverride(\n      \"emulateDeviceOrientation\",\n      this.compareFlags,\n      EXPERIMENT_ENV_OVERRIDE_ATTR,\n      this.parsedConfig\n    );\n\n    const controlDeviceSettings = controlEmulateDevice\n      ? getEmulateDeviceSettingForKeyAndOrientation(\n          controlEmulateDevice,\n          controlEmulateDeviceOrientation\n        )\n      : {};\n\n    const controlSettings: [\n      string,\n      string,\n      Marker[],\n      NavigationBenchmarkOptions\n    ] = [\n      \"control\",\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.compareFlags.controlURL!,\n      this.compareFlags.markers,\n      {\n        spawnOptions: controlBrowser,\n        pageSetupOptions: {\n          cpuThrottlingRate: checkEnvironmentSpecificOverride(\n            \"cpuThrottleRate\",\n            this.compareFlags,\n            CONTROL_ENV_OVERRIDE_ATTR,\n            this.parsedConfig\n          ),\n          ...controlDeviceSettings,\n          emulateNetworkConditions: controlNetwork\n            ? networkConditions[\n                controlNetwork as keyof typeof networkConditions\n              ]\n            : this.compareFlags.network,\n        },\n        traceOptions: {\n          captureV8RuntimeStats: this.compareFlags.runtimeStats,\n          saveTraceAs: (group, i) =>\n            `${this.compareFlags.tbResultsFolder}/traces/${group}${i}.json`,\n        },\n      },\n    ];\n\n    const experimentDeviceSettings = experimentEmulateDevice\n      ? getEmulateDeviceSettingForKeyAndOrientation(\n          experimentEmulateDevice,\n          experimentEmulateDeviceOrientation\n        )\n      : {};\n    const experimentSettings: [\n      string,\n      string,\n      Marker[],\n      NavigationBenchmarkOptions\n    ] = [\n      \"experiment\",\n      this.compareFlags.experimentURL!,\n      this.compareFlags.markers,\n      {\n        spawnOptions: experimentBrowser,\n\n        pageSetupOptions: {\n          cpuThrottlingRate: checkEnvironmentSpecificOverride(\n            \"cpuThrottleRate\",\n            this.compareFlags,\n            EXPERIMENT_ENV_OVERRIDE_ATTR,\n            this.parsedConfig\n          ),\n          ...experimentDeviceSettings,\n          emulateNetworkConditions: experimentNetwork\n            ? networkConditions[\n                experimentNetwork as keyof typeof networkConditions\n              ]\n            : this.compareFlags.network,\n        },\n        traceOptions: {\n          captureV8RuntimeStats: this.compareFlags.runtimeStats,\n          saveTraceAs: (group, i) =>\n            `${this.compareFlags.tbResultsFolder}/traces/${group}${i}.json`,\n        },\n      },\n    ];\n\n    return [controlSettings, experimentSettings];\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ccb564c182430842dd62b1fbb18c3cad3a187b42"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1q73d7sky0=function(){return actualCoverage;};}return actualCoverage;}cov_1q73d7sky0();cov_1q73d7sky0().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const command_1=(cov_1q73d7sky0().s[1]++,require("@oclif/command"));const core_1=(cov_1q73d7sky0().s[2]++,require("@tracerbench/core"));const fs=(cov_1q73d7sky0().s[3]++,require("fs-extra"));const path=(cov_1q73d7sky0().s[4]++,require("path"));const command_config_1=(cov_1q73d7sky0().s[5]++,require("../../command-config"));const default_flag_args_1=(cov_1q73d7sky0().s[6]++,require("../../command-config/default-flag-args"));const tb_config_1=(cov_1q73d7sky0().s[7]++,require("../../command-config/tb-config"));const device_settings_1=(cov_1q73d7sky0().s[8]++,require("../../helpers/device-settings"));const flags_1=(cov_1q73d7sky0().s[9]++,require("../../helpers/flags"));const utils_1=(cov_1q73d7sky0().s[10]++,require("../../helpers/utils"));const analyze_1=(cov_1q73d7sky0().s[11]++,require("./analyze"));const report_1=(cov_1q73d7sky0().s[12]++,require("./report"));// eslint-disable-next-line @typescript-eslint/no-var-requires
const archiver=(cov_1q73d7sky0().s[13]++,require("archiver"));class Compare extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_1q73d7sky0().f[0]++;cov_1q73d7sky0().s[14]++;super(argv,config);cov_1q73d7sky0().s[15]++;this.parsedConfig=default_flag_args_1.defaultFlagArgs;cov_1q73d7sky0().s[16]++;this.analyzedJSONString="";const{flags}=(cov_1q73d7sky0().s[17]++,this.parse(Compare));cov_1q73d7sky0().s[18]++;this.explicitFlags=argv;cov_1q73d7sky0().s[19]++;this.compareFlags=flags;}// instantiated before this.run()
async init(){cov_1q73d7sky0().f[1]++;const{flags}=(cov_1q73d7sky0().s[20]++,this.parse(Compare));cov_1q73d7sky0().s[21]++;this.parsedConfig=command_config_1.getConfig(flags.config,flags,this.explicitFlags);cov_1q73d7sky0().s[22]++;this.compareFlags=flags;cov_1q73d7sky0().s[23]++;await this.parseFlags();}async run(){cov_1q73d7sky0().f[2]++;const{hideAnalysis}=(cov_1q73d7sky0().s[24]++,this.compareFlags);const[controlSettings,experimentSettings]=(cov_1q73d7sky0().s[25]++,this.generateControlExperimentServerConfig());// this should be directly above the instantiation of the InitialRenderBenchmarks
cov_1q73d7sky0().s[26]++;if(this.parsedConfig.debug){cov_1q73d7sky0().b[0][0]++;cov_1q73d7sky0().s[27]++;Object.entries(this.parsedConfig).forEach(([key,value])=>{cov_1q73d7sky0().f[3]++;cov_1q73d7sky0().s[28]++;if(value){cov_1q73d7sky0().b[1][0]++;cov_1q73d7sky0().s[29]++;this.log(`${key}: ${JSON.stringify(value)}`);}else{cov_1q73d7sky0().b[1][1]++;}});}else{cov_1q73d7sky0().b[0][1]++;}const benchmarks=(cov_1q73d7sky0().s[30]++,{control:core_1.createTraceNavigationBenchmark(...controlSettings),experiment:core_1.createTraceNavigationBenchmark(...experimentSettings)});const sampleTimeout=(cov_1q73d7sky0().s[31]++,this.parsedConfig.sampleTimeout);const startTime=(cov_1q73d7sky0().s[32]++,utils_1.timestamp());const results=(cov_1q73d7sky0().s[33]++,(await core_1.run([benchmarks.control,benchmarks.experiment],this.compareFlags.fidelity,(elasped,completed,remaining,group,iteration)=>{cov_1q73d7sky0().f[4]++;cov_1q73d7sky0().s[34]++;if(completed>0){cov_1q73d7sky0().b[2][0]++;const average=(cov_1q73d7sky0().s[35]++,elasped/completed);const remainingSecs=(cov_1q73d7sky0().s[36]++,Math.round(remaining*average/1000));cov_1q73d7sky0().s[37]++;console.log("%s %s %s seconds remaining",group.padStart(15),iteration.toString().padStart(3),`about ${remainingSecs}`.padStart(10));}else{cov_1q73d7sky0().b[2][1]++;cov_1q73d7sky0().s[38]++;console.log("%s %s",group.padStart(15),iteration.toString().padStart(3));}},{sampleTimeoutMs:(cov_1q73d7sky0().b[3][0]++,sampleTimeout)&&(cov_1q73d7sky0().b[3][1]++,sampleTimeout*1000)})).map(({group,samples})=>{cov_1q73d7sky0().f[5]++;const meta=(cov_1q73d7sky0().s[39]++,samples.length>0?(cov_1q73d7sky0().b[4][0]++,samples[0].metadata):(cov_1q73d7sky0().b[4][1]++,{}));cov_1q73d7sky0().s[40]++;return{group,set:group,samples,meta};}));const endTime=(cov_1q73d7sky0().s[41]++,utils_1.timestamp());cov_1q73d7sky0().s[42]++;if(!results[0].samples[0]){cov_1q73d7sky0().b[5][0]++;cov_1q73d7sky0().s[43]++;this.error(`Could not sample from provided urls\nCONTROL: ${this.parsedConfig.controlURL}\nEXPERIMENT: ${this.parsedConfig.experimentURL}.`);}else{cov_1q73d7sky0().b[5][1]++;}const resultJSONPath=(cov_1q73d7sky0().s[44]++,`${this.parsedConfig.tbResultsFolder}/compare.json`);cov_1q73d7sky0().s[45]++;fs.writeFileSync(resultJSONPath,JSON.stringify(results));const tracesDir=(cov_1q73d7sky0().s[46]++,`${this.parsedConfig.tbResultsFolder}/traces`);const zipOutput=(cov_1q73d7sky0().s[47]++,fs.createWriteStream(`${this.parsedConfig.tbResultsFolder}/traces.zip`));const archive=(cov_1q73d7sky0().s[48]++,archiver("zip",{zlib:{level:9}}));cov_1q73d7sky0().s[49]++;archive.directory(tracesDir,"traces");cov_1q73d7sky0().s[50]++;archive.pipe(zipOutput);cov_1q73d7sky0().s[51]++;archive.finalize();// eslint:disable-next-line: max-line-length
const message=(cov_1q73d7sky0().s[52]++,`${utils_1.chalkScheme.blackBgGreen(`    ${utils_1.chalkScheme.white("SUCCESS!")}    `)} ${this.parsedConfig.fidelity} test samples took ${utils_1.durationInSec(endTime,startTime)} seconds`);cov_1q73d7sky0().s[53]++;this.log(`\n${message}`);cov_1q73d7sky0().s[54]++;if(!hideAnalysis){cov_1q73d7sky0().b[6][0]++;cov_1q73d7sky0().s[55]++;this.analyzedJSONString=await analyze_1.default.run([resultJSONPath,"--fidelity",`${this.parsedConfig.fidelity}`,"--regressionThreshold",`${this.parsedConfig.regressionThreshold}`,"--isCIEnv",`${this.parsedConfig.isCIEnv}`]);cov_1q73d7sky0().s[56]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/report.json`,this.analyzedJSONString);}else{cov_1q73d7sky0().b[6][1]++;}// if we want to run the CompareReport without calling a separate command
cov_1q73d7sky0().s[57]++;if(this.parsedConfig.report){cov_1q73d7sky0().b[7][0]++;cov_1q73d7sky0().s[58]++;await report_1.default.run(["--tbResultsFolder",`${this.parsedConfig.tbResultsFolder}`,"--config",`${this.parsedConfig.config}`]);}else{cov_1q73d7sky0().b[7][1]++;}// with debug flag output three files
// on config specifics
cov_1q73d7sky0().s[59]++;if(this.parsedConfig.debug){cov_1q73d7sky0().b[8][0]++;cov_1q73d7sky0().s[60]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/server-control-settings.json`,JSON.stringify(Object.assign(controlSettings),null,2));cov_1q73d7sky0().s[61]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/server-experiment-settings.json`,JSON.stringify(Object.assign(experimentSettings),null,2));cov_1q73d7sky0().s[62]++;fs.writeFileSync(`${this.parsedConfig.tbResultsFolder}/compare-flags-settings.json`,JSON.stringify(Object.assign(this.parsedConfig),null,2));}else{cov_1q73d7sky0().b[8][1]++;}cov_1q73d7sky0().s[63]++;return this.analyzedJSONString;}async parseFlags(){cov_1q73d7sky0().f[6]++;const{tbResultsFolder,fidelity,markers,regressionThreshold,headless,controlURL,experimentURL}=(cov_1q73d7sky0().s[64]++,this.parsedConfig);// modifies properties of flags that were not set
// during flag.parse(). these are intentionally
// not deconstructed as to maintain the mutable
// flags object state
cov_1q73d7sky0().s[65]++;if(typeof fidelity==="string"){cov_1q73d7sky0().b[9][0]++;cov_1q73d7sky0().s[66]++;this.compareFlags.fidelity=parseInt(default_flag_args_1.fidelityLookup[fidelity],10);}else{cov_1q73d7sky0().b[9][1]++;}cov_1q73d7sky0().s[67]++;if(typeof markers==="string"){cov_1q73d7sky0().b[10][0]++;cov_1q73d7sky0().s[68]++;this.parsedConfig.markers=utils_1.parseMarkers(markers);}else{cov_1q73d7sky0().b[10][1]++;}cov_1q73d7sky0().s[69]++;if(typeof regressionThreshold==="string"){cov_1q73d7sky0().b[11][0]++;cov_1q73d7sky0().s[70]++;this.parsedConfig.regressionThreshold=parseInt(regressionThreshold,10);}else{cov_1q73d7sky0().b[11][1]++;}cov_1q73d7sky0().s[71]++;if(typeof controlURL===undefined){cov_1q73d7sky0().b[12][0]++;cov_1q73d7sky0().s[72]++;this.error("controlURL is required either in the tbconfig.json or as cli flag");}else{cov_1q73d7sky0().b[12][1]++;}cov_1q73d7sky0().s[73]++;if(typeof experimentURL===undefined){cov_1q73d7sky0().b[13][0]++;cov_1q73d7sky0().s[74]++;this.error("experimentURL is required either in the tbconfig.json or as cli flag");}else{cov_1q73d7sky0().b[13][1]++;}// if headless flag is true include the headless flags
cov_1q73d7sky0().s[75]++;if(headless){cov_1q73d7sky0().b[14][0]++;cov_1q73d7sky0().s[76]++;this.parsedConfig.browserArgs=this.compareFlags.browserArgs.concat(default_flag_args_1.headlessFlags);}else{cov_1q73d7sky0().b[14][1]++;}// if the folder for the tracerbench results file
// does not exist then create it
cov_1q73d7sky0().s[77]++;fs.mkdirpSync(path.join(tbResultsFolder,"traces"));}/**
     * Final result of the configs are in the following order:
     *
     * controlConfigs = tbconfig:controlBenchmarkEnvironment > command line > tbconfig > default
     * experimentConfigs = tbconfig:experimentBenchmarkEnvironment > command line > tbconfig > default
     *
     * This functions handles the tsconfig:** part since it is assumed that parent function that passed input "flags"
     * would've handled "command line > tbconfig > default"
     *
     * @param this.parsedConfig - Object containing configs parsed from the Command class
     */generateControlExperimentServerConfig(){cov_1q73d7sky0().f[7]++;const stdio=(cov_1q73d7sky0().s[78]++,this.parsedConfig.debug?(cov_1q73d7sky0().b[15][0]++,"inherit"):(cov_1q73d7sky0().b[15][1]++,"ignore"));const controlBrowser=(cov_1q73d7sky0().s[79]++,{stdio,additionalArguments:this.compareFlags.browserArgs});const experimentBrowser=(cov_1q73d7sky0().s[80]++,{stdio,additionalArguments:this.compareFlags.browserArgs});// config for the browsers to leverage socks proxy
cov_1q73d7sky0().s[81]++;if(this.parsedConfig.socksPorts){cov_1q73d7sky0().b[16][0]++;cov_1q73d7sky0().s[82]++;if(controlBrowser.additionalArguments){cov_1q73d7sky0().b[17][0]++;cov_1q73d7sky0().s[83]++;controlBrowser.additionalArguments=controlBrowser.additionalArguments.concat([`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[0]}`]);}else{cov_1q73d7sky0().b[17][1]++;}cov_1q73d7sky0().s[84]++;if(experimentBrowser.additionalArguments){cov_1q73d7sky0().b[18][0]++;cov_1q73d7sky0().s[85]++;experimentBrowser.additionalArguments=experimentBrowser.additionalArguments.concat([`--proxy-server=socks5://0.0.0.0:${this.parsedConfig.socksPorts[1]}`]);}else{cov_1q73d7sky0().b[18][1]++;}}else{cov_1q73d7sky0().b[16][1]++;}const controlNetwork=(cov_1q73d7sky0().s[86]++,utils_1.checkEnvironmentSpecificOverride("network",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlEmulateDevice=(cov_1q73d7sky0().s[87]++,utils_1.checkEnvironmentSpecificOverride("emulateDevice",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlEmulateDeviceOrientation=(cov_1q73d7sky0().s[88]++,utils_1.checkEnvironmentSpecificOverride("emulateDeviceOrientation",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentNetwork=(cov_1q73d7sky0().s[89]++,utils_1.checkEnvironmentSpecificOverride("network",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentEmulateDevice=(cov_1q73d7sky0().s[90]++,utils_1.checkEnvironmentSpecificOverride("emulateDevice",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const experimentEmulateDeviceOrientation=(cov_1q73d7sky0().s[91]++,utils_1.checkEnvironmentSpecificOverride("emulateDeviceOrientation",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig));const controlDeviceSettings=(cov_1q73d7sky0().s[92]++,controlEmulateDevice?(cov_1q73d7sky0().b[19][0]++,device_settings_1.getEmulateDeviceSettingForKeyAndOrientation(controlEmulateDevice,controlEmulateDeviceOrientation)):(cov_1q73d7sky0().b[19][1]++,{}));const controlSettings=(cov_1q73d7sky0().s[93]++,["control",// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
this.compareFlags.controlURL,this.compareFlags.markers,{spawnOptions:controlBrowser,pageSetupOptions:Object.assign(Object.assign({cpuThrottlingRate:utils_1.checkEnvironmentSpecificOverride("cpuThrottleRate",this.compareFlags,tb_config_1.CONTROL_ENV_OVERRIDE_ATTR,this.parsedConfig)},controlDeviceSettings),{emulateNetworkConditions:controlNetwork?(cov_1q73d7sky0().b[20][0]++,core_1.networkConditions[controlNetwork]):(cov_1q73d7sky0().b[20][1]++,this.compareFlags.network)}),traceOptions:{captureV8RuntimeStats:this.compareFlags.runtimeStats,saveTraceAs:(group,i)=>{cov_1q73d7sky0().f[8]++;cov_1q73d7sky0().s[94]++;return`${this.compareFlags.tbResultsFolder}/traces/${group}${i}.json`;}}}]);const experimentDeviceSettings=(cov_1q73d7sky0().s[95]++,experimentEmulateDevice?(cov_1q73d7sky0().b[21][0]++,device_settings_1.getEmulateDeviceSettingForKeyAndOrientation(experimentEmulateDevice,experimentEmulateDeviceOrientation)):(cov_1q73d7sky0().b[21][1]++,{}));const experimentSettings=(cov_1q73d7sky0().s[96]++,["experiment",this.compareFlags.experimentURL,this.compareFlags.markers,{spawnOptions:experimentBrowser,pageSetupOptions:Object.assign(Object.assign({cpuThrottlingRate:utils_1.checkEnvironmentSpecificOverride("cpuThrottleRate",this.compareFlags,tb_config_1.EXPERIMENT_ENV_OVERRIDE_ATTR,this.parsedConfig)},experimentDeviceSettings),{emulateNetworkConditions:experimentNetwork?(cov_1q73d7sky0().b[22][0]++,core_1.networkConditions[experimentNetwork]):(cov_1q73d7sky0().b[22][1]++,this.compareFlags.network)}),traceOptions:{captureV8RuntimeStats:this.compareFlags.runtimeStats,saveTraceAs:(group,i)=>{cov_1q73d7sky0().f[9]++;cov_1q73d7sky0().s[97]++;return`${this.compareFlags.tbResultsFolder}/traces/${group}${i}.json`;}}}]);cov_1q73d7sky0().s[98]++;return[controlSettings,experimentSettings];}}cov_1q73d7sky0().s[99]++;exports.default=Compare;cov_1q73d7sky0().s[100]++;Compare.description="Compare the performance delta between an experiment and control";cov_1q73d7sky0().s[101]++;Compare.flags={hideAnalysis:command_1.flags.boolean({default:false,description:"Hide the the analysis output in terminal"}),browserArgs:flags_1.browserArgs({required:true}),cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),fidelity:flags_1.fidelity({required:true}),markers:flags_1.markers({required:true}),network:flags_1.network({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),controlURL:flags_1.controlURL({required:false}),experimentURL:flags_1.experimentURL({required:false}),emulateDevice:flags_1.emulateDevice(),emulateDeviceOrientation:flags_1.emulateDeviceOrientation(),socksPorts:flags_1.socksPorts(),regressionThreshold:flags_1.regressionThreshold(),sampleTimeout:flags_1.sampleTimeout(),config:flags_1.config(),runtimeStats:flags_1.runtimeStats,report:flags_1.report,debug:flags_1.debug,headless:flags_1.headless,isCIEnv:flags_1.isCIEnv()};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,