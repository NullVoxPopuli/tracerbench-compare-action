{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/helpers/print-to-pdf.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/helpers/print-to-pdf.ts"],"names":[],"mappings":";;AAAA,qEAAsD;AACtD,uCAAyC;AACzC,+BAA+B;AAE/B;;;;;;GAMG;AACY,KAAK,UAAU,UAAU,CACtC,GAAW,EACX,UAAkB;IAElB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC;QACtB;YACE,KAAK,EAAE,8BAA8B;YACrC,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,gBAAgB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAC1C,CAAC;SACF;KACF,CAAC,CAAC;IAEH,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,OAAO;AACT,CAAC;AAlBD,6BAkBC;AAED,KAAK,UAAU,gBAAgB,CAC7B,GAAW,EACX,UAAkB;IAElB,MAAM,MAAM,GAAG,qCAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/C,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC;QAClC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAC7D,GAAG,EAAE,aAAa;SACnB,CAAC,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEpD,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/B,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,GAAG,EAAE,CAAC;SACpC,CAAC,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QAExD,wBAAa,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAEvD,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;KACtB;YAAS;QACR,IAAI,MAAM,EAAE;YACV,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;SACxB;KACF;AACH,CAAC","sourcesContent":["import { spawnChrome } from \"chrome-debugging-client\";\nimport { writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\n\n/**\n * Spawn a chrome process and visit the given url. Wait until page load event is fired\n * and then create PDF.\n *\n * @param url - URL of page for chrome to visit\n * @param outputPath - Output pdf to this file\n */\nexport default async function printToPDF(\n  url: string,\n  outputPath: string\n): Promise<void> {\n  const tasks = new listr([\n    {\n      title: \"Generating Benchmark Reports\",\n      task: async () => {\n        await chromePrintToPDF(url, outputPath);\n      },\n    },\n  ]);\n\n  await tasks.run().catch((error) => {\n    throw new Error(error);\n  });\n\n  return;\n}\n\nasync function chromePrintToPDF(\n  url: string,\n  outputPath: string\n): Promise<void> {\n  const chrome = spawnChrome({ headless: true });\n  try {\n    const browser = chrome.connection;\n    const { targetId } = await browser.send(\"Target.createTarget\", {\n      url: \"about:blank\",\n    });\n    const page = await browser.attachToTarget(targetId);\n\n    await page.send(\"Page.enable\");\n    await Promise.all([\n      page.until(\"Page.loadEventFired\"),\n      page.send(\"Page.navigate\", { url }),\n    ]);\n    const { data } = await page.send(\"Page.printToPDF\", {});\n\n    writeFileSync(outputPath, Buffer.from(data, \"base64\"));\n\n    await chrome.close();\n  } finally {\n    if (chrome) {\n      await chrome.dispose();\n    }\n  }\n}\n"]}