{"version":3,"file":"/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts","sources":["/Users/malynch/D/tracerbench/packages/cli/src/helpers/create-consumable-html.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Stats } from \"@tracerbench/stats\";\nimport { readFileSync } from \"fs-extra\";\nimport * as Handlebars from \"handlebars\";\nimport * as path from \"path\";\n\nimport { ITBConfig } from \"../command-config\";\nimport { defaultFlagArgs } from \"../command-config/default-flag-args\";\nimport { convertMicrosecondsToMS } from \"./utils\";\n\nexport interface Sample {\n  duration: number;\n  js: number;\n  phases: Array<{\n    phase: string;\n    start: number;\n    duration: number;\n  }>;\n  gc: any;\n  blinkGC: any;\n}\n\nexport interface ITracerBenchTraceResult {\n  meta: {\n    browserVersion: string;\n    cpus: string[];\n  };\n  samples: Sample[];\n  set: string;\n}\n\nexport interface IFormatedSamples {\n  min: number;\n  q1: number;\n  median: number;\n  q3: number;\n  max: number;\n  outliers: number[];\n  samplesMS: number[];\n}\n\nexport interface HTMLSectionRenderData {\n  isSignificant: boolean;\n  ciMin: number;\n  ciMax: number;\n  hlDiff: number;\n  phase: string;\n  identifierHash: string;\n  sampleCount: number;\n  servers: any;\n  controlFormatedSamples: string;\n  experimentFormatedSamples: string;\n}\n\ninterface ValuesByPhase {\n  [key: string]: number[];\n}\n\nexport const PAGE_LOAD_TIME = \"duration\";\n\nconst CHART_CSS_PATH = path.join(__dirname, \"../static/chart-bootstrap.css\");\nconst CHART_JS_PATH = path.join(\n  __dirname,\n  \"../static/chartjs-2.9.3-chart.min.js\"\n);\nconst REPORT_PATH = path.join(__dirname, \"../static/report-template.hbs\");\nconst PHASE_DETAIL_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-detail-partial.hbs\"\n);\nconst PHASE_CHART_JS_PARTIAL = path.join(\n  __dirname,\n  \"../static/phase-chart-js-partial.hbs\"\n);\n\nconst CHART_CSS = readFileSync(CHART_CSS_PATH, \"utf8\");\nconst CHART_JS = readFileSync(CHART_JS_PATH, \"utf8\");\nconst PHASE_DETAIL_TEMPLATE_RAW = readFileSync(PHASE_DETAIL_PARTIAL, \"utf8\");\nconst PHASE_CHART_JS_TEMPLATE_RAW = readFileSync(\n  PHASE_CHART_JS_PARTIAL,\n  \"utf8\"\n);\nlet REPORT_TEMPLATE_RAW = readFileSync(REPORT_PATH, \"utf8\");\n\nREPORT_TEMPLATE_RAW = REPORT_TEMPLATE_RAW.toString()\n  .replace(\n    \"{{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}\",\n    `<style>${CHART_CSS}</style>`\n  )\n  .replace(\"{{!-- TRACERBENCH-CHART-JS --}}\", `<script>${CHART_JS}</script>`);\n\nHandlebars.registerPartial(\"phaseChartJSSection\", PHASE_CHART_JS_TEMPLATE_RAW);\nHandlebars.registerPartial(\"phaseDetailSection\", PHASE_DETAIL_TEMPLATE_RAW);\n/**\n * Camel case helper\n */\nHandlebars.registerHelper(\"toCamel\", (val) => {\n  return val.replace(/-([a-z])/g, (g: string) => g[1].toUpperCase());\n});\n\n/**\n * Negative means slower\n */\nHandlebars.registerHelper(\"isFaster\", (analysis) => {\n  return analysis.hlDiff > 0;\n});\n\n/**\n * Absolute number helper\n */\nHandlebars.registerHelper(\"abs\", (num) => {\n  return Math.abs(num);\n});\n\n/**\n * Sort the given numbers by their absolute values\n */\nHandlebars.registerHelper(\"absSort\", (num1, num2, position) => {\n  const sorted = [Math.abs(num1), Math.abs(num2)];\n  sorted.sort((a, b) => a - b);\n  return sorted[position];\n});\n\n/**\n * Extract the phases and page load time latency into sorted buckets by phase\n *\n * @param samples - Array of \"sample\" objects\n * @param valueGen - Calls this function to extract the value from the phase. A\n *   \"phase\" is passed containing duration and start\n */\nexport function bucketPhaseValues(\n  samples: Sample[],\n  valueGen: any = (a: any) => a.duration\n): ValuesByPhase {\n  const buckets: { [key: string]: number[] } = { [PAGE_LOAD_TIME]: [] };\n\n  samples.forEach((sample: Sample) => {\n    buckets[PAGE_LOAD_TIME].push(sample[PAGE_LOAD_TIME]);\n\n    sample.phases.forEach((phaseData) => {\n      const bucket = buckets[phaseData.phase] || [];\n      bucket.push(valueGen(phaseData));\n      buckets[phaseData.phase] = bucket;\n    });\n  });\n\n  return buckets;\n}\n\nexport interface ParsedTitleConfigs {\n  servers: Array<{ name: string }>;\n  plotTitle: string | undefined;\n  browserVersion: string;\n}\n\n/**\n * Override the default server and plot title attributes\n *\n * @param tbConfig - Concerned only about the \"servers\" and \"plotTitle\"\n *   attribute\n * @param version - Browser version\n * @param plotTitle - Optional explicit title from cli flag\n */\nexport function resolveTitles(\n  tbConfig: Partial<ITBConfig>,\n  version: string,\n  plotTitle?: string\n): ParsedTitleConfigs {\n  const reportTitles = {\n    servers: [{ name: \"Control\" }, { name: \"Experiment\" }],\n    plotTitle: tbConfig.plotTitle\n      ? tbConfig.plotTitle\n      : defaultFlagArgs.plotTitle,\n    browserVersion: version,\n  };\n\n  if (tbConfig.servers) {\n    reportTitles.servers = tbConfig.servers.map((titleConfig, idx) => {\n      if (idx === 0) {\n        return { name: `Control: ${titleConfig.name}` };\n      } else {\n        return { name: `Experiment: ${titleConfig.name}` };\n      }\n    });\n  }\n\n  // if passing an explicit plotTitle via cli flag this trumps\n  // the tbConfig.plotTitle and defaults\n  if (plotTitle) {\n    reportTitles.plotTitle = plotTitle;\n  }\n\n  return reportTitles;\n}\n\n/**\n * Generate the HTML render data for the cumulative chart. Ensure to convert to\n * milliseconds for presentation\n *\n * @param controlData - Samples of the benchmark of control server\n * @param experimentData - Samples of the benchmark experiment server\n */\nexport function buildCumulativeChartData(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult\n): { [key: string]: string } {\n  const cumulativeValueFunc = (a: { [key: string]: number }): number =>\n    convertMicrosecondsToMS(a.start + a.duration);\n\n  const valuesByPhaseControl = bucketPhaseValues(\n    controlData.samples,\n    cumulativeValueFunc\n  );\n  const valuesByPhaseExperiment = bucketPhaseValues(\n    experimentData.samples,\n    cumulativeValueFunc\n  );\n  const phases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  return {\n    categories: JSON.stringify(phases),\n    controlData: JSON.stringify(phases.map((k) => valuesByPhaseControl[k])),\n    experimentData: JSON.stringify(\n      phases.map((k) => valuesByPhaseExperiment[k])\n    ),\n  };\n}\n\n/**\n * Call the stats helper functions to generate the confidence interval and\n * Hodges–Lehmann estimator. Format the data into HTMLSectionRenderData\n * structure.\n *\n * @param controlValues - Values for the control for the phase\n * @param experimentValues - Values for the experiment for the phase\n * @param phaseName - Name of the phase the values represent\n */\nexport function formatPhaseData(\n  controlValues: number[],\n  experimentValues: number[],\n  phaseName: string\n): HTMLSectionRenderData {\n  const stats = new Stats({\n    control: controlValues,\n    experiment: experimentValues,\n    name: \"output\",\n  });\n  const isNotSignificant =\n    (stats.confidenceInterval.min < 0 && 0 < stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min > 0 && 0 > stats.confidenceInterval.max) ||\n    (stats.confidenceInterval.min === 0 && stats.confidenceInterval.max === 0);\n\n  return {\n    phase: phaseName,\n    identifierHash: phaseName,\n    isSignificant: !isNotSignificant,\n    sampleCount: stats.sampleCount.control,\n    ciMin: stats.confidenceInterval.min,\n    ciMax: stats.confidenceInterval.max,\n    hlDiff: stats.estimator,\n    servers: undefined,\n    controlFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.control.min,\n      q1: stats.sevenFigureSummary.control[25],\n      median: stats.sevenFigureSummary.control[50],\n      q3: stats.sevenFigureSummary.control[75],\n      max: stats.sevenFigureSummary.control.max,\n      outliers: stats.outliers.control.outliers,\n      samplesMS: stats.controlMS,\n    }),\n    experimentFormatedSamples: JSON.stringify({\n      min: stats.sevenFigureSummary.experiment.min,\n      q1: stats.sevenFigureSummary.experiment[25],\n      median: stats.sevenFigureSummary.experiment[50],\n      q3: stats.sevenFigureSummary.experiment[75],\n      max: stats.sevenFigureSummary.experiment.max,\n      outliers: stats.outliers.experiment.outliers,\n      samplesMS: stats.experimentMS,\n    }),\n  };\n}\n\n/**\n * Prioritize the phase that has the largest difference in regression first.\n */\nexport function phaseSorter(\n  a: HTMLSectionRenderData,\n  b: HTMLSectionRenderData\n): number {\n  const A_ON_TOP = -1;\n  const B_ON_TOP = 1;\n\n  if (a.isSignificant) {\n    if (!b.isSignificant) {\n      return A_ON_TOP;\n    } else {\n      // If both are significant prefer slowest one\n      return a.hlDiff - b.hlDiff;\n    }\n  }\n\n  if (b.isSignificant) {\n    if (!a.isSignificant) {\n      return B_ON_TOP;\n    }\n  }\n\n  return 0;\n}\n\nexport function generateDataForHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  reportTitles: ParsedTitleConfigs\n): {\n  durationSection: HTMLSectionRenderData;\n  subPhaseSections: HTMLSectionRenderData[];\n} {\n  const valuesByPhaseControl = bucketPhaseValues(controlData.samples);\n  const valuesByPhaseExperiment = bucketPhaseValues(experimentData.samples);\n  const subPhases = Object.keys(valuesByPhaseControl).filter(\n    (k) => k !== PAGE_LOAD_TIME\n  );\n\n  const durationSection = formatPhaseData(\n    valuesByPhaseControl[PAGE_LOAD_TIME],\n    valuesByPhaseExperiment[PAGE_LOAD_TIME],\n    PAGE_LOAD_TIME\n  );\n\n  const subPhaseSections: HTMLSectionRenderData[] = subPhases.map((phase) => {\n    const controlValues = valuesByPhaseControl[phase];\n    const experimentValues = valuesByPhaseExperiment[phase];\n    const renderDataForPhase = formatPhaseData(\n      controlValues,\n      experimentValues,\n      phase\n    );\n\n    renderDataForPhase.servers = reportTitles.servers;\n    return renderDataForPhase as HTMLSectionRenderData;\n  });\n\n  durationSection.servers = reportTitles.servers;\n  return { durationSection, subPhaseSections };\n}\n\nexport default function createConsumableHTML(\n  controlData: ITracerBenchTraceResult,\n  experimentData: ITracerBenchTraceResult,\n  tbConfig: ITBConfig,\n  plotTitle?: string\n): string {\n  const reportTitles = resolveTitles(\n    tbConfig,\n    controlData.meta.browserVersion,\n    plotTitle\n  );\n  const { durationSection, subPhaseSections } = generateDataForHTML(\n    controlData,\n    experimentData,\n    reportTitles\n  );\n\n  const template = Handlebars.compile(REPORT_TEMPLATE_RAW);\n\n  return template({\n    cumulativeChartData: buildCumulativeChartData(controlData, experimentData),\n    durationSection,\n    reportTitles,\n    subPhaseSections,\n    configsSJSONString: JSON.stringify(tbConfig, null, 4),\n    sectionFormattedDataJson: JSON.stringify(subPhaseSections),\n  });\n}\n"]}