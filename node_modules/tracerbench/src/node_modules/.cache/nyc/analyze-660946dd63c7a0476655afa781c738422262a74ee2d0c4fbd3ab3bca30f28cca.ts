"use strict";function cov_1csyqvtbq(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts";var hash="534597cfceaf0fb172fab513500636d08cae9d3e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:25},end:{line:4,column:56}},"3":{start:{line:5,column:15},end:{line:5,column:44}},"4":{start:{line:6,column:16},end:{line:6,column:46}},"5":{start:{line:7,column:30},end:{line:7,column:74}},"6":{start:{line:8,column:35},end:{line:37,column:4}},"7":{start:{line:11,column:12},end:{line:11,column:32}},"8":{start:{line:12,column:12},end:{line:12,column:62}},"9":{start:{line:15,column:29},end:{line:15,column:55}},"10":{start:{line:16,column:28},end:{line:16,column:69}},"11":{start:{line:17,column:12},end:{line:17,column:97}},"12":{start:{line:20,column:30},end:{line:20,column:56}},"13":{start:{line:21,column:63},end:{line:21,column:68}},"14":{start:{line:22,column:12},end:{line:26,column:14}},"15":{start:{line:29,column:4},end:{line:29,column:105}},"16":{start:{line:30,column:4},end:{line:30,column:47}},"17":{start:{line:31,column:4},end:{line:35,column:6}},"18":{start:{line:36,column:4},end:{line:36,column:26}},"19":{start:{line:38,column:0},end:{line:38,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:36},end:{line:8,column:37}},loc:{start:{line:8,column:42},end:{line:37,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:8},end:{line:10,column:9}},loc:{start:{line:10,column:34},end:{line:13,column:9}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:8},end:{line:14,column:9}},loc:{start:{line:14,column:20},end:{line:18,column:9}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:19,column:8},end:{line:19,column:9}},loc:{start:{line:19,column:35},end:{line:27,column:9}},line:19}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/compare/analyze.ts"],names:[],mappings:";;AAIA,uCAAwC;AAExC,yDAAqD;AACrD,6CAAiD;AACjD,+CAA6E;AAC7E,2EAAsE;AAOtE;IAAA,MAAqB,cAAe,SAAQ,8BAAa;QAUvD,YAAY,IAAc,EAAE,MAAe;YACzC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QACpD,CAAC;QAEM,KAAK,CAAC,GAAG;YACd,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,uBAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/C,OAAO,MAAM,uCAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACjE,CAAC;QAEO,UAAU,CAAC,cAAiC;YAClD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7C,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;YAEzD,OAAO;gBACL,QAAQ;gBACR,mBAAmB;gBACnB,OAAO;aACR,CAAC;QACJ,CAAC;;IA7Ba,0BAAW,GAAG,uEAAuE,CAAC;IAEtF,mBAAI,GAAG,CAAC,kBAAW,CAAC,CAAC;IACrB,oBAAK,GAAG;QACpB,QAAQ,EAAE,gBAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QACtC,mBAAmB,EAAE,2BAAmB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAC5D,OAAO,EAAE,eAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;KACrC,CAAC;IAuBJ,qBAAC;KAAA;kBA/BoB,cAAc",sourcesContent:["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable filenames/match-exported */\nimport { IConfig } from \"@oclif/config\";\nimport * as Parser from \"@oclif/parser\";\nimport { readJsonSync } from \"fs-extra\";\n\nimport { TBBaseCommand } from \"../../command-config\";\nimport { resultsFile } from \"../../helpers/args\";\nimport { fidelity, isCIEnv, regressionThreshold } from \"../../helpers/flags\";\nimport { logCompareResults } from \"../../helpers/log-compare-results\";\n\nexport interface CompareAnalyzeFlags {\n  fidelity: number;\n  regressionThreshold: number;\n  isCIEnv: boolean;\n}\nexport default class CompareAnalyze extends TBBaseCommand {\n  public static description = `Generates stdout report from the \"tracerbench compare\" command output`;\n\n  public static args = [resultsFile];\n  public static flags = {\n    fidelity: fidelity({ required: true }),\n    regressionThreshold: regressionThreshold({ required: true }),\n    isCIEnv: isCIEnv({ required: true }),\n  };\n  public typedFlags: CompareAnalyzeFlags;\n  constructor(argv: string[], config: IConfig) {\n    super(argv, config);\n    this.typedFlags = this.parseFlags(CompareAnalyze);\n  }\n\n  public async run(): Promise<string> {\n    const { args } = this.parse(CompareAnalyze);\n    const results = readJsonSync(args.resultsFile);\n    return await logCompareResults(results, this.typedFlags, this);\n  }\n\n  private parseFlags(CompareAnalyze: Parser.Input<any>): CompareAnalyzeFlags {\n    const { flags } = this.parse(CompareAnalyze);\n    const { fidelity, regressionThreshold, isCIEnv } = flags;\n\n    return {\n      fidelity,\n      regressionThreshold,\n      isCIEnv,\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"534597cfceaf0fb172fab513500636d08cae9d3e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1csyqvtbq=function(){return actualCoverage;};return actualCoverage;}cov_1csyqvtbq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fs_extra_1=(cov_1csyqvtbq().s[1]++,require("fs-extra"));const command_config_1=(cov_1csyqvtbq().s[2]++,require("../../command-config"));const args_1=(cov_1csyqvtbq().s[3]++,require("../../helpers/args"));const flags_1=(cov_1csyqvtbq().s[4]++,require("../../helpers/flags"));const log_compare_results_1=(cov_1csyqvtbq().s[5]++,require("../../helpers/log-compare-results"));let CompareAnalyze=(/** @class */cov_1csyqvtbq().s[6]++,(()=>{cov_1csyqvtbq().f[0]++;class CompareAnalyze extends(command_config_1.TBBaseCommand){constructor(argv,config){cov_1csyqvtbq().f[1]++;cov_1csyqvtbq().s[7]++;super(argv,config);cov_1csyqvtbq().s[8]++;this.typedFlags=this.parseFlags(CompareAnalyze);}async run(){cov_1csyqvtbq().f[2]++;const{args}=(cov_1csyqvtbq().s[9]++,this.parse(CompareAnalyze));const results=(cov_1csyqvtbq().s[10]++,fs_extra_1.readJsonSync(args.resultsFile));cov_1csyqvtbq().s[11]++;return await log_compare_results_1.logCompareResults(results,this.typedFlags,this);}parseFlags(CompareAnalyze){cov_1csyqvtbq().f[3]++;const{flags}=(cov_1csyqvtbq().s[12]++,this.parse(CompareAnalyze));const{fidelity,regressionThreshold,isCIEnv}=(cov_1csyqvtbq().s[13]++,flags);cov_1csyqvtbq().s[14]++;return{fidelity,regressionThreshold,isCIEnv};}}cov_1csyqvtbq().s[15]++;CompareAnalyze.description=`Generates stdout report from the "tracerbench compare" command output`;cov_1csyqvtbq().s[16]++;CompareAnalyze.args=[args_1.resultsFile];cov_1csyqvtbq().s[17]++;CompareAnalyze.flags={fidelity:flags_1.fidelity({required:true}),regressionThreshold:flags_1.regressionThreshold({required:true}),isCIEnv:flags_1.isCIEnv({required:true})};cov_1csyqvtbq().s[18]++;return CompareAnalyze;})());cov_1csyqvtbq().s[19]++;exports.default=CompareAnalyze;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL21hbHluY2gvRC90cmFjZXJiZW5jaC9wYWNrYWdlcy9jbGkvc3JjL2NvbW1hbmRzL2NvbXBhcmUvYW5hbHl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLHVDQUF3QztBQUV4Qyx5REFBcUQ7QUFDckQsNkNBQWlEO0FBQ2pELCtDQUE2RTtBQUM3RSwyRUFBc0U7QUFPdEU7SUFBQSxNQUFxQixjQUFlLFNBQVEsOEJBQWE7UUFVdkQsWUFBWSxJQUFjLEVBQUUsTUFBZTtZQUN6QyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBRU0sS0FBSyxDQUFDLEdBQUc7WUFDZCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1QyxNQUFNLE9BQU8sR0FBRyx1QkFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQyxPQUFPLE1BQU0sdUNBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVPLFVBQVUsQ0FBQyxjQUFpQztZQUNsRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM3QyxNQUFNLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztZQUV6RCxPQUFPO2dCQUNMLFFBQVE7Z0JBQ1IsbUJBQW1CO2dCQUNuQixPQUFPO2FBQ1IsQ0FBQztRQUNKLENBQUM7O0lBN0JhLDBCQUFXLEdBQUcsdUVBQXVFLENBQUM7SUFFdEYsbUJBQUksR0FBRyxDQUFDLGtCQUFXLENBQUMsQ0FBQztJQUNyQixvQkFBSyxHQUFHO1FBQ3BCLFFBQVEsRUFBRSxnQkFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3RDLG1CQUFtQixFQUFFLDJCQUFtQixDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzVELE9BQU8sRUFBRSxlQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDckMsQ0FBQztJQXVCSixxQkFBQztLQUFBO2tCQS9Cb0IsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIGZpbGVuYW1lcy9tYXRjaC1leHBvcnRlZCAqL1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gXCJAb2NsaWYvY29uZmlnXCI7XG5pbXBvcnQgKiBhcyBQYXJzZXIgZnJvbSBcIkBvY2xpZi9wYXJzZXJcIjtcbmltcG9ydCB7IHJlYWRKc29uU3luYyB9IGZyb20gXCJmcy1leHRyYVwiO1xuXG5pbXBvcnQgeyBUQkJhc2VDb21tYW5kIH0gZnJvbSBcIi4uLy4uL2NvbW1hbmQtY29uZmlnXCI7XG5pbXBvcnQgeyByZXN1bHRzRmlsZSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2FyZ3NcIjtcbmltcG9ydCB7IGZpZGVsaXR5LCBpc0NJRW52LCByZWdyZXNzaW9uVGhyZXNob2xkIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvZmxhZ3NcIjtcbmltcG9ydCB7IGxvZ0NvbXBhcmVSZXN1bHRzIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvbG9nLWNvbXBhcmUtcmVzdWx0c1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhcmVBbmFseXplRmxhZ3Mge1xuICBmaWRlbGl0eTogbnVtYmVyO1xuICByZWdyZXNzaW9uVGhyZXNob2xkOiBudW1iZXI7XG4gIGlzQ0lFbnY6IGJvb2xlYW47XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJlQW5hbHl6ZSBleHRlbmRzIFRCQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgc3RhdGljIGRlc2NyaXB0aW9uID0gYEdlbmVyYXRlcyBzdGRvdXQgcmVwb3J0IGZyb20gdGhlIFwidHJhY2VyYmVuY2ggY29tcGFyZVwiIGNvbW1hbmQgb3V0cHV0YDtcblxuICBwdWJsaWMgc3RhdGljIGFyZ3MgPSBbcmVzdWx0c0ZpbGVdO1xuICBwdWJsaWMgc3RhdGljIGZsYWdzID0ge1xuICAgIGZpZGVsaXR5OiBmaWRlbGl0eSh7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQ6IHJlZ3Jlc3Npb25UaHJlc2hvbGQoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICBpc0NJRW52OiBpc0NJRW52KHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gIH07XG4gIHB1YmxpYyB0eXBlZEZsYWdzOiBDb21wYXJlQW5hbHl6ZUZsYWdzO1xuICBjb25zdHJ1Y3Rvcihhcmd2OiBzdHJpbmdbXSwgY29uZmlnOiBJQ29uZmlnKSB7XG4gICAgc3VwZXIoYXJndiwgY29uZmlnKTtcbiAgICB0aGlzLnR5cGVkRmxhZ3MgPSB0aGlzLnBhcnNlRmxhZ3MoQ29tcGFyZUFuYWx5emUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHsgYXJncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlQW5hbHl6ZSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IHJlYWRKc29uU3luYyhhcmdzLnJlc3VsdHNGaWxlKTtcbiAgICByZXR1cm4gYXdhaXQgbG9nQ29tcGFyZVJlc3VsdHMocmVzdWx0cywgdGhpcy50eXBlZEZsYWdzLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VGbGFncyhDb21wYXJlQW5hbHl6ZTogUGFyc2VyLklucHV0PGFueT4pOiBDb21wYXJlQW5hbHl6ZUZsYWdzIHtcbiAgICBjb25zdCB7IGZsYWdzIH0gPSB0aGlzLnBhcnNlKENvbXBhcmVBbmFseXplKTtcbiAgICBjb25zdCB7IGZpZGVsaXR5LCByZWdyZXNzaW9uVGhyZXNob2xkLCBpc0NJRW52IH0gPSBmbGFncztcblxuICAgIHJldHVybiB7XG4gICAgICBmaWRlbGl0eSxcbiAgICAgIHJlZ3Jlc3Npb25UaHJlc2hvbGQsXG4gICAgICBpc0NJRW52LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWx5bmNoL0QvdHJhY2VyYmVuY2gvcGFja2FnZXMvY2xpL3NyYy9jb21tYW5kcy9jb21wYXJlL2FuYWx5emUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjQ3S0FJQSxLQUFBLENBQUEsVUFBQSx5QkFBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsQ0FFQSxLQUFBLENBQUEsZ0JBQUEseUJBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLHlCQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsQ0FDQSxLQUFBLENBQUEsT0FBQSx5QkFBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLHFCQUFBLHlCQUFBLE9BQUEsQ0FBQSxtQ0FBQSxDQUFBLENBQUEsQ0FPQSxHQUFBLENBQUEsY0FBQSxFQUFBLGFBQUEsdUJBQUEsQ0FBQSxJQUFBLHdCQUFBLEtBQXFCLENBQUEsY0FBckIsU0FBNEMsZ0JBQUEsQ0FBQSxhQUE1QyxDQUF5RCxDQVV2RCxXQUFBLENBQVksSUFBWixDQUE0QixNQUE1QixDQUEyQywrQ0FDekMsTUFBTSxJQUFOLENBQVksTUFBWixFQUR5Qyx1QkFFekMsS0FBSyxVQUFMLENBQWtCLEtBQUssVUFBTCxDQUFnQixjQUFoQixDQUFsQixDQUNELENBRU0sS0FBTSxDQUFBLEdBQU4sRUFBUyx3QkFDZCxLQUFNLENBQUUsSUFBRiwwQkFBVyxLQUFLLEtBQUwsQ0FBVyxjQUFYLENBQVgsQ0FBTixDQUNBLEtBQU0sQ0FBQSxPQUFPLDBCQUFHLFVBQUEsQ0FBQSxZQUFBLENBQWEsSUFBSSxDQUFDLFdBQWxCLENBQUgsQ0FBYixDQUZjLHdCQUdkLE1BQU8sTUFBTSxDQUFBLHFCQUFBLENBQUEsaUJBQUEsQ0FBa0IsT0FBbEIsQ0FBMkIsS0FBSyxVQUFoQyxDQUE0QyxJQUE1QyxDQUFiLENBQ0QsQ0FFTyxVQUFVLENBQUMsY0FBRCxDQUFrQyx3QkFDbEQsS0FBTSxDQUFFLEtBQUYsMkJBQVksS0FBSyxLQUFMLENBQVcsY0FBWCxDQUFaLENBQU4sQ0FDQSxLQUFNLENBQUUsUUFBRixDQUFZLG1CQUFaLENBQWlDLE9BQWpDLDJCQUE2QyxLQUE3QyxDQUFOLENBRmtELHdCQUlsRCxNQUFPLENBQ0wsUUFESyxDQUVMLG1CQUZLLENBR0wsT0FISyxDQUFQLENBS0QsQ0E5QnNELENBQXpELHdCQUNnQixjQUFBLENBQUEsV0FBQSxDQUFjLHVFQUFkLENBRGhCLHdCQUdnQixjQUFBLENBQUEsSUFBQSxDQUFPLENBQUMsTUFBQSxDQUFBLFdBQUQsQ0FBUCxDQUhoQix3QkFJZ0IsY0FBQSxDQUFBLEtBQUEsQ0FBUSxDQUNwQixRQUFRLENBQUUsT0FBQSxDQUFBLFFBQUEsQ0FBUyxDQUFFLFFBQVEsQ0FBRSxJQUFaLENBQVQsQ0FEVSxDQUVwQixtQkFBbUIsQ0FBRSxPQUFBLENBQUEsbUJBQUEsQ0FBb0IsQ0FBRSxRQUFRLENBQUUsSUFBWixDQUFwQixDQUZELENBR3BCLE9BQU8sQ0FBRSxPQUFBLENBQUEsT0FBQSxDQUFRLENBQUUsUUFBUSxDQUFFLElBQVosQ0FBUixDQUhXLENBQVIsQ0FKaEIsd0JBK0JBLE1BQUEsQ0FBQSxjQUFBLENBQUMsQ0EvQkQsR0FBQSxDQUFBLEMsd0NBQXFCLGMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBmaWxlbmFtZXMvbWF0Y2gtZXhwb3J0ZWQgKi9cbmltcG9ydCB7IElDb25maWcgfSBmcm9tIFwiQG9jbGlmL2NvbmZpZ1wiO1xuaW1wb3J0ICogYXMgUGFyc2VyIGZyb20gXCJAb2NsaWYvcGFyc2VyXCI7XG5pbXBvcnQgeyByZWFkSnNvblN5bmMgfSBmcm9tIFwiZnMtZXh0cmFcIjtcblxuaW1wb3J0IHsgVEJCYXNlQ29tbWFuZCB9IGZyb20gXCIuLi8uLi9jb21tYW5kLWNvbmZpZ1wiO1xuaW1wb3J0IHsgcmVzdWx0c0ZpbGUgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9hcmdzXCI7XG5pbXBvcnQgeyBmaWRlbGl0eSwgaXNDSUVudiwgcmVncmVzc2lvblRocmVzaG9sZCB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2ZsYWdzXCI7XG5pbXBvcnQgeyBsb2dDb21wYXJlUmVzdWx0cyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2xvZy1jb21wYXJlLXJlc3VsdHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb21wYXJlQW5hbHl6ZUZsYWdzIHtcbiAgZmlkZWxpdHk6IG51bWJlcjtcbiAgcmVncmVzc2lvblRocmVzaG9sZDogbnVtYmVyO1xuICBpc0NJRW52OiBib29sZWFuO1xufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyZUFuYWx5emUgZXh0ZW5kcyBUQkJhc2VDb21tYW5kIHtcbiAgcHVibGljIHN0YXRpYyBkZXNjcmlwdGlvbiA9IGBHZW5lcmF0ZXMgc3Rkb3V0IHJlcG9ydCBmcm9tIHRoZSBcInRyYWNlcmJlbmNoIGNvbXBhcmVcIiBjb21tYW5kIG91dHB1dGA7XG5cbiAgcHVibGljIHN0YXRpYyBhcmdzID0gW3Jlc3VsdHNGaWxlXTtcbiAgcHVibGljIHN0YXRpYyBmbGFncyA9IHtcbiAgICBmaWRlbGl0eTogZmlkZWxpdHkoeyByZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICByZWdyZXNzaW9uVGhyZXNob2xkOiByZWdyZXNzaW9uVGhyZXNob2xkKHsgcmVxdWlyZWQ6IHRydWUgfSksXG4gICAgaXNDSUVudjogaXNDSUVudih7IHJlcXVpcmVkOiB0cnVlIH0pLFxuICB9O1xuICBwdWJsaWMgdHlwZWRGbGFnczogQ29tcGFyZUFuYWx5emVGbGFncztcbiAgY29uc3RydWN0b3IoYXJndjogc3RyaW5nW10sIGNvbmZpZzogSUNvbmZpZykge1xuICAgIHN1cGVyKGFyZ3YsIGNvbmZpZyk7XG4gICAgdGhpcy50eXBlZEZsYWdzID0gdGhpcy5wYXJzZUZsYWdzKENvbXBhcmVBbmFseXplKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBydW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB7IGFyZ3MgfSA9IHRoaXMucGFyc2UoQ29tcGFyZUFuYWx5emUpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSByZWFkSnNvblN5bmMoYXJncy5yZXN1bHRzRmlsZSk7XG4gICAgcmV0dXJuIGF3YWl0IGxvZ0NvbXBhcmVSZXN1bHRzKHJlc3VsdHMsIHRoaXMudHlwZWRGbGFncywgdGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlRmxhZ3MoQ29tcGFyZUFuYWx5emU6IFBhcnNlci5JbnB1dDxhbnk+KTogQ29tcGFyZUFuYWx5emVGbGFncyB7XG4gICAgY29uc3QgeyBmbGFncyB9ID0gdGhpcy5wYXJzZShDb21wYXJlQW5hbHl6ZSk7XG4gICAgY29uc3QgeyBmaWRlbGl0eSwgcmVncmVzc2lvblRocmVzaG9sZCwgaXNDSUVudiB9ID0gZmxhZ3M7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlkZWxpdHksXG4gICAgICByZWdyZXNzaW9uVGhyZXNob2xkLFxuICAgICAgaXNDSUVudixcbiAgICB9O1xuICB9XG59XG4iXX0=