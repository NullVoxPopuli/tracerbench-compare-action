"use strict";function cov_1skb92i4ln(){var path="/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts";var hash="d14ffed915cf54fe986e50a9dce83c966a4c742e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:15},end:{line:3,column:43}},"2":{start:{line:4,column:19},end:{line:4,column:38}},"3":{start:{line:5,column:14},end:{line:5,column:30}},"4":{start:{line:6,column:15},end:{line:6,column:30}},"5":{start:{line:7,column:25},end:{line:7,column:53}},"6":{start:{line:8,column:15},end:{line:8,column:41}},"7":{start:{line:9,column:16},end:{line:9,column:43}},"8":{start:{line:10,column:16},end:{line:10,column:43}},"9":{start:{line:13,column:8},end:{line:13,column:28}},"10":{start:{line:14,column:8},end:{line:14,column:24}},"11":{start:{line:17,column:32},end:{line:17,column:51}},"12":{start:{line:18,column:94},end:{line:18,column:99}},"13":{start:{line:19,column:28},end:{line:19,column:32}},"14":{start:{line:20,column:24},end:{line:27,column:9}},"15":{start:{line:28,column:24},end:{line:28,column:28}},"16":{start:{line:29,column:27},end:{line:32,column:9}},"17":{start:{line:33,column:22},end:{line:112,column:10}},"18":{start:{line:38,column:20},end:{line:40,column:34}},"19":{start:{line:48,column:20},end:{line:55,column:21}},"20":{start:{line:49,column:24},end:{line:51,column:25}},"21":{start:{line:50,column:28},end:{line:50,column:66}},"22":{start:{line:54,column:24},end:{line:54,column:42}},"23":{start:{line:62,column:20},end:{line:62,column:85}},"24":{start:{line:63,column:20},end:{line:63,column:83}},"25":{start:{line:64,column:20},end:{line:64,column:102}},"26":{start:{line:66,column:20},end:{line:66,column:68}},"27":{start:{line:68,column:24},end:{line:74,column:25}},"28":{start:{line:69,column:40},end:{line:69,column:78}},"29":{start:{line:70,column:28},end:{line:70,column:39}},"30":{start:{line:73,column:28},end:{line:73,column:141}},"31":{start:{line:81,column:45},end:{line:81,column:48}},"32":{start:{line:83,column:44},end:{line:83,column:109}},"33":{start:{line:84,column:20},end:{line:84,column:50}},"34":{start:{line:90,column:53},end:{line:90,column:56}},"35":{start:{line:92,column:20},end:{line:96,column:23}},"36":{start:{line:102,column:44},end:{line:102,column:47}},"37":{start:{line:104,column:20},end:{line:109,column:21}},"38":{start:{line:105,column:24},end:{line:105,column:73}},"39":{start:{line:108,column:24},end:{line:108,column:47}},"40":{start:{line:113,column:8},end:{line:136,column:11}},"41":{start:{line:116,column:12},end:{line:116,column:35}},"42":{start:{line:120,column:12},end:{line:120,column:27}},"43":{start:{line:121,column:12},end:{line:121,column:55}},"44":{start:{line:123,column:12},end:{line:123,column:27}},"45":{start:{line:124,column:12},end:{line:124,column:33}},"46":{start:{line:126,column:12},end:{line:126,column:27}},"47":{start:{line:127,column:12},end:{line:127,column:34}},"48":{start:{line:129,column:12},end:{line:129,column:27}},"49":{start:{line:130,column:12},end:{line:130,column:30}},"50":{start:{line:132,column:12},end:{line:135,column:13}},"51":{start:{line:133,column:16},end:{line:133,column:31}},"52":{start:{line:134,column:16},end:{line:134,column:69}},"53":{start:{line:139,column:8},end:{line:139,column:43}},"54":{start:{line:140,column:8},end:{line:142,column:11}},"55":{start:{line:141,column:12},end:{line:141,column:34}},"56":{start:{line:145,column:27},end:{line:145,column:36}},"57":{start:{line:146,column:26},end:{line:146,column:30}},"58":{start:{line:147,column:8},end:{line:156,column:9}},"59":{start:{line:148,column:28},end:{line:148,column:75}},"60":{start:{line:149,column:12},end:{line:152,column:15}},"61":{start:{line:150,column:72},end:{line:150,column:86}},"62":{start:{line:151,column:16},end:{line:151,column:112}},"63":{start:{line:155,column:12},end:{line:155,column:30}},"64":{start:{line:157,column:8},end:{line:166,column:9}},"65":{start:{line:158,column:12},end:{line:158,column:37}},"66":{start:{line:159,column:30},end:{line:159,column:70}},"67":{start:{line:160,column:12},end:{line:162,column:15}},"68":{start:{line:161,column:16},end:{line:161,column:67}},"69":{start:{line:165,column:12},end:{line:165,column:35}},"70":{start:{line:169,column:31},end:{line:169,column:32}},"71":{start:{line:170,column:8},end:{line:178,column:11}},"72":{start:{line:171,column:31},end:{line:171,column:69}},"73":{start:{line:172,column:31},end:{line:172,column:60}},"74":{start:{line:174,column:24},end:{line:174,column:53}},"75":{start:{line:175,column:33},end:{line:175,column:49}},"76":{start:{line:176,column:12},end:{line:176,column:45}},"77":{start:{line:177,column:12},end:{line:177,column:64}},"78":{start:{line:180,column:8},end:{line:180,column:85}},"79":{start:{line:183,column:30},end:{line:183,column:31}},"80":{start:{line:184,column:8},end:{line:192,column:11}},"81":{start:{line:185,column:31},end:{line:185,column:62}},"82":{start:{line:186,column:31},end:{line:186,column:50}},"83":{start:{line:188,column:24},end:{line:188,column:43}},"84":{start:{line:189,column:33},end:{line:189,column:49}},"85":{start:{line:190,column:12},end:{line:190,column:44}},"86":{start:{line:191,column:12},end:{line:191,column:63}},"87":{start:{line:194,column:8},end:{line:194,column:83}},"88":{start:{line:198,column:27},end:{line:198,column:30}},"89":{start:{line:199,column:23},end:{line:199,column:46}},"90":{start:{line:200,column:20},end:{line:200,column:24}},"91":{start:{line:201,column:24},end:{line:201,column:26}},"92":{start:{line:202,column:27},end:{line:202,column:31}},"93":{start:{line:203,column:26},end:{line:203,column:30}},"94":{start:{line:204,column:8},end:{line:206,column:9}},"95":{start:{line:205,column:12},end:{line:205,column:110}},"96":{start:{line:207,column:8},end:{line:212,column:9}},"97":{start:{line:208,column:12},end:{line:208,column:84}},"98":{start:{line:211,column:12},end:{line:211,column:26}},"99":{start:{line:213,column:8},end:{line:218,column:9}},"100":{start:{line:214,column:12},end:{line:214,column:63}},"101":{start:{line:217,column:12},end:{line:217,column:26}},"102":{start:{line:219,column:8},end:{line:224,column:9}},"103":{start:{line:220,column:12},end:{line:220,column:63}},"104":{start:{line:223,column:12},end:{line:223,column:31}},"105":{start:{line:225,column:8},end:{line:227,column:9}},"106":{start:{line:226,column:12},end:{line:226,column:140}},"107":{start:{line:228,column:8},end:{line:254,column:11}},"108":{start:{line:229,column:31},end:{line:229,column:83}},"109":{start:{line:232,column:12},end:{line:253,column:13}},"110":{start:{line:233,column:16},end:{line:233,column:37}},"111":{start:{line:234,column:16},end:{line:234,column:97}},"112":{start:{line:236,column:17},end:{line:253,column:13}},"113":{start:{line:237,column:16},end:{line:239,column:17}},"114":{start:{line:238,column:20},end:{line:238,column:41}},"115":{start:{line:240,column:16},end:{line:240,column:97}},"116":{start:{line:242,column:17},end:{line:253,column:13}},"117":{start:{line:243,column:16},end:{line:246,column:17}},"118":{start:{line:244,column:39},end:{line:244,column:67}},"119":{start:{line:245,column:20},end:{line:245,column:101}},"120":{start:{line:248,column:17},end:{line:253,column:13}},"121":{start:{line:249,column:33},end:{line:249,column:43}},"122":{start:{line:250,column:16},end:{line:252,column:17}},"123":{start:{line:251,column:20},end:{line:251,column:127}},"124":{start:{line:257,column:0},end:{line:257,column:26}},"125":{start:{line:259,column:0},end:{line:259,column:28}},"126":{start:{line:260,column:0},end:{line:260,column:84}},"127":{start:{line:261,column:0},end:{line:261,column:32}},"128":{start:{line:262,column:0},end:{line:269,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:18},end:{line:15,column:5}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:16},end:{line:137,column:5}},line:16},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:22},end:{line:36,column:23}},loc:{start:{line:36,column:37},end:{line:41,column:17}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:22},end:{line:45,column:23}},loc:{start:{line:45,column:28},end:{line:56,column:17}},line:45},"4":{name:"(anonymous_4)",decl:{start:{line:60,column:22},end:{line:60,column:23}},loc:{start:{line:60,column:37},end:{line:76,column:17}},line:60},"5":{name:"getURLFromHAR",decl:{start:{line:67,column:29},end:{line:67,column:42}},loc:{start:{line:67,column:48},end:{line:75,column:21}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:22},end:{line:80,column:23}},loc:{start:{line:80,column:37},end:{line:85,column:17}},line:80},"7":{name:"(anonymous_7)",decl:{start:{line:89,column:22},end:{line:89,column:23}},loc:{start:{line:89,column:37},end:{line:97,column:17}},line:89},"8":{name:"(anonymous_8)",decl:{start:{line:101,column:22},end:{line:101,column:23}},loc:{start:{line:101,column:37},end:{line:110,column:17}},line:101},"9":{name:"(anonymous_9)",decl:{start:{line:115,column:19},end:{line:115,column:20}},loc:{start:{line:115,column:30},end:{line:117,column:9}},line:115},"10":{name:"(anonymous_10)",decl:{start:{line:118,column:18},end:{line:118,column:19}},loc:{start:{line:118,column:33},end:{line:136,column:9}},line:118},"11":{name:"(anonymous_11)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:38},end:{line:143,column:5}},line:138},"12":{name:"(anonymous_12)",decl:{start:{line:140,column:48},end:{line:140,column:49}},loc:{start:{line:140,column:60},end:{line:142,column:9}},line:140},"13":{name:"(anonymous_13)",decl:{start:{line:144,column:4},end:{line:144,column:5}},loc:{start:{line:144,column:17},end:{line:167,column:5}},line:144},"14":{name:"(anonymous_14)",decl:{start:{line:149,column:36},end:{line:149,column:37}},loc:{start:{line:149,column:46},end:{line:152,column:13}},line:149},"15":{name:"(anonymous_15)",decl:{start:{line:160,column:30},end:{line:160,column:31}},loc:{start:{line:160,column:72},end:{line:162,column:13}},line:160},"16":{name:"(anonymous_16)",decl:{start:{line:168,column:4},end:{line:168,column:5}},loc:{start:{line:168,column:21},end:{line:181,column:5}},line:168},"17":{name:"(anonymous_17)",decl:{start:{line:171,column:20},end:{line:171,column:21}},loc:{start:{line:171,column:31},end:{line:171,column:69}},line:171},"18":{name:"(anonymous_18)",decl:{start:{line:172,column:20},end:{line:172,column:21}},loc:{start:{line:172,column:31},end:{line:172,column:60}},line:172},"19":{name:"(anonymous_19)",decl:{start:{line:173,column:21},end:{line:173,column:22}},loc:{start:{line:173,column:32},end:{line:178,column:9}},line:173},"20":{name:"(anonymous_20)",decl:{start:{line:182,column:4},end:{line:182,column:5}},loc:{start:{line:182,column:20},end:{line:195,column:5}},line:182},"21":{name:"(anonymous_21)",decl:{start:{line:185,column:20},end:{line:185,column:21}},loc:{start:{line:185,column:31},end:{line:185,column:62}},line:185},"22":{name:"(anonymous_22)",decl:{start:{line:186,column:20},end:{line:186,column:21}},loc:{start:{line:186,column:31},end:{line:186,column:50}},line:186},"23":{name:"(anonymous_23)",decl:{start:{line:187,column:21},end:{line:187,column:22}},loc:{start:{line:187,column:32},end:{line:192,column:9}},line:187},"24":{name:"(anonymous_24)",decl:{start:{line:197,column:4},end:{line:197,column:5}},loc:{start:{line:197,column:44},end:{line:255,column:5}},line:197},"25":{name:"(anonymous_25)",decl:{start:{line:229,column:20},end:{line:229,column:21}},loc:{start:{line:229,column:31},end:{line:229,column:83}},line:229},"26":{name:"(anonymous_26)",decl:{start:{line:231,column:21},end:{line:231,column:22}},loc:{start:{line:231,column:32},end:{line:254,column:9}},line:231},"27":{name:"(anonymous_27)",decl:{start:{line:244,column:32},end:{line:244,column:33}},loc:{start:{line:244,column:39},end:{line:244,column:67}},line:244}},branchMap:{"0":{loc:{start:{line:38,column:34},end:{line:40,column:33}},type:"cond-expr",locations:[{start:{line:39,column:26},end:{line:39,column:80}},{start:{line:40,column:26},end:{line:40,column:33}}],line:38},"1":{loc:{start:{line:49,column:24},end:{line:51,column:25}},type:"if",locations:[{start:{line:49,column:24},end:{line:51,column:25}},{start:{line:49,column:24},end:{line:51,column:25}}],line:49},"2":{loc:{start:{line:66,column:30},end:{line:66,column:67}},type:"cond-expr",locations:[{start:{line:66,column:43},end:{line:66,column:46}},{start:{line:66,column:49},end:{line:66,column:67}}],line:66},"3":{loc:{start:{line:132,column:12},end:{line:135,column:13}},type:"if",locations:[{start:{line:132,column:12},end:{line:135,column:13}},{start:{line:132,column:12},end:{line:135,column:13}}],line:132},"4":{loc:{start:{line:204,column:8},end:{line:206,column:9}},type:"if",locations:[{start:{line:204,column:8},end:{line:206,column:9}},{start:{line:204,column:8},end:{line:206,column:9}}],line:204},"5":{loc:{start:{line:219,column:8},end:{line:224,column:9}},type:"if",locations:[{start:{line:219,column:8},end:{line:224,column:9}},{start:{line:219,column:8},end:{line:224,column:9}}],line:219},"6":{loc:{start:{line:225,column:8},end:{line:227,column:9}},type:"if",locations:[{start:{line:225,column:8},end:{line:227,column:9}},{start:{line:225,column:8},end:{line:227,column:9}}],line:225},"7":{loc:{start:{line:229,column:31},end:{line:229,column:83}},type:"binary-expr",locations:[{start:{line:229,column:31},end:{line:229,column:52}},{start:{line:229,column:56},end:{line:229,column:83}}],line:229},"8":{loc:{start:{line:232,column:12},end:{line:253,column:13}},type:"if",locations:[{start:{line:232,column:12},end:{line:253,column:13}},{start:{line:232,column:12},end:{line:253,column:13}}],line:232},"9":{loc:{start:{line:236,column:17},end:{line:253,column:13}},type:"if",locations:[{start:{line:236,column:17},end:{line:253,column:13}},{start:{line:236,column:17},end:{line:253,column:13}}],line:236},"10":{loc:{start:{line:237,column:16},end:{line:239,column:17}},type:"if",locations:[{start:{line:237,column:16},end:{line:239,column:17}},{start:{line:237,column:16},end:{line:239,column:17}}],line:237},"11":{loc:{start:{line:242,column:17},end:{line:253,column:13}},type:"if",locations:[{start:{line:242,column:17},end:{line:253,column:13}},{start:{line:242,column:17},end:{line:253,column:13}}],line:242},"12":{loc:{start:{line:243,column:16},end:{line:246,column:17}},type:"if",locations:[{start:{line:243,column:16},end:{line:246,column:17}},{start:{line:243,column:16},end:{line:246,column:17}}],line:243},"13":{loc:{start:{line:243,column:20},end:{line:244,column:68}},type:"binary-expr",locations:[{start:{line:243,column:20},end:{line:243,column:39}},{start:{line:244,column:20},end:{line:244,column:68}}],line:243},"14":{loc:{start:{line:248,column:17},end:{line:253,column:13}},type:"if",locations:[{start:{line:248,column:17},end:{line:253,column:13}},{start:{line:248,column:17},end:{line:253,column:13}}],line:248},"15":{loc:{start:{line:250,column:16},end:{line:252,column:17}},type:"if",locations:[{start:{line:250,column:16},end:{line:252,column:17}},{start:{line:250,column:16},end:{line:252,column:17}}],line:250}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},inputSourceMap:{version:3,file:"/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts",sources:["/Users/malynch/D/tracerbench/packages/cli/src/commands/profile.ts"],names:[],mappings:"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",sourcesContent:["import {\n  analyze,\n  IConditions,\n  ITraceEvent,\n  liveTrace,\n  loadTrace,\n} from \"@tracerbench/core\";\nimport Protocol from \"devtools-protocol\";\nimport { existsSync, mkdirSync, readJson, writeFileSync } from \"fs-extra\";\nimport * as listr from \"listr\";\nimport { join, resolve } from \"path\";\n\nimport { TBBaseCommand } from \"../command-config\";\nimport { harpath } from \"../helpers/args\";\nimport {\n  cookiespath,\n  cpuThrottleRate,\n  network,\n  tbResultsFolder,\n  url,\n  usertimings,\n} from \"../helpers/flags\";\nimport {\n  byTime,\n  collect,\n  findFrame,\n  format,\n  IEvent,\n  isCommitLoad,\n  isFrameMark,\n  isFrameNavigationStart,\n  isMark,\n  isUserMark,\n  normalizeFnName,\n  setTraceEvents,\n} from \"../helpers/utils\";\n\ninterface ProfileContext {\n  cookies: Protocol.Network.CookieParam[];\n  harJSON: any;\n  traceJSONPath: string;\n  traceEvents: ITraceEvent[];\n  url: string;\n  analyzeResults: { node: string; hierarchyReports: string[] };\n}\n\nexport default class Profile extends TBBaseCommand {\n  // include backwards compat to trace cmd\n  static aliases = [\"trace\"];\n  public trace: ITraceEvent[] = [];\n  public static description = `Parses a CPU profile and aggregates time across heuristics.`;\n  public static args = [harpath];\n  public static flags = {\n    cpuThrottleRate: cpuThrottleRate({ required: true }),\n    tbResultsFolder: tbResultsFolder({ required: true }),\n    network: network(),\n    url: url({ required: true }),\n    cookiespath: cookiespath({ required: true }),\n    usertimings,\n  };\n\n  public async run(): Promise<void> {\n    const { flags, args } = this.parse(Profile);\n    const {\n      cpuThrottleRate,\n      cookiespath,\n      tbResultsFolder,\n      network,\n      usertimings,\n      url,\n    } = flags;\n    const { harpath } = args;\n    const cookies = [\n      {\n        name: \"\",\n        value: \"\",\n        domain: \"\",\n        path: \"\",\n      },\n    ];\n    const methods = [\"\"];\n    const conditions: IConditions = {\n      cpu: cpuThrottleRate,\n      network,\n    };\n\n    const tasks = new listr([\n      {\n        title: \"Reading cookies json\",\n        task: async (ctx: ProfileContext) => {\n          // read cookies json file from path and set to context\n          ctx.cookies = cookiespath.length\n            ? await readJson(resolve(cookiespath))\n            : cookies;\n        },\n      },\n      {\n        title: \"Preparing results folder\",\n        task: () => {\n          // if the folder for the tracerbench results file\n          // does not exist then create it\n          try {\n            if (!existsSync(tbResultsFolder)) {\n              mkdirSync(tbResultsFolder);\n            }\n          } catch (error) {\n            this.error(error);\n          }\n        },\n      },\n      {\n        title: \"Validating & Cloning HAR file\",\n        task: async (ctx: ProfileContext) => {\n          // validate har and clone it to trace.json which will be mutated\n          ctx.harJSON = await readJson(resolve(harpath));\n          ctx.traceJSONPath = join(tbResultsFolder, \"trace.json\");\n          writeFileSync(\n            ctx.traceJSONPath,\n            JSON.stringify(ctx.harJSON, null, 2)\n          );\n          // if no url get url from har otherwise set with cmd url\n          ctx.url = url.length ? url : getURLFromHAR(ctx);\n\n          function getURLFromHAR(ctx: ProfileContext): string {\n            try {\n              const url = ctx.harJSON.log.entries[0].request.url;\n              return url;\n            } catch (error) {\n              throw new Error(\n                `${error}. Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n              );\n            }\n          }\n        },\n      },\n      {\n        title: \"Recording the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { cookies, url } = ctx;\n          // run the liveTrace\n          const { traceEvents } = await liveTrace(\n            url,\n            tbResultsFolder,\n            cookies,\n            conditions\n          );\n          ctx.traceEvents = traceEvents;\n        },\n      },\n      {\n        title: \"Analyzing the live trace\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents, harJSON } = ctx;\n          // analyze the liveTrace\n          ctx.analyzeResults = await analyze({\n            traceEvents,\n            traceHARJSON: harJSON,\n            methods,\n          });\n        },\n      },\n      {\n        title: \"Setting trace events\",\n        task: async (ctx: ProfileContext) => {\n          const { traceEvents } = ctx;\n          // mutates this.trace\n          try {\n            this.trace = setTraceEvents(traceEvents);\n          } catch (error) {\n            this.error(`${error}`);\n          }\n        },\n      },\n    ]);\n\n    await tasks\n      .run()\n      .catch((error) => {\n        throw new Error(error);\n      })\n      .then(async (ctx) => {\n        // log logAnalyzeReports\n        this.log(`\\n`);\n        this.logAnalyzeReports(ctx.analyzeResults);\n        // log js-eval-time\n        this.log(`\\n`);\n        this.logJSEvalTime();\n        // log css-parse\n        this.log(`\\n`);\n        this.logCSSEvalTime();\n        // log list-functions\n        this.log(`\\n`);\n        this.listFrames();\n        // log user timings\n        if (usertimings) {\n          this.log(`\\n`);\n          await this.markerTimings(ctx.traceJSONPath, ctx.url);\n        }\n      });\n  }\n\n  private logAnalyzeReports(analyzeResults: {\n    node: string;\n    hierarchyReports: string[];\n  }): void {\n    this.log(`${analyzeResults.node}`);\n    analyzeResults.hierarchyReports.forEach((report) => {\n      this.log(`${report}`);\n    });\n  }\n\n  private listFrames(): void {\n    const methodsSet = new Set();\n    let clonedTrace: any = null;\n\n    try {\n      const profile = loadTrace(this.trace).cpuProfile(-1, -1);\n      profile.nodeMap.forEach((node: any) => {\n        const { functionName, url, lineNumber, columnNumber } = node.callFrame;\n\n        methodsSet.add(\n          `${url}:${lineNumber}:${columnNumber}.${normalizeFnName(\n            functionName\n          )}`\n        );\n      });\n    } catch (error) {\n      this.error(error);\n    }\n\n    try {\n      clonedTrace = this.trace;\n      const traceLoad = clonedTrace.filter(isCommitLoad);\n      traceLoad.forEach(\n        ({\n          args: {\n            data: { frame, url },\n          },\n        }: {\n          args: { data: { frame: any; url: any } };\n        }) => {\n          this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);\n        }\n      );\n    } catch (error) {\n      this.error(`${error}`);\n    }\n  }\n\n  private logCSSEvalTime(): void {\n    let totalCSSDuration = 0;\n\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"ParseAuthorStyleSheet\")\n      .filter((event: any) => event.args.data.styleSheetUrl)\n      .forEach((event: any) => {\n        const url = event.args.data.styleSheetUrl;\n        const durationInMs = event.dur / 1000;\n        totalCSSDuration += durationInMs;\n        this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);\n      });\n\n    // log css-parse-time\n    this.log(\n      `CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms`\n    );\n  }\n\n  private logJSEvalTime(): void {\n    let totalJSDuration = 0;\n\n    this.trace\n      .filter((event: ITraceEvent) => event.name === \"EvaluateScript\")\n      .filter((event: any) => event.args.data.url)\n      .forEach((event: any) => {\n        const url = event.args.data.url;\n        const durationInMs = (event.dur as number) / 1000;\n        totalJSDuration += durationInMs;\n        this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);\n      });\n\n    // log js-eval-time\n    this.log(`JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms`);\n  }\n\n  // tracerbench marker-timings cmd moved here\n  private async markerTimings(\n    traceJSONPath: string,\n    url: string\n  ): Promise<void> {\n    const traceFrame: string = url;\n    const filter = collect(\"\", []);\n\n    let frame: any = null;\n    let startTime = -1;\n    let rawTraceData: any = null;\n    let customTrace: any = null;\n\n    if (!url) {\n      this.error(\n        `Could not extract the URL from the HAR. Explicitly pass via \"--url\" flag and rerun.`\n      );\n    }\n\n    try {\n      rawTraceData = await readJson(resolve(traceJSONPath));\n    } catch (e) {\n      this.error(e);\n    }\n\n    try {\n      customTrace = setTraceEvents(rawTraceData);\n    } catch (e) {\n      this.error(e);\n    }\n\n    if (traceFrame.startsWith(\"http\")) {\n      frame = findFrame(customTrace, traceFrame);\n    } else {\n      frame = traceFrame;\n    }\n    if (!frame) {\n      this.error(\n        `Could not extract frame from trace. Explicitly opt-out of usertimings via \"--usertimings\" boolean flag and rerun.`\n      );\n    }\n\n    customTrace\n      .filter((event: IEvent) => isMark(event) || isCommitLoad(event))\n      .sort(byTime)\n      .forEach((event: any) => {\n        if (isFrameNavigationStart(frame, event)) {\n          startTime = event.ts;\n          this.log(\n            `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n          );\n        } else if (isFrameMark(frame, event)) {\n          if (startTime === -1) {\n            startTime = event.ts;\n          }\n          this.log(\n            `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n          );\n        } else if (isUserMark(event)) {\n          if (\n            filter.length === 0 ||\n            filter.some((f: any) => event.name.indexOf(f) !== -1)\n          ) {\n            this.log(\n              `Marker Timings: ${format(event.ts, startTime)} ${event.name}`\n            );\n          }\n        } else if (isCommitLoad(event)) {\n          const { data } = event.args;\n          if (data.frame === frame) {\n            this.log(\n              `Marker Timings: ${format(event.ts, startTime)} ${event.name} ${\n                data.frame\n              } ${data.url}`\n            );\n          }\n        }\n      });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d14ffed915cf54fe986e50a9dce83c966a4c742e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1skb92i4ln=function(){return actualCoverage;};return actualCoverage;}cov_1skb92i4ln().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const core_1=(cov_1skb92i4ln().s[1]++,require("@tracerbench/core"));const fs_extra_1=(cov_1skb92i4ln().s[2]++,require("fs-extra"));const listr=(cov_1skb92i4ln().s[3]++,require("listr"));const path_1=(cov_1skb92i4ln().s[4]++,require("path"));const command_config_1=(cov_1skb92i4ln().s[5]++,require("../command-config"));const args_1=(cov_1skb92i4ln().s[6]++,require("../helpers/args"));const flags_1=(cov_1skb92i4ln().s[7]++,require("../helpers/flags"));const utils_1=(cov_1skb92i4ln().s[8]++,require("../helpers/utils"));class Profile extends(command_config_1.TBBaseCommand){constructor(){cov_1skb92i4ln().f[0]++;cov_1skb92i4ln().s[9]++;super(...arguments);cov_1skb92i4ln().s[10]++;this.trace=[];}async run(){cov_1skb92i4ln().f[1]++;const{flags,args}=(cov_1skb92i4ln().s[11]++,this.parse(Profile));const{cpuThrottleRate,cookiespath,tbResultsFolder,network,usertimings,url}=(cov_1skb92i4ln().s[12]++,flags);const{harpath}=(cov_1skb92i4ln().s[13]++,args);const cookies=(cov_1skb92i4ln().s[14]++,[{name:"",value:"",domain:"",path:""}]);const methods=(cov_1skb92i4ln().s[15]++,[""]);const conditions=(cov_1skb92i4ln().s[16]++,{cpu:cpuThrottleRate,network});const tasks=(cov_1skb92i4ln().s[17]++,new listr([{title:"Reading cookies json",task:async ctx=>{cov_1skb92i4ln().f[2]++;cov_1skb92i4ln().s[18]++;// read cookies json file from path and set to context
ctx.cookies=cookiespath.length?(cov_1skb92i4ln().b[0][0]++,await fs_extra_1.readJson(path_1.resolve(cookiespath))):(cov_1skb92i4ln().b[0][1]++,cookies);}},{title:"Preparing results folder",task:()=>{cov_1skb92i4ln().f[3]++;cov_1skb92i4ln().s[19]++;// if the folder for the tracerbench results file
// does not exist then create it
try{cov_1skb92i4ln().s[20]++;if(!fs_extra_1.existsSync(tbResultsFolder)){cov_1skb92i4ln().b[1][0]++;cov_1skb92i4ln().s[21]++;fs_extra_1.mkdirSync(tbResultsFolder);}else{cov_1skb92i4ln().b[1][1]++;}}catch(error){cov_1skb92i4ln().s[22]++;this.error(error);}}},{title:"Validating & Cloning HAR file",task:async ctx=>{cov_1skb92i4ln().f[4]++;cov_1skb92i4ln().s[23]++;// validate har and clone it to trace.json which will be mutated
ctx.harJSON=await fs_extra_1.readJson(path_1.resolve(harpath));cov_1skb92i4ln().s[24]++;ctx.traceJSONPath=path_1.join(tbResultsFolder,"trace.json");cov_1skb92i4ln().s[25]++;fs_extra_1.writeFileSync(ctx.traceJSONPath,JSON.stringify(ctx.harJSON,null,2));// if no url get url from har otherwise set with cmd url
cov_1skb92i4ln().s[26]++;ctx.url=url.length?(cov_1skb92i4ln().b[2][0]++,url):(cov_1skb92i4ln().b[2][1]++,getURLFromHAR(ctx));function getURLFromHAR(ctx){cov_1skb92i4ln().f[5]++;cov_1skb92i4ln().s[27]++;try{const url=(cov_1skb92i4ln().s[28]++,ctx.harJSON.log.entries[0].request.url);cov_1skb92i4ln().s[29]++;return url;}catch(error){cov_1skb92i4ln().s[30]++;throw new Error(`${error}. Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}}}},{title:"Recording the live trace",task:async ctx=>{cov_1skb92i4ln().f[6]++;const{cookies,url}=(cov_1skb92i4ln().s[31]++,ctx);// run the liveTrace
const{traceEvents}=(cov_1skb92i4ln().s[32]++,await core_1.liveTrace(url,tbResultsFolder,cookies,conditions));cov_1skb92i4ln().s[33]++;ctx.traceEvents=traceEvents;}},{title:"Analyzing the live trace",task:async ctx=>{cov_1skb92i4ln().f[7]++;const{traceEvents,harJSON}=(cov_1skb92i4ln().s[34]++,ctx);// analyze the liveTrace
cov_1skb92i4ln().s[35]++;ctx.analyzeResults=await core_1.analyze({traceEvents,traceHARJSON:harJSON,methods});}},{title:"Setting trace events",task:async ctx=>{cov_1skb92i4ln().f[8]++;const{traceEvents}=(cov_1skb92i4ln().s[36]++,ctx);// mutates this.trace
cov_1skb92i4ln().s[37]++;try{cov_1skb92i4ln().s[38]++;this.trace=utils_1.setTraceEvents(traceEvents);}catch(error){cov_1skb92i4ln().s[39]++;this.error(`${error}`);}}}]));cov_1skb92i4ln().s[40]++;await tasks.run().catch(error=>{cov_1skb92i4ln().f[9]++;cov_1skb92i4ln().s[41]++;throw new Error(error);}).then(async ctx=>{cov_1skb92i4ln().f[10]++;cov_1skb92i4ln().s[42]++;// log logAnalyzeReports
this.log(`\n`);cov_1skb92i4ln().s[43]++;this.logAnalyzeReports(ctx.analyzeResults);// log js-eval-time
cov_1skb92i4ln().s[44]++;this.log(`\n`);cov_1skb92i4ln().s[45]++;this.logJSEvalTime();// log css-parse
cov_1skb92i4ln().s[46]++;this.log(`\n`);cov_1skb92i4ln().s[47]++;this.logCSSEvalTime();// log list-functions
cov_1skb92i4ln().s[48]++;this.log(`\n`);cov_1skb92i4ln().s[49]++;this.listFrames();// log user timings
cov_1skb92i4ln().s[50]++;if(usertimings){cov_1skb92i4ln().b[3][0]++;cov_1skb92i4ln().s[51]++;this.log(`\n`);cov_1skb92i4ln().s[52]++;await this.markerTimings(ctx.traceJSONPath,ctx.url);}else{cov_1skb92i4ln().b[3][1]++;}});}logAnalyzeReports(analyzeResults){cov_1skb92i4ln().f[11]++;cov_1skb92i4ln().s[53]++;this.log(`${analyzeResults.node}`);cov_1skb92i4ln().s[54]++;analyzeResults.hierarchyReports.forEach(report=>{cov_1skb92i4ln().f[12]++;cov_1skb92i4ln().s[55]++;this.log(`${report}`);});}listFrames(){cov_1skb92i4ln().f[13]++;const methodsSet=(cov_1skb92i4ln().s[56]++,new Set());let clonedTrace=(cov_1skb92i4ln().s[57]++,null);cov_1skb92i4ln().s[58]++;try{const profile=(cov_1skb92i4ln().s[59]++,core_1.loadTrace(this.trace).cpuProfile(-1,-1));cov_1skb92i4ln().s[60]++;profile.nodeMap.forEach(node=>{cov_1skb92i4ln().f[14]++;const{functionName,url,lineNumber,columnNumber}=(cov_1skb92i4ln().s[61]++,node.callFrame);cov_1skb92i4ln().s[62]++;methodsSet.add(`${url}:${lineNumber}:${columnNumber}.${utils_1.normalizeFnName(functionName)}`);});}catch(error){cov_1skb92i4ln().s[63]++;this.error(error);}cov_1skb92i4ln().s[64]++;try{cov_1skb92i4ln().s[65]++;clonedTrace=this.trace;const traceLoad=(cov_1skb92i4ln().s[66]++,clonedTrace.filter(utils_1.isCommitLoad));cov_1skb92i4ln().s[67]++;traceLoad.forEach(({args:{data:{frame,url}}})=>{cov_1skb92i4ln().f[15]++;cov_1skb92i4ln().s[68]++;this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);});}catch(error){cov_1skb92i4ln().s[69]++;this.error(`${error}`);}}logCSSEvalTime(){cov_1skb92i4ln().f[16]++;let totalCSSDuration=(cov_1skb92i4ln().s[70]++,0);cov_1skb92i4ln().s[71]++;this.trace.filter(event=>{cov_1skb92i4ln().f[17]++;cov_1skb92i4ln().s[72]++;return event.name==="ParseAuthorStyleSheet";}).filter(event=>{cov_1skb92i4ln().f[18]++;cov_1skb92i4ln().s[73]++;return event.args.data.styleSheetUrl;}).forEach(event=>{cov_1skb92i4ln().f[19]++;const url=(cov_1skb92i4ln().s[74]++,event.args.data.styleSheetUrl);const durationInMs=(cov_1skb92i4ln().s[75]++,event.dur/1000);cov_1skb92i4ln().s[76]++;totalCSSDuration+=durationInMs;cov_1skb92i4ln().s[77]++;this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);});// log css-parse-time
cov_1skb92i4ln().s[78]++;this.log(`CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms`);}logJSEvalTime(){cov_1skb92i4ln().f[20]++;let totalJSDuration=(cov_1skb92i4ln().s[79]++,0);cov_1skb92i4ln().s[80]++;this.trace.filter(event=>{cov_1skb92i4ln().f[21]++;cov_1skb92i4ln().s[81]++;return event.name==="EvaluateScript";}).filter(event=>{cov_1skb92i4ln().f[22]++;cov_1skb92i4ln().s[82]++;return event.args.data.url;}).forEach(event=>{cov_1skb92i4ln().f[23]++;const url=(cov_1skb92i4ln().s[83]++,event.args.data.url);const durationInMs=(cov_1skb92i4ln().s[84]++,event.dur/1000);cov_1skb92i4ln().s[85]++;totalJSDuration+=durationInMs;cov_1skb92i4ln().s[86]++;this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);});// log js-eval-time
cov_1skb92i4ln().s[87]++;this.log(`JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms`);}// tracerbench marker-timings cmd moved here
async markerTimings(traceJSONPath,url){cov_1skb92i4ln().f[24]++;const traceFrame=(cov_1skb92i4ln().s[88]++,url);const filter=(cov_1skb92i4ln().s[89]++,utils_1.collect("",[]));let frame=(cov_1skb92i4ln().s[90]++,null);let startTime=(cov_1skb92i4ln().s[91]++,-1);let rawTraceData=(cov_1skb92i4ln().s[92]++,null);let customTrace=(cov_1skb92i4ln().s[93]++,null);cov_1skb92i4ln().s[94]++;if(!url){cov_1skb92i4ln().b[4][0]++;cov_1skb92i4ln().s[95]++;this.error(`Could not extract the URL from the HAR. Explicitly pass via "--url" flag and rerun.`);}else{cov_1skb92i4ln().b[4][1]++;}cov_1skb92i4ln().s[96]++;try{cov_1skb92i4ln().s[97]++;rawTraceData=await fs_extra_1.readJson(path_1.resolve(traceJSONPath));}catch(e){cov_1skb92i4ln().s[98]++;this.error(e);}cov_1skb92i4ln().s[99]++;try{cov_1skb92i4ln().s[100]++;customTrace=utils_1.setTraceEvents(rawTraceData);}catch(e){cov_1skb92i4ln().s[101]++;this.error(e);}cov_1skb92i4ln().s[102]++;if(traceFrame.startsWith("http")){cov_1skb92i4ln().b[5][0]++;cov_1skb92i4ln().s[103]++;frame=utils_1.findFrame(customTrace,traceFrame);}else{cov_1skb92i4ln().b[5][1]++;cov_1skb92i4ln().s[104]++;frame=traceFrame;}cov_1skb92i4ln().s[105]++;if(!frame){cov_1skb92i4ln().b[6][0]++;cov_1skb92i4ln().s[106]++;this.error(`Could not extract frame from trace. Explicitly opt-out of usertimings via "--usertimings" boolean flag and rerun.`);}else{cov_1skb92i4ln().b[6][1]++;}cov_1skb92i4ln().s[107]++;customTrace.filter(event=>{cov_1skb92i4ln().f[25]++;cov_1skb92i4ln().s[108]++;return(cov_1skb92i4ln().b[7][0]++,utils_1.isMark(event))||(cov_1skb92i4ln().b[7][1]++,utils_1.isCommitLoad(event));}).sort(utils_1.byTime).forEach(event=>{cov_1skb92i4ln().f[26]++;cov_1skb92i4ln().s[109]++;if(utils_1.isFrameNavigationStart(frame,event)){cov_1skb92i4ln().b[8][0]++;cov_1skb92i4ln().s[110]++;startTime=event.ts;cov_1skb92i4ln().s[111]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1skb92i4ln().b[8][1]++;cov_1skb92i4ln().s[112]++;if(utils_1.isFrameMark(frame,event)){cov_1skb92i4ln().b[9][0]++;cov_1skb92i4ln().s[113]++;if(startTime===-1){cov_1skb92i4ln().b[10][0]++;cov_1skb92i4ln().s[114]++;startTime=event.ts;}else{cov_1skb92i4ln().b[10][1]++;}cov_1skb92i4ln().s[115]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1skb92i4ln().b[9][1]++;cov_1skb92i4ln().s[116]++;if(utils_1.isUserMark(event)){cov_1skb92i4ln().b[11][0]++;cov_1skb92i4ln().s[117]++;if((cov_1skb92i4ln().b[13][0]++,filter.length===0)||(cov_1skb92i4ln().b[13][1]++,filter.some(f=>{cov_1skb92i4ln().f[27]++;cov_1skb92i4ln().s[118]++;return event.name.indexOf(f)!==-1;}))){cov_1skb92i4ln().b[12][0]++;cov_1skb92i4ln().s[119]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name}`);}else{cov_1skb92i4ln().b[12][1]++;}}else{cov_1skb92i4ln().b[11][1]++;cov_1skb92i4ln().s[120]++;if(utils_1.isCommitLoad(event)){cov_1skb92i4ln().b[14][0]++;const{data}=(cov_1skb92i4ln().s[121]++,event.args);cov_1skb92i4ln().s[122]++;if(data.frame===frame){cov_1skb92i4ln().b[15][0]++;cov_1skb92i4ln().s[123]++;this.log(`Marker Timings: ${utils_1.format(event.ts,startTime)} ${event.name} ${data.frame} ${data.url}`);}else{cov_1skb92i4ln().b[15][1]++;}}else{cov_1skb92i4ln().b[14][1]++;}}}}});}}cov_1skb92i4ln().s[124]++;exports.default=Profile;// include backwards compat to trace cmd
cov_1skb92i4ln().s[125]++;Profile.aliases=["trace"];cov_1skb92i4ln().s[126]++;Profile.description=`Parses a CPU profile and aggregates time across heuristics.`;cov_1skb92i4ln().s[127]++;Profile.args=[args_1.harpath];cov_1skb92i4ln().s[128]++;Profile.flags={cpuThrottleRate:flags_1.cpuThrottleRate({required:true}),tbResultsFolder:flags_1.tbResultsFolder({required:true}),network:flags_1.network(),url:flags_1.url({required:true}),cookiespath:flags_1.cookiespath({required:true}),usertimings:flags_1.usertimings};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,