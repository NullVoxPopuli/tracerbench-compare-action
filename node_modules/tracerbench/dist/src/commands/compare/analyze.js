"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const command_config_1 = require("../../command-config");
const args_1 = require("../../helpers/args");
const flags_1 = require("../../helpers/flags");
const log_compare_results_1 = require("../../helpers/log-compare-results");
class CompareAnalyze extends command_config_1.TBBaseCommand {
    constructor(argv, config) {
        super(argv, config);
        this.typedFlags = this.parseFlags(CompareAnalyze);
    }
    async run() {
        const { args } = this.parse(CompareAnalyze);
        const results = fs_extra_1.readJsonSync(args.resultsFile);
        return await log_compare_results_1.logCompareResults(results, this.typedFlags, this);
    }
    parseFlags(CompareAnalyze) {
        const { flags } = this.parse(CompareAnalyze);
        const { fidelity, regressionThreshold, isCIEnv } = flags;
        return {
            fidelity,
            regressionThreshold,
            isCIEnv,
        };
    }
}
exports.default = CompareAnalyze;
CompareAnalyze.description = `Generates stdout report from the "tracerbench compare" command output`;
CompareAnalyze.args = [args_1.resultsFile];
CompareAnalyze.flags = {
    fidelity: flags_1.fidelity({ required: true }),
    regressionThreshold: flags_1.regressionThreshold({ required: true }),
    isCIEnv: flags_1.isCIEnv({ required: true }),
};
//# sourceMappingURL=analyze.js.map