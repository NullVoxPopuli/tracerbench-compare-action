import { Marker } from "@tracerbench/core";
import { MarkTraceEvent, TraceEvent, TraceStreamJson } from "@tracerbench/trace-event";
import * as chalk from "chalk";
import { ITBConfig } from "../command-config/tb-config";
import { ICompareFlags } from "../commands/compare";
/**
 * Handles checking if there is a specific override for the attributeName in the tbConfigs for the given overrideObjectName.
 * Defaults to whatever is in the flags object if there is no override.
 *
 * @param attributeName - Attribute name to check if there is an override in overrideObjectName from tbConfig
 * @param flags - Object containing configs parsed from the Command class
 * @param overrideObjectName - Either "controlBenchmarkEnvironment" or "experimentBenchmarkEnvironment"
 * @param tbConfig - This refers to the parsed JSON from the config file if it exists
 */
export declare function checkEnvironmentSpecificOverride(attributeName: keyof ICompareFlags, flags: ICompareFlags, overrideObjectName: string, tbConfig?: ITBConfig): any;
/**
 * Merge the contents of the right object into the left. Simply replace numbers, strings, arrays
 * and recursively call this function with objects.
 *
 * Note that typeof null == 'object'
 *
 * @param left - Destination object
 * @param right - Content of this object takes precedence
 */
export declare function mergeLeft(left: {
    [key: string]: any;
}, right: {
    [key: string]: any;
}): {
    [key: string]: any;
};
export declare function convertMicrosecondsToMS(ms: string | number): number;
export declare function convertMSToMicroseconds(ms: string | number): number;
export declare function setTraceEvents(file: TraceEvent[] | TraceStreamJson): TraceEvent[];
export declare function formatToDuration(ts: number, start: number): number;
export declare function isMark(event: TraceEvent): event is MarkTraceEvent;
export declare function isFrameMark(frame: string, event: TraceEvent): event is MarkTraceEvent;
export declare function isDocLoaderURL(event: MarkTraceEvent, url: string): boolean;
export declare function isFrameNavigationStart(frame: string, event: TraceEvent, url: string): boolean;
export declare function isCommitLoad(event: TraceEvent): boolean;
export declare function byTime(a: {
    ts: number;
}, b: {
    ts: number;
}): number;
export declare function findFrame(events: TraceEvent[], url: string): string;
export declare function parseMarkers(m: string | string[]): Marker[];
export declare function fillArray(arrLngth: number, incr?: number, strt?: number): number[];
/**
 * "name" is expected to be a titlecased string. We want something the user can type easily so the passed string
 * is converted into lowercased words dasherized. Any extra "/" will also be removed.
 *
 * @param str - String to be converted to dasherized case
 */
export declare function convertToTypable(name: string): string;
export declare function toNearestHundreth(n: number): number;
export declare const chalkScheme: {
    white: chalk.Chalk;
    warning: chalk.Chalk;
    header: chalk.Chalk;
    regress: chalk.Chalk;
    neutral: chalk.Chalk;
    significant: chalk.Chalk;
    imprv: chalk.Chalk;
    phase: chalk.Chalk;
    faint: chalk.Chalk;
    checkmark: string;
    blackBgGreen: chalk.Chalk;
    blackBgRed: chalk.Chalk;
    blackBgBlue: chalk.Chalk;
    blackBgYellow: chalk.Chalk;
    tbBranding: {
        lime: chalk.Chalk;
        blue: chalk.Chalk;
        aqua: chalk.Chalk;
        dkBlue: chalk.Chalk;
        grey: chalk.Chalk;
    };
};
export declare function convertToSentCase(str: string): string;
export declare function logHeading(heading: string): void;
export declare type logBarOptions = {
    totalDuration: number;
    duration: number;
    title: string;
};
export declare function logBar(ops: logBarOptions): string;
export declare function timestamp(): number;
export declare function durationInSec(endTime: number, startTime: number): number;
//# sourceMappingURL=utils.d.ts.map